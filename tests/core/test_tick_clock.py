# tests/core/test_tick_clock.py
# [AI]
# Generated by assistant under integrator review
# Must follow locked contracts and tagging rules

"""Tests for tick advancement engine.
Validates tick increment, debug logging, and TickEvent emission.
"""

import pytest
from unittest.mock import patch

from Adrift.core.tick_clock import advance_tick



@pytest.fixture
def initial_world_state():
    return {"tick": 0}


# @tags: ["time", "actor_data", "mvp", "runtime_behavior"]
# @status: "permanent"
def test_advance_tick_increments_tick(initial_world_state):
    advance_tick(initial_world_state)
    assert initial_world_state["tick"] == 1


# @tags: ["time", "actor_data", "mvp", "runtime_behavior"]
# @status: "permanent"
@patch("core.tick_clock.debug")
def test_debug_log_includes_tick_data(mock_debug, initial_world_state):
    advance_tick(initial_world_state)
    mock_debug.assert_called_once()
    args, kwargs = mock_debug.call_args
    assert kwargs["context"] == "tick_clock"
    assert kwargs["action"] == "advance_tick"
    assert "tick" in kwargs["data"]
    assert "ai_tags" in kwargs
    assert set(kwargs["ai_tags"]) >= {"time", "actor_data", "mvp", "runtime_behavior"}


# @tags: ["time", "actor_data", "mvp", "runtime_behavior"]
# @status: "permanent"
@patch("core.tick_clock.publish")
def test_tick_event_emitted(mock_publish, initial_world_state):
    advance_tick(initial_world_state)
    mock_publish.assert_called_once()
    args, kwargs = mock_publish.call_args
    event = args[0]
    assert event["tags"]["domain"] == "time"
    assert event["tags"]["behavior"] == "trigger"
    assert event["tags"]["urgency"] == "low"
    assert event["meta"]["source"] == "tick_clock"
    assert event["payload"]["tick"] == 1


# @tags: ["time", "actor_data", "mvp", "runtime_behavior"]
# @status: "permanent"
@patch("core.tick_clock.publish")
def test_tick_event_ai_tags_valid(mock_publish, initial_world_state):
    advance_tick(initial_world_state)
    event = mock_publish.call_args[0][0]
    tags = event["tags"]
    assert set(tags) == {"domain", "behavior", "urgency"}
