{
  "config": {
    "fqname": "config",
    "type": "module",
    "description": "",
    "tags": [],
    "source_file": "config.py",
    "test_coverage": false,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "config",
      "module": "config",
      "name": "config",
      "type": "module",
      "lineno": 1,
      "source_file": "config.py",
      "description": "",
      "docstring_full": "",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": false,
      "metadata": {}
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "config.DEBUG_MODE": {
    "fqname": "config.DEBUG_MODE",
    "type": "variable",
    "description": "Set to True to enable debug output",
    "tags": [],
    "source_file": "config.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": "",
    "is_orphaned": true,
    "metadata": {
      "fqname": "config.DEBUG_MODE",
      "module": "config",
      "name": "DEBUG_MODE",
      "type": "variable",
      "lineno": 8,
      "source_file": "config.py",
      "description": "Set to True to enable debug output",
      "docstring_full": "Set to True to enable debug output",
      "tags": [],
      "linked_journal_entry": "",
      "deprecated": false,
      "status": "",
      "visibility": "",
      "docstring_present": true,
      "metadata": {}
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "__init__": {
    "fqname": "__init__",
    "type": "module",
    "description": "",
    "tags": [],
    "source_file": "__init__.py",
    "test_coverage": false,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "__init__",
      "module": "__init__",
      "name": "__init__",
      "type": "module",
      "lineno": 1,
      "source_file": "__init__.py",
      "description": "",
      "docstring_full": "",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": false,
      "metadata": {}
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "constants.mutation_rarity_weights": {
    "fqname": "constants.mutation_rarity_weights",
    "type": "module",
    "description": "🎯 Mutation Rarity Weight Tables",
    "tags": [],
    "source_file": "constants\\mutation_rarity_weights.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "constants.mutation_rarity_weights",
      "module": "constants.mutation_rarity_weights",
      "name": "constants.mutation_rarity_weights",
      "type": "module",
      "lineno": 1,
      "source_file": "constants\\mutation_rarity_weights.py",
      "description": "🎯 Mutation Rarity Weight Tables",
      "docstring_full": "🎯 Mutation Rarity Weight Tables\n\nDefines the probability distribution for technique evolution mutations.\n\nEach mutation offer is generated by randomly selecting a rarity\nfrom a weighted table. These weights are affected by the actor’s\ncurrent *boost level* for the relevant skill.\n\nBoosts are obtained by spending banked mutations. They increase\nthe quality of future mutation offers by excluding lower tiers\nfrom the rarity pool.\n\n---\n\n📊 Boost Level Effects:\n\n| Boost Level | Eligible Rarities          |\n|-------------|-----------------------------|\n| 0           | common, uncommon, rare, epic |\n| 1           | uncommon, rare, epic         |\n| 2           | rare, epic                   |\n| 3+          | epic only                    |\n\nEach rarity has a base weight representing its likelihood.\n\nNote: These are NOT player-visible rarity drop rates; they are\ninternal tuning parameters for the mutation system.\n\n---",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {}
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "constants.mutation_rarity_weights.RARITY_WEIGHTS_BY_BOOST": {
    "fqname": "constants.mutation_rarity_weights.RARITY_WEIGHTS_BY_BOOST",
    "type": "variable",
    "description": "",
    "tags": [],
    "source_file": "constants\\mutation_rarity_weights.py",
    "test_coverage": false,
    "docstring_present": false,
    "linked_journal_entry": "",
    "is_orphaned": true,
    "metadata": {
      "fqname": "constants.mutation_rarity_weights.RARITY_WEIGHTS_BY_BOOST",
      "module": "constants.mutation_rarity_weights",
      "name": "RARITY_WEIGHTS_BY_BOOST",
      "type": "variable",
      "lineno": 35,
      "source_file": "constants\\mutation_rarity_weights.py",
      "description": "",
      "docstring_full": "",
      "tags": [],
      "linked_journal_entry": "",
      "deprecated": false,
      "status": "",
      "visibility": "",
      "docstring_present": false,
      "metadata": {}
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "constants._init_": {
    "fqname": "constants._init_",
    "type": "module",
    "description": "",
    "tags": [],
    "source_file": "constants\\_init_.py",
    "test_coverage": false,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "constants._init_",
      "module": "constants._init_",
      "name": "constants._init_",
      "type": "module",
      "lineno": 1,
      "source_file": "constants\\_init_.py",
      "description": "",
      "docstring_full": "",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": false,
      "metadata": {}
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "definitions.actor": {
    "fqname": "definitions.actor",
    "type": "module",
    "description": "",
    "tags": [],
    "source_file": "definitions\\actor.py",
    "test_coverage": false,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "definitions.actor",
      "module": "definitions.actor",
      "name": "definitions.actor",
      "type": "module",
      "lineno": 1,
      "source_file": "definitions\\actor.py",
      "description": "",
      "docstring_full": "",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": false,
      "metadata": {}
    },
    "links": [
      {
        "target": "definitions.actor.initialize_skill_if_missing",
        "type": "calls"
      },
      {
        "target": "helpers.actor_helpers.initialize_skill_if_missing",
        "type": "calls"
      },
      {
        "target": "definitions.actor.initialize_technique_if_missing",
        "type": "calls"
      },
      {
        "target": "helpers.actor_helpers.initialize_technique_if_missing",
        "type": "calls"
      }
    ],
    "called_by_fqns": [],
    "calls_fqns": [
      "definitions.actor.initialize_skill_if_missing",
      "definitions.actor.initialize_technique_if_missing",
      "helpers.actor_helpers.initialize_skill_if_missing",
      "helpers.actor_helpers.initialize_technique_if_missing"
    ]
  },
  "definitions.actor.Actor": {
    "fqname": "definitions.actor.Actor",
    "type": "class",
    "description": "Represents a single controllable or autonomous entity in the game world.",
    "tags": [],
    "source_file": "definitions\\actor.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "definitions.actor.Actor",
      "module": "definitions.actor",
      "name": "Actor",
      "type": "class",
      "lineno": 15,
      "source_file": "definitions\\actor.py",
      "description": "Represents a single controllable or autonomous entity in the game world.",
      "docstring_full": "Represents a single controllable or autonomous entity in the game world.\nHolds mutable skill and technique instances, along with movement and mutation state.",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {}
    },
    "links": [
      {
        "target": "definitions.actor.initialize_skill_if_missing",
        "type": "calls"
      },
      {
        "target": "helpers.actor_helpers.initialize_skill_if_missing",
        "type": "calls"
      },
      {
        "target": "definitions.actor.initialize_technique_if_missing",
        "type": "calls"
      },
      {
        "target": "helpers.actor_helpers.initialize_technique_if_missing",
        "type": "calls"
      }
    ],
    "called_by_fqns": [],
    "calls_fqns": [
      "definitions.actor.initialize_skill_if_missing",
      "definitions.actor.initialize_technique_if_missing",
      "helpers.actor_helpers.initialize_skill_if_missing",
      "helpers.actor_helpers.initialize_technique_if_missing"
    ]
  },
  "definitions.actor.add_skill": {
    "fqname": "definitions.actor.add_skill",
    "type": "function",
    "description": "Adds a properly initialized skill block to the actor.",
    "tags": [],
    "source_file": "definitions\\actor.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "definitions.actor.add_skill",
      "module": "definitions.actor",
      "name": "add_skill",
      "type": "function",
      "lineno": 69,
      "source_file": "definitions\\actor.py",
      "description": "Adds a properly initialized skill block to the actor.",
      "docstring_full": "Adds a properly initialized skill block to the actor.\n\nStructure:\n    actor.skills[skill_id] = {\n        \"level\": 0,\n        \"xp\": 0,\n        \"visible\": False,\n        \"techniques\": {}\n    }\n\nRaises:\n    ValueError: if the skill_id is not in SKILL_DB",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "actor",
          "skill_id"
        ],
        "returns": null
      }
    },
    "links": [
      {
        "target": "definitions.actor.initialize_skill_if_missing",
        "type": "calls"
      },
      {
        "target": "helpers.actor_helpers.initialize_skill_if_missing",
        "type": "calls"
      },
      {
        "target": "definitions.actor.initialize_technique_if_missing",
        "type": "calls"
      },
      {
        "target": "helpers.actor_helpers.initialize_technique_if_missing",
        "type": "calls"
      }
    ],
    "called_by_fqns": [],
    "calls_fqns": [
      "definitions.actor.initialize_skill_if_missing",
      "definitions.actor.initialize_technique_if_missing",
      "helpers.actor_helpers.initialize_skill_if_missing",
      "helpers.actor_helpers.initialize_technique_if_missing"
    ]
  },
  "definitions.actor.add_technique": {
    "fqname": "definitions.actor.add_technique",
    "type": "function",
    "description": "Adds a technique instance to the actor, based on canonical TECHNIQUE_DB.",
    "tags": [],
    "source_file": "definitions\\actor.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "definitions.actor.add_technique",
      "module": "definitions.actor",
      "name": "add_technique",
      "type": "function",
      "lineno": 97,
      "source_file": "definitions\\actor.py",
      "description": "Adds a technique instance to the actor, based on canonical TECHNIQUE_DB.",
      "docstring_full": "Adds a technique instance to the actor, based on canonical TECHNIQUE_DB.\n- Copies the static definition\n- Initializes mutations[] and metadata fields\n- Registers in both actor.skills[skill][\"techniques\"] and actor.techniques[tech]\n\nRequires:\n    - Skill must already be present\n\nRaises:\n    ValueError: if the technique is unknown or the required skill is missing",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "actor",
          "tech_id"
        ],
        "returns": null
      }
    },
    "links": [
      {
        "target": "definitions.actor.initialize_skill_if_missing",
        "type": "calls"
      },
      {
        "target": "helpers.actor_helpers.initialize_skill_if_missing",
        "type": "calls"
      },
      {
        "target": "definitions.actor.initialize_technique_if_missing",
        "type": "calls"
      },
      {
        "target": "helpers.actor_helpers.initialize_technique_if_missing",
        "type": "calls"
      }
    ],
    "called_by_fqns": [
      "utils.technique_unlock_utils",
      "utils.technique_unlock_utils.auto_unlock_techniques"
    ],
    "calls_fqns": [
      "definitions.actor.initialize_skill_if_missing",
      "definitions.actor.initialize_technique_if_missing",
      "helpers.actor_helpers.initialize_skill_if_missing",
      "helpers.actor_helpers.initialize_technique_if_missing"
    ]
  },
  "definitions.actor.initialize_skill_if_missing": {
    "fqname": "definitions.actor.initialize_skill_if_missing",
    "type": "method",
    "description": "",
    "tags": [],
    "source_file": "definitions\\actor.py",
    "test_coverage": false,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "definitions.actor.initialize_skill_if_missing",
      "module": "definitions.actor",
      "name": "initialize_skill_if_missing",
      "type": "method",
      "lineno": 21,
      "source_file": "definitions\\actor.py",
      "description": "",
      "docstring_full": "",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": false,
      "metadata": {
        "args": [
          "self",
          "skill_id"
        ],
        "returns": null
      }
    },
    "links": [
      {
        "target": "definitions.actor.initialize_skill_if_missing",
        "type": "calls"
      },
      {
        "target": "helpers.actor_helpers.initialize_skill_if_missing",
        "type": "calls"
      },
      {
        "target": "definitions.actor.initialize_technique_if_missing",
        "type": "calls"
      },
      {
        "target": "helpers.actor_helpers.initialize_technique_if_missing",
        "type": "calls"
      }
    ],
    "called_by_fqns": [
      "definitions.actor",
      "definitions.actor.Actor",
      "definitions.actor.add_skill",
      "definitions.actor.add_technique",
      "definitions.actor.initialize_skill_if_missing",
      "definitions.actor.initialize_technique_if_missing",
      "definitions.actor.__init__",
      "definitions.actor.has_skill",
      "definitions.actor.has_technique",
      "definitions.actor.get_technique",
      "utils.skill_xp_utils",
      "utils.skill_xp_utils.track_xp_gain",
      "utils.skill_xp_utils._tags_match",
      "utils.skill_xp_utils._check_level_up"
    ],
    "calls_fqns": [
      "definitions.actor.initialize_skill_if_missing",
      "definitions.actor.initialize_technique_if_missing",
      "helpers.actor_helpers.initialize_skill_if_missing",
      "helpers.actor_helpers.initialize_technique_if_missing"
    ]
  },
  "definitions.actor.initialize_technique_if_missing": {
    "fqname": "definitions.actor.initialize_technique_if_missing",
    "type": "method",
    "description": "",
    "tags": [],
    "source_file": "definitions\\actor.py",
    "test_coverage": false,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "definitions.actor.initialize_technique_if_missing",
      "module": "definitions.actor",
      "name": "initialize_technique_if_missing",
      "type": "method",
      "lineno": 24,
      "source_file": "definitions\\actor.py",
      "description": "",
      "docstring_full": "",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": false,
      "metadata": {
        "args": [
          "self",
          "skill_id",
          "tech_id"
        ],
        "returns": null
      }
    },
    "links": [
      {
        "target": "definitions.actor.initialize_skill_if_missing",
        "type": "calls"
      },
      {
        "target": "helpers.actor_helpers.initialize_skill_if_missing",
        "type": "calls"
      },
      {
        "target": "definitions.actor.initialize_technique_if_missing",
        "type": "calls"
      },
      {
        "target": "helpers.actor_helpers.initialize_technique_if_missing",
        "type": "calls"
      }
    ],
    "called_by_fqns": [
      "definitions.actor",
      "definitions.actor.Actor",
      "definitions.actor.add_skill",
      "definitions.actor.add_technique",
      "definitions.actor.initialize_skill_if_missing",
      "definitions.actor.initialize_technique_if_missing",
      "definitions.actor.__init__",
      "definitions.actor.has_skill",
      "definitions.actor.has_technique",
      "definitions.actor.get_technique",
      "utils.skill_xp_utils",
      "utils.skill_xp_utils.track_xp_gain",
      "utils.skill_xp_utils._tags_match",
      "utils.skill_xp_utils._check_level_up"
    ],
    "calls_fqns": [
      "definitions.actor.initialize_skill_if_missing",
      "definitions.actor.initialize_technique_if_missing",
      "helpers.actor_helpers.initialize_skill_if_missing",
      "helpers.actor_helpers.initialize_technique_if_missing"
    ]
  },
  "definitions.actor.__init__": {
    "fqname": "definitions.actor.__init__",
    "type": "method",
    "description": "",
    "tags": [],
    "source_file": "definitions\\actor.py",
    "test_coverage": false,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "definitions.actor.__init__",
      "module": "definitions.actor",
      "name": "__init__",
      "type": "method",
      "lineno": 27,
      "source_file": "definitions\\actor.py",
      "description": "",
      "docstring_full": "",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": false,
      "metadata": {
        "args": [
          "self",
          "name",
          "current_zone"
        ],
        "returns": null
      }
    },
    "links": [
      {
        "target": "definitions.actor.initialize_skill_if_missing",
        "type": "calls"
      },
      {
        "target": "helpers.actor_helpers.initialize_skill_if_missing",
        "type": "calls"
      },
      {
        "target": "definitions.actor.initialize_technique_if_missing",
        "type": "calls"
      },
      {
        "target": "helpers.actor_helpers.initialize_technique_if_missing",
        "type": "calls"
      }
    ],
    "called_by_fqns": [],
    "calls_fqns": [
      "definitions.actor.initialize_skill_if_missing",
      "definitions.actor.initialize_technique_if_missing",
      "helpers.actor_helpers.initialize_skill_if_missing",
      "helpers.actor_helpers.initialize_technique_if_missing"
    ]
  },
  "definitions.actor.has_skill": {
    "fqname": "definitions.actor.has_skill",
    "type": "method",
    "description": "Returns True if the actor currently owns the given skill.",
    "tags": [],
    "source_file": "definitions\\actor.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "definitions.actor.has_skill",
      "module": "definitions.actor",
      "name": "has_skill",
      "type": "method",
      "lineno": 47,
      "source_file": "definitions\\actor.py",
      "description": "Returns True if the actor currently owns the given skill.",
      "docstring_full": "Returns True if the actor currently owns the given skill.",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "self",
          "skill_id"
        ],
        "returns": null
      }
    },
    "links": [
      {
        "target": "definitions.actor.initialize_skill_if_missing",
        "type": "calls"
      },
      {
        "target": "helpers.actor_helpers.initialize_skill_if_missing",
        "type": "calls"
      },
      {
        "target": "definitions.actor.initialize_technique_if_missing",
        "type": "calls"
      },
      {
        "target": "helpers.actor_helpers.initialize_technique_if_missing",
        "type": "calls"
      }
    ],
    "called_by_fqns": [],
    "calls_fqns": [
      "definitions.actor.initialize_skill_if_missing",
      "definitions.actor.initialize_technique_if_missing",
      "helpers.actor_helpers.initialize_skill_if_missing",
      "helpers.actor_helpers.initialize_technique_if_missing"
    ]
  },
  "definitions.actor.has_technique": {
    "fqname": "definitions.actor.has_technique",
    "type": "method",
    "description": "Returns True if the actor has the given technique in their flat cache.",
    "tags": [],
    "source_file": "definitions\\actor.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "definitions.actor.has_technique",
      "module": "definitions.actor",
      "name": "has_technique",
      "type": "method",
      "lineno": 51,
      "source_file": "definitions\\actor.py",
      "description": "Returns True if the actor has the given technique in their flat cache.",
      "docstring_full": "Returns True if the actor has the given technique in their flat cache.",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "self",
          "tech_id"
        ],
        "returns": null
      }
    },
    "links": [
      {
        "target": "definitions.actor.initialize_skill_if_missing",
        "type": "calls"
      },
      {
        "target": "helpers.actor_helpers.initialize_skill_if_missing",
        "type": "calls"
      },
      {
        "target": "definitions.actor.initialize_technique_if_missing",
        "type": "calls"
      },
      {
        "target": "helpers.actor_helpers.initialize_technique_if_missing",
        "type": "calls"
      }
    ],
    "called_by_fqns": [],
    "calls_fqns": [
      "definitions.actor.initialize_skill_if_missing",
      "definitions.actor.initialize_technique_if_missing",
      "helpers.actor_helpers.initialize_skill_if_missing",
      "helpers.actor_helpers.initialize_technique_if_missing"
    ]
  },
  "definitions.actor.get_technique": {
    "fqname": "definitions.actor.get_technique",
    "type": "method",
    "description": "Safe accessor for a technique the actor owns.",
    "tags": [],
    "source_file": "definitions\\actor.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "definitions.actor.get_technique",
      "module": "definitions.actor",
      "name": "get_technique",
      "type": "method",
      "lineno": 55,
      "source_file": "definitions\\actor.py",
      "description": "Safe accessor for a technique the actor owns.",
      "docstring_full": "Safe accessor for a technique the actor owns.\nRaises KeyError if either the skill or technique is missing.\n\nReturns:\n    technique_dict (mutable) belonging to this actor",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "self",
          "skill_id",
          "tech_id"
        ],
        "returns": null
      }
    },
    "links": [
      {
        "target": "definitions.actor.initialize_skill_if_missing",
        "type": "calls"
      },
      {
        "target": "helpers.actor_helpers.initialize_skill_if_missing",
        "type": "calls"
      },
      {
        "target": "definitions.actor.initialize_technique_if_missing",
        "type": "calls"
      },
      {
        "target": "helpers.actor_helpers.initialize_technique_if_missing",
        "type": "calls"
      }
    ],
    "called_by_fqns": [],
    "calls_fqns": [
      "definitions.actor.initialize_skill_if_missing",
      "definitions.actor.initialize_technique_if_missing",
      "helpers.actor_helpers.initialize_skill_if_missing",
      "helpers.actor_helpers.initialize_technique_if_missing"
    ]
  },
  "definitions.effect": {
    "fqname": "definitions.effect",
    "type": "module",
    "description": "",
    "tags": [],
    "source_file": "definitions\\effect.py",
    "test_coverage": false,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "definitions.effect",
      "module": "definitions.effect",
      "name": "definitions.effect",
      "type": "module",
      "lineno": 1,
      "source_file": "definitions\\effect.py",
      "description": "",
      "docstring_full": "",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": false,
      "metadata": {}
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "definitions.effect.Effect": {
    "fqname": "definitions.effect.Effect",
    "type": "class",
    "description": "Placeholder class for status effects and conditions.",
    "tags": [],
    "source_file": "definitions\\effect.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "definitions.effect.Effect",
      "module": "definitions.effect",
      "name": "Effect",
      "type": "class",
      "lineno": 4,
      "source_file": "definitions\\effect.py",
      "description": "Placeholder class for status effects and conditions.",
      "docstring_full": "Placeholder class for status effects and conditions.\n\n@ignore: stub — no effect logic implemented",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {}
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "definitions.effect.__init__": {
    "fqname": "definitions.effect.__init__",
    "type": "method",
    "description": "",
    "tags": [],
    "source_file": "definitions\\effect.py",
    "test_coverage": false,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "definitions.effect.__init__",
      "module": "definitions.effect",
      "name": "__init__",
      "type": "method",
      "lineno": 10,
      "source_file": "definitions\\effect.py",
      "description": "",
      "docstring_full": "",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": false,
      "metadata": {
        "args": [
          "self"
        ],
        "returns": null
      }
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "definitions.evolution_offer_generator": {
    "fqname": "definitions.evolution_offer_generator",
    "type": "module",
    "description": "",
    "tags": [],
    "source_file": "definitions\\evolution_offer_generator.py",
    "test_coverage": false,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "definitions.evolution_offer_generator",
      "module": "definitions.evolution_offer_generator",
      "name": "definitions.evolution_offer_generator",
      "type": "module",
      "lineno": 1,
      "source_file": "definitions\\evolution_offer_generator.py",
      "description": "",
      "docstring_full": "",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": false,
      "metadata": {}
    },
    "links": [
      {
        "target": "utils.technique_utils.generate_technique",
        "type": "calls"
      },
      {
        "target": "definitions.evolution_offer_generator._generate_base_technique",
        "type": "calls"
      },
      {
        "target": "utils.technique_utils.evolve_technique",
        "type": "calls"
      }
    ],
    "called_by_fqns": [],
    "calls_fqns": [
      "definitions.evolution_offer_generator._generate_base_technique",
      "utils.technique_utils.evolve_technique",
      "utils.technique_utils.generate_technique"
    ]
  },
  "definitions.evolution_offer_generator.generate_evolution_offer": {
    "fqname": "definitions.evolution_offer_generator.generate_evolution_offer",
    "type": "function",
    "description": "Generate a set of mutation options for a technique based on the given skill.",
    "tags": [],
    "source_file": "definitions\\evolution_offer_generator.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "definitions.evolution_offer_generator.generate_evolution_offer",
      "module": "definitions.evolution_offer_generator",
      "name": "generate_evolution_offer",
      "type": "function",
      "lineno": 15,
      "source_file": "definitions\\evolution_offer_generator.py",
      "description": "Generate a set of mutation options for a technique based on the given skill.",
      "docstring_full": "Generate a set of mutation options for a technique based on the given skill.\nIf boost_level > 0, removes lowest rarity tier(s) and adjusts weights accordingly.\n\nArgs:\n    skill (str): The base skill this offer applies to (e.g. 'sword')\n    boost_level (int): 0 (default) = no boost, 1 = skip common, etc.\n    current (dict): Existing technique dict to mutate (optional)\n    banks (int): If >= 3, includes a boost offer (if not already boosted)\n\nReturns:\n    List of dicts, each representing a candidate evolved technique or bank option",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "skill",
          "boost_level",
          "current",
          "banks"
        ],
        "returns": null
      }
    },
    "links": [
      {
        "target": "utils.technique_utils.generate_technique",
        "type": "calls"
      },
      {
        "target": "definitions.evolution_offer_generator._generate_base_technique",
        "type": "calls"
      },
      {
        "target": "utils.technique_utils.evolve_technique",
        "type": "calls"
      }
    ],
    "called_by_fqns": [
      "flow.actor_mutation_flow",
      "flow.actor_mutation_flow.get_mutation_offer",
      "flow.actor_mutation_flow.can_offer_boost",
      "flow.actor_mutation_flow.apply_boost",
      "flow.actor_mutation_flow.apply_mutation_choice",
      "flow.actor_mutation_flow.handle_pending_mutation_offer",
      "flow.actor_mutation_flow.handle_post_action_mutation",
      "flow.actor_mutation_flow._boost_level_to_rarity",
      "utils.actor_offer_utils",
      "utils.actor_offer_utils.generate_evolution_offer_for_actor",
      "utils.actor_offer_utils._boost_level_to_rarity",
      "utils.evolution_offer_utils",
      "utils.evolution_offer_utils.get_allowed_rarities",
      "utils.evolution_offer_utils.generate_evolution_offer_for_actor"
    ],
    "calls_fqns": [
      "definitions.evolution_offer_generator._generate_base_technique",
      "utils.technique_utils.evolve_technique",
      "utils.technique_utils.generate_technique"
    ]
  },
  "definitions.evolution_offer_generator._generate_base_technique": {
    "fqname": "definitions.evolution_offer_generator._generate_base_technique",
    "type": "function",
    "description": "Stub function to generate a technique if none provided.",
    "tags": [],
    "source_file": "definitions\\evolution_offer_generator.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "definitions.evolution_offer_generator._generate_base_technique",
      "module": "definitions.evolution_offer_generator",
      "name": "_generate_base_technique",
      "type": "function",
      "lineno": 52,
      "source_file": "definitions\\evolution_offer_generator.py",
      "description": "Stub function to generate a technique if none provided.",
      "docstring_full": "Stub function to generate a technique if none provided.",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "skill"
        ],
        "returns": null
      }
    },
    "links": [
      {
        "target": "utils.technique_utils.generate_technique",
        "type": "calls"
      },
      {
        "target": "definitions.evolution_offer_generator._generate_base_technique",
        "type": "calls"
      },
      {
        "target": "utils.technique_utils.evolve_technique",
        "type": "calls"
      }
    ],
    "called_by_fqns": [
      "definitions.evolution_offer_generator",
      "definitions.evolution_offer_generator.generate_evolution_offer",
      "definitions.evolution_offer_generator._generate_base_technique"
    ],
    "calls_fqns": [
      "definitions.evolution_offer_generator._generate_base_technique",
      "utils.technique_utils.evolve_technique",
      "utils.technique_utils.generate_technique"
    ]
  },
  "definitions.faction": {
    "fqname": "definitions.faction",
    "type": "module",
    "description": "",
    "tags": [],
    "source_file": "definitions\\faction.py",
    "test_coverage": false,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "definitions.faction",
      "module": "definitions.faction",
      "name": "definitions.faction",
      "type": "module",
      "lineno": 1,
      "source_file": "definitions\\faction.py",
      "description": "",
      "docstring_full": "",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": false,
      "metadata": {}
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "definitions.faction.Faction": {
    "fqname": "definitions.faction.Faction",
    "type": "class",
    "description": "Placeholder class for faction behavior and reputation tracking.",
    "tags": [],
    "source_file": "definitions\\faction.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "definitions.faction.Faction",
      "module": "definitions.faction",
      "name": "Faction",
      "type": "class",
      "lineno": 4,
      "source_file": "definitions\\faction.py",
      "description": "Placeholder class for faction behavior and reputation tracking.",
      "docstring_full": "Placeholder class for faction behavior and reputation tracking.\n\n@ignore: stub — faction system deferred",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {}
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "definitions.faction.__init__": {
    "fqname": "definitions.faction.__init__",
    "type": "method",
    "description": "",
    "tags": [],
    "source_file": "definitions\\faction.py",
    "test_coverage": false,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "definitions.faction.__init__",
      "module": "definitions.faction",
      "name": "__init__",
      "type": "method",
      "lineno": 10,
      "source_file": "definitions\\faction.py",
      "description": "",
      "docstring_full": "",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": false,
      "metadata": {
        "args": [
          "self"
        ],
        "returns": null
      }
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "definitions.floorplan": {
    "fqname": "definitions.floorplan",
    "type": "module",
    "description": "This module defines the Floorplan structure and creation utilities.",
    "tags": [],
    "source_file": "definitions\\floorplan.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "definitions.floorplan",
      "module": "definitions.floorplan",
      "name": "definitions.floorplan",
      "type": "module",
      "lineno": 1,
      "source_file": "definitions\\floorplan.py",
      "description": "This module defines the Floorplan structure and creation utilities.",
      "docstring_full": "This module defines the Floorplan structure and creation utilities.\nFloorplans are tactical maps composed of dict-based Tiles, each identified by (x, y).\n\nDesign Philosophy:\n- Tiles are modeled as plain dictionaries to reduce overhead and increase flexibility.\n- All relevant tile state is embedded explicitly for clarity and easier serialization.\n- Floorplans are maps of arbitrary size, created dynamically as needed.\n- This module avoids using classes or object methods to preserve modularity and data transparency.\n- Commenting is exhaustive to support learning, maintainability, and extensibility.",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {}
    },
    "links": [
      {
        "target": "definitions.floorplan.create_empty_tile",
        "type": "calls"
      }
    ],
    "called_by_fqns": [],
    "calls_fqns": [
      "definitions.floorplan.create_empty_tile"
    ]
  },
  "definitions.floorplan.Coord": {
    "fqname": "definitions.floorplan.Coord",
    "type": "variable",
    "description": "",
    "tags": [],
    "source_file": "definitions\\floorplan.py",
    "test_coverage": false,
    "docstring_present": false,
    "linked_journal_entry": "",
    "is_orphaned": false,
    "metadata": {
      "fqname": "definitions.floorplan.Coord",
      "module": "definitions.floorplan",
      "name": "Coord",
      "type": "variable",
      "lineno": 19,
      "source_file": "definitions\\floorplan.py",
      "description": "",
      "docstring_full": "",
      "tags": [],
      "linked_journal_entry": "",
      "deprecated": false,
      "status": "",
      "visibility": "",
      "docstring_present": false,
      "metadata": {}
    },
    "links": [
      {
        "target": "definitions.floorplan.create_empty_tile",
        "type": "calls"
      }
    ],
    "called_by_fqns": [],
    "calls_fqns": [
      "definitions.floorplan.create_empty_tile"
    ]
  },
  "definitions.floorplan.Tile": {
    "fqname": "definitions.floorplan.Tile",
    "type": "variable",
    "description": "",
    "tags": [],
    "source_file": "definitions\\floorplan.py",
    "test_coverage": false,
    "docstring_present": false,
    "linked_journal_entry": "",
    "is_orphaned": false,
    "metadata": {
      "fqname": "definitions.floorplan.Tile",
      "module": "definitions.floorplan",
      "name": "Tile",
      "type": "variable",
      "lineno": 20,
      "source_file": "definitions\\floorplan.py",
      "description": "",
      "docstring_full": "",
      "tags": [],
      "linked_journal_entry": "",
      "deprecated": false,
      "status": "",
      "visibility": "",
      "docstring_present": false,
      "metadata": {}
    },
    "links": [
      {
        "target": "definitions.floorplan.create_empty_tile",
        "type": "calls"
      }
    ],
    "called_by_fqns": [],
    "calls_fqns": [
      "definitions.floorplan.create_empty_tile"
    ]
  },
  "definitions.floorplan.create_empty_tile": {
    "fqname": "definitions.floorplan.create_empty_tile",
    "type": "function",
    "description": "Create a blank tile with default fields.",
    "tags": [],
    "source_file": "definitions\\floorplan.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "definitions.floorplan.create_empty_tile",
      "module": "definitions.floorplan",
      "name": "create_empty_tile",
      "type": "function",
      "lineno": 23,
      "source_file": "definitions\\floorplan.py",
      "description": "Create a blank tile with default fields.",
      "docstring_full": "Create a blank tile with default fields.\n\nThis function defines the atomic unit of tactical gameplay.\nAll tiles are assumed to exist in a uniform dict format, with every field explicitly present.\nAvoids lazy or implicit defaults to reduce edge-case bugs and enhance testability.",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [],
        "returns": null
      }
    },
    "links": [
      {
        "target": "definitions.floorplan.create_empty_tile",
        "type": "calls"
      }
    ],
    "called_by_fqns": [
      "definitions.floorplan",
      "definitions.floorplan.Coord",
      "definitions.floorplan.Tile",
      "definitions.floorplan.create_empty_tile",
      "definitions.floorplan.create_floorplan",
      "definitions.floorplan.get_tile",
      "definitions.floorplan.set_tile"
    ],
    "calls_fqns": [
      "definitions.floorplan.create_empty_tile"
    ]
  },
  "definitions.floorplan.create_floorplan": {
    "fqname": "definitions.floorplan.create_floorplan",
    "type": "function",
    "description": "Generate a new floorplan map with initialized tiles.",
    "tags": [],
    "source_file": "definitions\\floorplan.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "definitions.floorplan.create_floorplan",
      "module": "definitions.floorplan",
      "name": "create_floorplan",
      "type": "function",
      "lineno": 43,
      "source_file": "definitions\\floorplan.py",
      "description": "Generate a new floorplan map with initialized tiles.",
      "docstring_full": "Generate a new floorplan map with initialized tiles.\n\nFloorplans are rectangular regions defined by width and height.\nEach tile is prepopulated with a clean state to avoid on-demand logic elsewhere.\nThe floorplan itself is returned as a dict with metadata and tile dictionary.\n\nArgs:\n    width: Number of tiles in the horizontal direction\n    height: Number of tiles in the vertical direction\n    map_id: Unique identifier string for the map instance\n    seed: Optional integer seed for map-specific RNG or procedural behavior\n    label: Human-readable label, used in UI or debug contexts",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "width",
          "height",
          "map_id",
          "seed",
          "label"
        ],
        "returns": null
      }
    },
    "links": [
      {
        "target": "definitions.floorplan.create_empty_tile",
        "type": "calls"
      }
    ],
    "called_by_fqns": [
      "flow.engine",
      "flow.engine.enter_test_map"
    ],
    "calls_fqns": [
      "definitions.floorplan.create_empty_tile"
    ]
  },
  "definitions.floorplan.get_tile": {
    "fqname": "definitions.floorplan.get_tile",
    "type": "function",
    "description": "Retrieve a tile safely from the floorplan.",
    "tags": [],
    "source_file": "definitions\\floorplan.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "definitions.floorplan.get_tile",
      "module": "definitions.floorplan",
      "name": "get_tile",
      "type": "function",
      "lineno": 75,
      "source_file": "definitions\\floorplan.py",
      "description": "Retrieve a tile safely from the floorplan.",
      "docstring_full": "Retrieve a tile safely from the floorplan.\n\nThis wrapper protects against direct dictionary access to allow future logic hooks,\nvalidation, or lazy fallback behavior.\n\nArgs:\n    floorplan: The full floorplan dictionary\n    coord: Tuple (x, y) representing the tile location\n\nReturns:\n    Tile dictionary at given coordinates, or None if out-of-bounds.",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "floorplan",
          "coord"
        ],
        "returns": null
      }
    },
    "links": [
      {
        "target": "definitions.floorplan.create_empty_tile",
        "type": "calls"
      }
    ],
    "called_by_fqns": [
      "flow.engine",
      "flow.engine.enter_test_map"
    ],
    "calls_fqns": [
      "definitions.floorplan.create_empty_tile"
    ]
  },
  "definitions.floorplan.set_tile": {
    "fqname": "definitions.floorplan.set_tile",
    "type": "function",
    "description": "Overwrite a tile in the floorplan.",
    "tags": [],
    "source_file": "definitions\\floorplan.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "definitions.floorplan.set_tile",
      "module": "definitions.floorplan",
      "name": "set_tile",
      "type": "function",
      "lineno": 92,
      "source_file": "definitions\\floorplan.py",
      "description": "Overwrite a tile in the floorplan.",
      "docstring_full": "Overwrite a tile in the floorplan.\n\nUsed to inject modified tiles, e.g., after applying damage or building destruction.\nNo validation is performed — it assumes tile_data is well-formed.\n\nArgs:\n    floorplan: Floorplan dict\n    coord: (x, y) coordinate\n    tile_data: New tile dict to replace existing entry",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "floorplan",
          "coord",
          "tile_data"
        ],
        "returns": null
      }
    },
    "links": [
      {
        "target": "definitions.floorplan.create_empty_tile",
        "type": "calls"
      }
    ],
    "called_by_fqns": [
      "flow.engine",
      "flow.engine.enter_test_map"
    ],
    "calls_fqns": [
      "definitions.floorplan.create_empty_tile"
    ]
  },
  "definitions.item": {
    "fqname": "definitions.item",
    "type": "module",
    "description": "",
    "tags": [],
    "source_file": "definitions\\item.py",
    "test_coverage": false,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "definitions.item",
      "module": "definitions.item",
      "name": "definitions.item",
      "type": "module",
      "lineno": 1,
      "source_file": "definitions\\item.py",
      "description": "",
      "docstring_full": "",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": false,
      "metadata": {}
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "definitions.item.Item": {
    "fqname": "definitions.item.Item",
    "type": "class",
    "description": "Placeholder class for equippable and interactable items.",
    "tags": [],
    "source_file": "definitions\\item.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "definitions.item.Item",
      "module": "definitions.item",
      "name": "Item",
      "type": "class",
      "lineno": 4,
      "source_file": "definitions\\item.py",
      "description": "Placeholder class for equippable and interactable items.",
      "docstring_full": "Placeholder class for equippable and interactable items.\n\n@ignore: stub — item system not yet implemented",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {}
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "definitions.item.__init__": {
    "fqname": "definitions.item.__init__",
    "type": "method",
    "description": "",
    "tags": [],
    "source_file": "definitions\\item.py",
    "test_coverage": false,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "definitions.item.__init__",
      "module": "definitions.item",
      "name": "__init__",
      "type": "method",
      "lineno": 10,
      "source_file": "definitions\\item.py",
      "description": "",
      "docstring_full": "",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": false,
      "metadata": {
        "args": [
          "self"
        ],
        "returns": null
      }
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "definitions.skill": {
    "fqname": "definitions.skill",
    "type": "module",
    "description": "",
    "tags": [],
    "source_file": "definitions\\skill.py",
    "test_coverage": false,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "definitions.skill",
      "module": "definitions.skill",
      "name": "definitions.skill",
      "type": "module",
      "lineno": 1,
      "source_file": "definitions\\skill.py",
      "description": "",
      "docstring_full": "",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": false,
      "metadata": {}
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "definitions.skill.SkillInstance": {
    "fqname": "definitions.skill.SkillInstance",
    "type": "class",
    "description": "Represents a single actor-owned skill.",
    "tags": [],
    "source_file": "definitions\\skill.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "definitions.skill.SkillInstance",
      "module": "definitions.skill",
      "name": "SkillInstance",
      "type": "class",
      "lineno": 5,
      "source_file": "definitions\\skill.py",
      "description": "Represents a single actor-owned skill.",
      "docstring_full": "Represents a single actor-owned skill.\nInstances are created from static SKILL_DB definitions.",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {}
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "definitions.skill.__init__": {
    "fqname": "definitions.skill.__init__",
    "type": "method",
    "description": "",
    "tags": [],
    "source_file": "definitions\\skill.py",
    "test_coverage": false,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "definitions.skill.__init__",
      "module": "definitions.skill",
      "name": "__init__",
      "type": "method",
      "lineno": 11,
      "source_file": "definitions\\skill.py",
      "description": "",
      "docstring_full": "",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": false,
      "metadata": {
        "args": [
          "self",
          "skill_id"
        ],
        "returns": null
      }
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "definitions.skill.add_xp": {
    "fqname": "definitions.skill.add_xp",
    "type": "method",
    "description": "",
    "tags": [],
    "source_file": "definitions\\skill.py",
    "test_coverage": false,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "definitions.skill.add_xp",
      "module": "definitions.skill",
      "name": "add_xp",
      "type": "method",
      "lineno": 19,
      "source_file": "definitions\\skill.py",
      "description": "",
      "docstring_full": "",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": false,
      "metadata": {
        "args": [
          "self",
          "amount"
        ],
        "returns": null
      }
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "definitions.skill.add_boost": {
    "fqname": "definitions.skill.add_boost",
    "type": "method",
    "description": "",
    "tags": [],
    "source_file": "definitions\\skill.py",
    "test_coverage": false,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "definitions.skill.add_boost",
      "module": "definitions.skill",
      "name": "add_boost",
      "type": "method",
      "lineno": 24,
      "source_file": "definitions\\skill.py",
      "description": "",
      "docstring_full": "",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": false,
      "metadata": {
        "args": [
          "self",
          "count"
        ],
        "returns": null
      }
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "definitions.skill.consume_boost": {
    "fqname": "definitions.skill.consume_boost",
    "type": "method",
    "description": "",
    "tags": [],
    "source_file": "definitions\\skill.py",
    "test_coverage": false,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "definitions.skill.consume_boost",
      "module": "definitions.skill",
      "name": "consume_boost",
      "type": "method",
      "lineno": 27,
      "source_file": "definitions\\skill.py",
      "description": "",
      "docstring_full": "",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": false,
      "metadata": {
        "args": [
          "self"
        ],
        "returns": null
      }
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "definitions.skill.has_boost": {
    "fqname": "definitions.skill.has_boost",
    "type": "method",
    "description": "",
    "tags": [],
    "source_file": "definitions\\skill.py",
    "test_coverage": false,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "definitions.skill.has_boost",
      "module": "definitions.skill",
      "name": "has_boost",
      "type": "method",
      "lineno": 32,
      "source_file": "definitions\\skill.py",
      "description": "",
      "docstring_full": "",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": false,
      "metadata": {
        "args": [
          "self"
        ],
        "returns": null
      }
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "definitions.skill_defs": {
    "fqname": "definitions.skill_defs",
    "type": "module",
    "description": "",
    "tags": [],
    "source_file": "definitions\\skill_defs.py",
    "test_coverage": false,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "definitions.skill_defs",
      "module": "definitions.skill_defs",
      "name": "definitions.skill_defs",
      "type": "module",
      "lineno": 1,
      "source_file": "definitions\\skill_defs.py",
      "description": "",
      "docstring_full": "",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": false,
      "metadata": {}
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "definitions.skill_defs.SKILL_DB": {
    "fqname": "definitions.skill_defs.SKILL_DB",
    "type": "variable",
    "description": "",
    "tags": [],
    "source_file": "definitions\\skill_defs.py",
    "test_coverage": false,
    "docstring_present": false,
    "linked_journal_entry": "",
    "is_orphaned": true,
    "metadata": {
      "fqname": "definitions.skill_defs.SKILL_DB",
      "module": "definitions.skill_defs",
      "name": "SKILL_DB",
      "type": "variable",
      "lineno": 5,
      "source_file": "definitions\\skill_defs.py",
      "description": "",
      "docstring_full": "",
      "tags": [],
      "linked_journal_entry": "",
      "deprecated": false,
      "status": "",
      "visibility": "",
      "docstring_present": false,
      "metadata": {}
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "definitions.tag_defs": {
    "fqname": "definitions.tag_defs",
    "type": "module",
    "description": "",
    "tags": [],
    "source_file": "definitions\\tag_defs.py",
    "test_coverage": false,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "definitions.tag_defs",
      "module": "definitions.tag_defs",
      "name": "definitions.tag_defs",
      "type": "module",
      "lineno": 1,
      "source_file": "definitions\\tag_defs.py",
      "description": "",
      "docstring_full": "",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": false,
      "metadata": {}
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "definitions.tag_defs.TAG_DB": {
    "fqname": "definitions.tag_defs.TAG_DB",
    "type": "variable",
    "description": "",
    "tags": [],
    "source_file": "definitions\\tag_defs.py",
    "test_coverage": false,
    "docstring_present": false,
    "linked_journal_entry": "",
    "is_orphaned": true,
    "metadata": {
      "fqname": "definitions.tag_defs.TAG_DB",
      "module": "definitions.tag_defs",
      "name": "TAG_DB",
      "type": "variable",
      "lineno": 5,
      "source_file": "definitions\\tag_defs.py",
      "description": "",
      "docstring_full": "",
      "tags": [],
      "linked_journal_entry": "",
      "deprecated": false,
      "status": "",
      "visibility": "",
      "docstring_present": false,
      "metadata": {}
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "definitions.technique_defs": {
    "fqname": "definitions.technique_defs",
    "type": "module",
    "description": "",
    "tags": [],
    "source_file": "definitions\\technique_defs.py",
    "test_coverage": false,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "definitions.technique_defs",
      "module": "definitions.technique_defs",
      "name": "definitions.technique_defs",
      "type": "module",
      "lineno": 1,
      "source_file": "definitions\\technique_defs.py",
      "description": "",
      "docstring_full": "",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": false,
      "metadata": {}
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "definitions.technique_defs.TECHNIQUE_DB": {
    "fqname": "definitions.technique_defs.TECHNIQUE_DB",
    "type": "variable",
    "description": "",
    "tags": [],
    "source_file": "definitions\\technique_defs.py",
    "test_coverage": false,
    "docstring_present": false,
    "linked_journal_entry": "",
    "is_orphaned": true,
    "metadata": {
      "fqname": "definitions.technique_defs.TECHNIQUE_DB",
      "module": "definitions.technique_defs",
      "name": "TECHNIQUE_DB",
      "type": "variable",
      "lineno": 5,
      "source_file": "definitions\\technique_defs.py",
      "description": "",
      "docstring_full": "",
      "tags": [],
      "linked_journal_entry": "",
      "deprecated": false,
      "status": "",
      "visibility": "",
      "docstring_present": false,
      "metadata": {}
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "definitions.thing": {
    "fqname": "definitions.thing",
    "type": "module",
    "description": "THING_DB: Canonical definitions for all placeable or interactable tactical objects.",
    "tags": [],
    "source_file": "definitions\\thing.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "definitions.thing",
      "module": "definitions.thing",
      "name": "definitions.thing",
      "type": "module",
      "lineno": 1,
      "source_file": "definitions\\thing.py",
      "description": "THING_DB: Canonical definitions for all placeable or interactable tactical objects.",
      "docstring_full": "THING_DB: Canonical definitions for all placeable or interactable tactical objects.\nThese include physical obstacles, props, and devices — not environmental effects like fire or fog.\n\nDesign Philosophy:\n- Only includes tangible objects occupying tile space\n- Effects like fog, fire, smoke are stored separately in tile[\"env\"]\n- Avoids mixing environmental and interactable state in a single system\n\nConventions:\n- `cover_rating >= 99` is considered full visual block\n- `blocks_sight = True` short-circuits line-of-sight\n- `destructible = False` means invulnerable\n- `flammable = True` can be set on fire by external logic",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {}
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "definitions.thing.THING_DB": {
    "fqname": "definitions.thing.THING_DB",
    "type": "variable",
    "description": "",
    "tags": [],
    "source_file": "definitions\\thing.py",
    "test_coverage": false,
    "docstring_present": false,
    "linked_journal_entry": "",
    "is_orphaned": true,
    "metadata": {
      "fqname": "definitions.thing.THING_DB",
      "module": "definitions.thing",
      "name": "THING_DB",
      "type": "variable",
      "lineno": 19,
      "source_file": "definitions\\thing.py",
      "description": "",
      "docstring_full": "",
      "tags": [],
      "linked_journal_entry": "",
      "deprecated": false,
      "status": "",
      "visibility": "",
      "docstring_present": false,
      "metadata": {}
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "definitions._init_": {
    "fqname": "definitions._init_",
    "type": "module",
    "description": "",
    "tags": [],
    "source_file": "definitions\\_init_.py",
    "test_coverage": false,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "definitions._init_",
      "module": "definitions._init_",
      "name": "definitions._init_",
      "type": "module",
      "lineno": 1,
      "source_file": "definitions\\_init_.py",
      "description": "",
      "docstring_full": "",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": false,
      "metadata": {}
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "flow.action_flow": {
    "fqname": "flow.action_flow",
    "type": "module",
    "description": "",
    "tags": [],
    "source_file": "flow\\action_flow.py",
    "test_coverage": false,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "flow.action_flow",
      "module": "flow.action_flow",
      "name": "flow.action_flow",
      "type": "module",
      "lineno": 1,
      "source_file": "flow\\action_flow.py",
      "description": "",
      "docstring_full": "",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": false,
      "metadata": {}
    },
    "links": [
      {
        "target": "utils.skill_xp_utils.track_xp_gain",
        "type": "calls"
      },
      {
        "target": "utils.technique_unlock_utils.auto_unlock_techniques",
        "type": "calls"
      },
      {
        "target": "flow.actor_mutation_flow.handle_post_action_mutation",
        "type": "calls"
      }
    ],
    "called_by_fqns": [],
    "calls_fqns": [
      "flow.actor_mutation_flow.handle_post_action_mutation",
      "utils.skill_xp_utils.track_xp_gain",
      "utils.technique_unlock_utils.auto_unlock_techniques"
    ]
  },
  "flow.action_flow.run_action_phase": {
    "fqname": "flow.action_flow.run_action_phase",
    "type": "function",
    "description": "Executes the full action phase for an actor, including:",
    "tags": [],
    "source_file": "flow\\action_flow.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "flow.action_flow.run_action_phase",
      "module": "flow.action_flow",
      "name": "run_action_phase",
      "type": "function",
      "lineno": 9,
      "source_file": "flow\\action_flow.py",
      "description": "Executes the full action phase for an actor, including:",
      "docstring_full": "Executes the full action phase for an actor, including:\n1. Action resolution (stubbed)\n2. XP gain based on action tags\n3. Automatic technique unlocks\n4. Post-action mutation offers",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "actor",
          "context"
        ],
        "returns": null
      }
    },
    "links": [
      {
        "target": "utils.skill_xp_utils.track_xp_gain",
        "type": "calls"
      },
      {
        "target": "utils.technique_unlock_utils.auto_unlock_techniques",
        "type": "calls"
      },
      {
        "target": "flow.actor_mutation_flow.handle_post_action_mutation",
        "type": "calls"
      }
    ],
    "called_by_fqns": [],
    "calls_fqns": [
      "flow.actor_mutation_flow.handle_post_action_mutation",
      "utils.skill_xp_utils.track_xp_gain",
      "utils.technique_unlock_utils.auto_unlock_techniques"
    ]
  },
  "flow.actor_mutation_flow": {
    "fqname": "flow.actor_mutation_flow",
    "type": "module",
    "description": "",
    "tags": [],
    "source_file": "flow\\actor_mutation_flow.py",
    "test_coverage": false,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "flow.actor_mutation_flow",
      "module": "flow.actor_mutation_flow",
      "name": "flow.actor_mutation_flow",
      "type": "module",
      "lineno": 1,
      "source_file": "flow\\actor_mutation_flow.py",
      "description": "",
      "docstring_full": "",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": false,
      "metadata": {}
    },
    "links": [
      {
        "target": "flow.actor_mutation_flow._boost_level_to_rarity",
        "type": "calls"
      },
      {
        "target": "utils.actor_offer_utils._boost_level_to_rarity",
        "type": "calls"
      },
      {
        "target": "definitions.evolution_offer_generator.generate_evolution_offer",
        "type": "calls"
      },
      {
        "target": "utils.technique_mutation_utils.generate_evolution_offer",
        "type": "calls"
      },
      {
        "target": "flow.actor_mutation_flow.apply_mutation_choice",
        "type": "calls"
      },
      {
        "target": "flow.actor_mutation_flow.can_offer_boost",
        "type": "calls"
      },
      {
        "target": "utils.actor_offer_utils.generate_evolution_offer_for_actor",
        "type": "calls"
      },
      {
        "target": "utils.evolution_offer_utils.generate_evolution_offer_for_actor",
        "type": "calls"
      }
    ],
    "called_by_fqns": [],
    "calls_fqns": [
      "definitions.evolution_offer_generator.generate_evolution_offer",
      "flow.actor_mutation_flow._boost_level_to_rarity",
      "flow.actor_mutation_flow.apply_mutation_choice",
      "flow.actor_mutation_flow.can_offer_boost",
      "utils.actor_offer_utils._boost_level_to_rarity",
      "utils.actor_offer_utils.generate_evolution_offer_for_actor",
      "utils.evolution_offer_utils.generate_evolution_offer_for_actor",
      "utils.technique_mutation_utils.generate_evolution_offer"
    ]
  },
  "flow.actor_mutation_flow.get_mutation_offer": {
    "fqname": "flow.actor_mutation_flow.get_mutation_offer",
    "type": "function",
    "description": "Generates 4 evolution options for the given skill, factoring in active boost.",
    "tags": [],
    "source_file": "flow\\actor_mutation_flow.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "flow.actor_mutation_flow.get_mutation_offer",
      "module": "flow.actor_mutation_flow",
      "name": "get_mutation_offer",
      "type": "function",
      "lineno": 24,
      "source_file": "flow\\actor_mutation_flow.py",
      "description": "Generates 4 evolution options for the given skill, factoring in active boost.",
      "docstring_full": "Generates 4 evolution options for the given skill, factoring in active boost.\nIncrements history but does not apply anything.",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "actor",
          "skill"
        ],
        "returns": null
      }
    },
    "links": [
      {
        "target": "flow.actor_mutation_flow._boost_level_to_rarity",
        "type": "calls"
      },
      {
        "target": "utils.actor_offer_utils._boost_level_to_rarity",
        "type": "calls"
      },
      {
        "target": "definitions.evolution_offer_generator.generate_evolution_offer",
        "type": "calls"
      },
      {
        "target": "utils.technique_mutation_utils.generate_evolution_offer",
        "type": "calls"
      },
      {
        "target": "flow.actor_mutation_flow.apply_mutation_choice",
        "type": "calls"
      },
      {
        "target": "flow.actor_mutation_flow.can_offer_boost",
        "type": "calls"
      },
      {
        "target": "utils.actor_offer_utils.generate_evolution_offer_for_actor",
        "type": "calls"
      },
      {
        "target": "utils.evolution_offer_utils.generate_evolution_offer_for_actor",
        "type": "calls"
      }
    ],
    "called_by_fqns": [],
    "calls_fqns": [
      "definitions.evolution_offer_generator.generate_evolution_offer",
      "flow.actor_mutation_flow._boost_level_to_rarity",
      "flow.actor_mutation_flow.apply_mutation_choice",
      "flow.actor_mutation_flow.can_offer_boost",
      "utils.actor_offer_utils._boost_level_to_rarity",
      "utils.actor_offer_utils.generate_evolution_offer_for_actor",
      "utils.evolution_offer_utils.generate_evolution_offer_for_actor",
      "utils.technique_mutation_utils.generate_evolution_offer"
    ]
  },
  "flow.actor_mutation_flow.can_offer_boost": {
    "fqname": "flow.actor_mutation_flow.can_offer_boost",
    "type": "function",
    "description": "Returns True if actor has 3+ banked mutations and no current offer boost on skill.",
    "tags": [],
    "source_file": "flow\\actor_mutation_flow.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "flow.actor_mutation_flow.can_offer_boost",
      "module": "flow.actor_mutation_flow",
      "name": "can_offer_boost",
      "type": "function",
      "lineno": 46,
      "source_file": "flow\\actor_mutation_flow.py",
      "description": "Returns True if actor has 3+ banked mutations and no current offer boost on skill.",
      "docstring_full": "Returns True if actor has 3+ banked mutations and no current offer boost on skill.",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "actor",
          "skill"
        ],
        "returns": null
      }
    },
    "links": [
      {
        "target": "flow.actor_mutation_flow._boost_level_to_rarity",
        "type": "calls"
      },
      {
        "target": "utils.actor_offer_utils._boost_level_to_rarity",
        "type": "calls"
      },
      {
        "target": "definitions.evolution_offer_generator.generate_evolution_offer",
        "type": "calls"
      },
      {
        "target": "utils.technique_mutation_utils.generate_evolution_offer",
        "type": "calls"
      },
      {
        "target": "flow.actor_mutation_flow.apply_mutation_choice",
        "type": "calls"
      },
      {
        "target": "flow.actor_mutation_flow.can_offer_boost",
        "type": "calls"
      },
      {
        "target": "utils.actor_offer_utils.generate_evolution_offer_for_actor",
        "type": "calls"
      },
      {
        "target": "utils.evolution_offer_utils.generate_evolution_offer_for_actor",
        "type": "calls"
      }
    ],
    "called_by_fqns": [
      "flow.actor_mutation_flow",
      "flow.actor_mutation_flow.get_mutation_offer",
      "flow.actor_mutation_flow.can_offer_boost",
      "flow.actor_mutation_flow.apply_boost",
      "flow.actor_mutation_flow.apply_mutation_choice",
      "flow.actor_mutation_flow.handle_pending_mutation_offer",
      "flow.actor_mutation_flow.handle_post_action_mutation",
      "flow.actor_mutation_flow._boost_level_to_rarity"
    ],
    "calls_fqns": [
      "definitions.evolution_offer_generator.generate_evolution_offer",
      "flow.actor_mutation_flow._boost_level_to_rarity",
      "flow.actor_mutation_flow.apply_mutation_choice",
      "flow.actor_mutation_flow.can_offer_boost",
      "utils.actor_offer_utils._boost_level_to_rarity",
      "utils.actor_offer_utils.generate_evolution_offer_for_actor",
      "utils.evolution_offer_utils.generate_evolution_offer_for_actor",
      "utils.technique_mutation_utils.generate_evolution_offer"
    ]
  },
  "flow.actor_mutation_flow.apply_boost": {
    "fqname": "flow.actor_mutation_flow.apply_boost",
    "type": "function",
    "description": "Consumes 3 banked mutations to boost rarity of next offer for a given skill.",
    "tags": [],
    "source_file": "flow\\actor_mutation_flow.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "flow.actor_mutation_flow.apply_boost",
      "module": "flow.actor_mutation_flow",
      "name": "apply_boost",
      "type": "function",
      "lineno": 52,
      "source_file": "flow\\actor_mutation_flow.py",
      "description": "Consumes 3 banked mutations to boost rarity of next offer for a given skill.",
      "docstring_full": "Consumes 3 banked mutations to boost rarity of next offer for a given skill.",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "actor",
          "skill"
        ],
        "returns": null
      }
    },
    "links": [
      {
        "target": "flow.actor_mutation_flow._boost_level_to_rarity",
        "type": "calls"
      },
      {
        "target": "utils.actor_offer_utils._boost_level_to_rarity",
        "type": "calls"
      },
      {
        "target": "definitions.evolution_offer_generator.generate_evolution_offer",
        "type": "calls"
      },
      {
        "target": "utils.technique_mutation_utils.generate_evolution_offer",
        "type": "calls"
      },
      {
        "target": "flow.actor_mutation_flow.apply_mutation_choice",
        "type": "calls"
      },
      {
        "target": "flow.actor_mutation_flow.can_offer_boost",
        "type": "calls"
      },
      {
        "target": "utils.actor_offer_utils.generate_evolution_offer_for_actor",
        "type": "calls"
      },
      {
        "target": "utils.evolution_offer_utils.generate_evolution_offer_for_actor",
        "type": "calls"
      }
    ],
    "called_by_fqns": [],
    "calls_fqns": [
      "definitions.evolution_offer_generator.generate_evolution_offer",
      "flow.actor_mutation_flow._boost_level_to_rarity",
      "flow.actor_mutation_flow.apply_mutation_choice",
      "flow.actor_mutation_flow.can_offer_boost",
      "utils.actor_offer_utils._boost_level_to_rarity",
      "utils.actor_offer_utils.generate_evolution_offer_for_actor",
      "utils.evolution_offer_utils.generate_evolution_offer_for_actor",
      "utils.technique_mutation_utils.generate_evolution_offer"
    ]
  },
  "flow.actor_mutation_flow.apply_mutation_choice": {
    "fqname": "flow.actor_mutation_flow.apply_mutation_choice",
    "type": "function",
    "description": "Applies a chosen mutation result to the actor.",
    "tags": [],
    "source_file": "flow\\actor_mutation_flow.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "flow.actor_mutation_flow.apply_mutation_choice",
      "module": "flow.actor_mutation_flow",
      "name": "apply_mutation_choice",
      "type": "function",
      "lineno": 65,
      "source_file": "flow\\actor_mutation_flow.py",
      "description": "Applies a chosen mutation result to the actor.",
      "docstring_full": "Applies a chosen mutation result to the actor.\n- If type is 'bank', increments bank.\n- Otherwise, applies mutation and resets any skill boost.\n- Appends to mutation history.",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "actor",
          "skill",
          "choice"
        ],
        "returns": null
      }
    },
    "links": [
      {
        "target": "flow.actor_mutation_flow._boost_level_to_rarity",
        "type": "calls"
      },
      {
        "target": "utils.actor_offer_utils._boost_level_to_rarity",
        "type": "calls"
      },
      {
        "target": "definitions.evolution_offer_generator.generate_evolution_offer",
        "type": "calls"
      },
      {
        "target": "utils.technique_mutation_utils.generate_evolution_offer",
        "type": "calls"
      },
      {
        "target": "flow.actor_mutation_flow.apply_mutation_choice",
        "type": "calls"
      },
      {
        "target": "flow.actor_mutation_flow.can_offer_boost",
        "type": "calls"
      },
      {
        "target": "utils.actor_offer_utils.generate_evolution_offer_for_actor",
        "type": "calls"
      },
      {
        "target": "utils.evolution_offer_utils.generate_evolution_offer_for_actor",
        "type": "calls"
      }
    ],
    "called_by_fqns": [
      "flow.actor_mutation_flow",
      "flow.actor_mutation_flow.get_mutation_offer",
      "flow.actor_mutation_flow.can_offer_boost",
      "flow.actor_mutation_flow.apply_boost",
      "flow.actor_mutation_flow.apply_mutation_choice",
      "flow.actor_mutation_flow.handle_pending_mutation_offer",
      "flow.actor_mutation_flow.handle_post_action_mutation",
      "flow.actor_mutation_flow._boost_level_to_rarity"
    ],
    "calls_fqns": [
      "definitions.evolution_offer_generator.generate_evolution_offer",
      "flow.actor_mutation_flow._boost_level_to_rarity",
      "flow.actor_mutation_flow.apply_mutation_choice",
      "flow.actor_mutation_flow.can_offer_boost",
      "utils.actor_offer_utils._boost_level_to_rarity",
      "utils.actor_offer_utils.generate_evolution_offer_for_actor",
      "utils.evolution_offer_utils.generate_evolution_offer_for_actor",
      "utils.technique_mutation_utils.generate_evolution_offer"
    ]
  },
  "flow.actor_mutation_flow.handle_pending_mutation_offer": {
    "fqname": "flow.actor_mutation_flow.handle_pending_mutation_offer",
    "type": "function",
    "description": "Wrapper invoked during the action phase if the actor has a pending offer.",
    "tags": [],
    "source_file": "flow\\actor_mutation_flow.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "flow.actor_mutation_flow.handle_pending_mutation_offer",
      "module": "flow.actor_mutation_flow",
      "name": "handle_pending_mutation_offer",
      "type": "function",
      "lineno": 88,
      "source_file": "flow\\actor_mutation_flow.py",
      "description": "Wrapper invoked during the action phase if the actor has a pending offer.",
      "docstring_full": "Wrapper invoked during the action phase if the actor has a pending offer.\nDelegates to the actor's mutation selection logic and applies the result.",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "actor",
          "context"
        ],
        "returns": null
      }
    },
    "links": [
      {
        "target": "flow.actor_mutation_flow._boost_level_to_rarity",
        "type": "calls"
      },
      {
        "target": "utils.actor_offer_utils._boost_level_to_rarity",
        "type": "calls"
      },
      {
        "target": "definitions.evolution_offer_generator.generate_evolution_offer",
        "type": "calls"
      },
      {
        "target": "utils.technique_mutation_utils.generate_evolution_offer",
        "type": "calls"
      },
      {
        "target": "flow.actor_mutation_flow.apply_mutation_choice",
        "type": "calls"
      },
      {
        "target": "flow.actor_mutation_flow.can_offer_boost",
        "type": "calls"
      },
      {
        "target": "utils.actor_offer_utils.generate_evolution_offer_for_actor",
        "type": "calls"
      },
      {
        "target": "utils.evolution_offer_utils.generate_evolution_offer_for_actor",
        "type": "calls"
      }
    ],
    "called_by_fqns": [],
    "calls_fqns": [
      "definitions.evolution_offer_generator.generate_evolution_offer",
      "flow.actor_mutation_flow._boost_level_to_rarity",
      "flow.actor_mutation_flow.apply_mutation_choice",
      "flow.actor_mutation_flow.can_offer_boost",
      "utils.actor_offer_utils._boost_level_to_rarity",
      "utils.actor_offer_utils.generate_evolution_offer_for_actor",
      "utils.evolution_offer_utils.generate_evolution_offer_for_actor",
      "utils.technique_mutation_utils.generate_evolution_offer"
    ]
  },
  "flow.actor_mutation_flow.handle_post_action_mutation": {
    "fqname": "flow.actor_mutation_flow.handle_post_action_mutation",
    "type": "function",
    "description": "Checks if any visible technique is eligible for a mutation offer.",
    "tags": [],
    "source_file": "flow\\actor_mutation_flow.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "flow.actor_mutation_flow.handle_post_action_mutation",
      "module": "flow.actor_mutation_flow",
      "name": "handle_post_action_mutation",
      "type": "function",
      "lineno": 100,
      "source_file": "flow\\actor_mutation_flow.py",
      "description": "Checks if any visible technique is eligible for a mutation offer.",
      "docstring_full": "Checks if any visible technique is eligible for a mutation offer.\n\n- Trigger threshold is probabilistic.\n- Stores pending_offer on the actor if triggered.",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "actor"
        ],
        "returns": null
      }
    },
    "links": [
      {
        "target": "flow.actor_mutation_flow._boost_level_to_rarity",
        "type": "calls"
      },
      {
        "target": "utils.actor_offer_utils._boost_level_to_rarity",
        "type": "calls"
      },
      {
        "target": "definitions.evolution_offer_generator.generate_evolution_offer",
        "type": "calls"
      },
      {
        "target": "utils.technique_mutation_utils.generate_evolution_offer",
        "type": "calls"
      },
      {
        "target": "flow.actor_mutation_flow.apply_mutation_choice",
        "type": "calls"
      },
      {
        "target": "flow.actor_mutation_flow.can_offer_boost",
        "type": "calls"
      },
      {
        "target": "utils.actor_offer_utils.generate_evolution_offer_for_actor",
        "type": "calls"
      },
      {
        "target": "utils.evolution_offer_utils.generate_evolution_offer_for_actor",
        "type": "calls"
      }
    ],
    "called_by_fqns": [
      "flow.action_flow",
      "flow.action_flow.run_action_phase"
    ],
    "calls_fqns": [
      "definitions.evolution_offer_generator.generate_evolution_offer",
      "flow.actor_mutation_flow._boost_level_to_rarity",
      "flow.actor_mutation_flow.apply_mutation_choice",
      "flow.actor_mutation_flow.can_offer_boost",
      "utils.actor_offer_utils._boost_level_to_rarity",
      "utils.actor_offer_utils.generate_evolution_offer_for_actor",
      "utils.evolution_offer_utils.generate_evolution_offer_for_actor",
      "utils.technique_mutation_utils.generate_evolution_offer"
    ]
  },
  "flow.actor_mutation_flow._boost_level_to_rarity": {
    "fqname": "flow.actor_mutation_flow._boost_level_to_rarity",
    "type": "function",
    "description": "Translates boost level to rarity tier.",
    "tags": [],
    "source_file": "flow\\actor_mutation_flow.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "flow.actor_mutation_flow._boost_level_to_rarity",
      "module": "flow.actor_mutation_flow",
      "name": "_boost_level_to_rarity",
      "type": "function",
      "lineno": 132,
      "source_file": "flow\\actor_mutation_flow.py",
      "description": "Translates boost level to rarity tier.",
      "docstring_full": "Translates boost level to rarity tier.",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "boost_level"
        ],
        "returns": null
      }
    },
    "links": [
      {
        "target": "flow.actor_mutation_flow._boost_level_to_rarity",
        "type": "calls"
      },
      {
        "target": "utils.actor_offer_utils._boost_level_to_rarity",
        "type": "calls"
      },
      {
        "target": "definitions.evolution_offer_generator.generate_evolution_offer",
        "type": "calls"
      },
      {
        "target": "utils.technique_mutation_utils.generate_evolution_offer",
        "type": "calls"
      },
      {
        "target": "flow.actor_mutation_flow.apply_mutation_choice",
        "type": "calls"
      },
      {
        "target": "flow.actor_mutation_flow.can_offer_boost",
        "type": "calls"
      },
      {
        "target": "utils.actor_offer_utils.generate_evolution_offer_for_actor",
        "type": "calls"
      },
      {
        "target": "utils.evolution_offer_utils.generate_evolution_offer_for_actor",
        "type": "calls"
      }
    ],
    "called_by_fqns": [
      "flow.actor_mutation_flow",
      "flow.actor_mutation_flow.get_mutation_offer",
      "flow.actor_mutation_flow.can_offer_boost",
      "flow.actor_mutation_flow.apply_boost",
      "flow.actor_mutation_flow.apply_mutation_choice",
      "flow.actor_mutation_flow.handle_pending_mutation_offer",
      "flow.actor_mutation_flow.handle_post_action_mutation",
      "flow.actor_mutation_flow._boost_level_to_rarity",
      "utils.actor_offer_utils",
      "utils.actor_offer_utils.generate_evolution_offer_for_actor",
      "utils.actor_offer_utils._boost_level_to_rarity"
    ],
    "calls_fqns": [
      "definitions.evolution_offer_generator.generate_evolution_offer",
      "flow.actor_mutation_flow._boost_level_to_rarity",
      "flow.actor_mutation_flow.apply_mutation_choice",
      "flow.actor_mutation_flow.can_offer_boost",
      "utils.actor_offer_utils._boost_level_to_rarity",
      "utils.actor_offer_utils.generate_evolution_offer_for_actor",
      "utils.evolution_offer_utils.generate_evolution_offer_for_actor",
      "utils.technique_mutation_utils.generate_evolution_offer"
    ]
  },
  "flow.dialogue_flow": {
    "fqname": "flow.dialogue_flow",
    "type": "module",
    "description": "",
    "tags": [],
    "source_file": "flow\\dialogue_flow.py",
    "test_coverage": false,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "flow.dialogue_flow",
      "module": "flow.dialogue_flow",
      "name": "flow.dialogue_flow",
      "type": "module",
      "lineno": 1,
      "source_file": "flow\\dialogue_flow.py",
      "description": "",
      "docstring_full": "",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": false,
      "metadata": {}
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "flow.dialogue_flow.start_dialogue": {
    "fqname": "flow.dialogue_flow.start_dialogue",
    "type": "function",
    "description": "Placeholder for initiating a dialogue sequence with an NPC.",
    "tags": [],
    "source_file": "flow\\dialogue_flow.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "flow.dialogue_flow.start_dialogue",
      "module": "flow.dialogue_flow",
      "name": "start_dialogue",
      "type": "function",
      "lineno": 4,
      "source_file": "flow\\dialogue_flow.py",
      "description": "Placeholder for initiating a dialogue sequence with an NPC.",
      "docstring_full": "Placeholder for initiating a dialogue sequence with an NPC.\n\n@ignore: stub — dialogue system not yet implemented",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "npc",
          "player"
        ],
        "returns": null
      }
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "flow.dialogue_flow.advance_dialogue_state": {
    "fqname": "flow.dialogue_flow.advance_dialogue_state",
    "type": "function",
    "description": "Placeholder for updating dialogue state based on player choice.",
    "tags": [],
    "source_file": "flow\\dialogue_flow.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "flow.dialogue_flow.advance_dialogue_state",
      "module": "flow.dialogue_flow",
      "name": "advance_dialogue_state",
      "type": "function",
      "lineno": 12,
      "source_file": "flow\\dialogue_flow.py",
      "description": "Placeholder for updating dialogue state based on player choice.",
      "docstring_full": "Placeholder for updating dialogue state based on player choice.\n\n@ignore: stub — dialogue branching not implemented",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "npc",
          "choice"
        ],
        "returns": null
      }
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "flow.dialogue_flow.resolve_dialogue_outcome": {
    "fqname": "flow.dialogue_flow.resolve_dialogue_outcome",
    "type": "function",
    "description": "Placeholder for applying consequences of a dialogue branch.",
    "tags": [],
    "source_file": "flow\\dialogue_flow.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "flow.dialogue_flow.resolve_dialogue_outcome",
      "module": "flow.dialogue_flow",
      "name": "resolve_dialogue_outcome",
      "type": "function",
      "lineno": 20,
      "source_file": "flow\\dialogue_flow.py",
      "description": "Placeholder for applying consequences of a dialogue branch.",
      "docstring_full": "Placeholder for applying consequences of a dialogue branch.\n\n@ignore: stub — no event triggers wired",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "npc",
          "player"
        ],
        "returns": null
      }
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "flow.encounter_flow": {
    "fqname": "flow.encounter_flow",
    "type": "module",
    "description": "",
    "tags": [],
    "source_file": "flow\\encounter_flow.py",
    "test_coverage": false,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "flow.encounter_flow",
      "module": "flow.encounter_flow",
      "name": "flow.encounter_flow",
      "type": "module",
      "lineno": 1,
      "source_file": "flow\\encounter_flow.py",
      "description": "",
      "docstring_full": "",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": false,
      "metadata": {}
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "flow.encounter_flow.detect_encounter": {
    "fqname": "flow.encounter_flow.detect_encounter",
    "type": "function",
    "description": "Placeholder for checking if an encounter should be triggered.",
    "tags": [],
    "source_file": "flow\\encounter_flow.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "flow.encounter_flow.detect_encounter",
      "module": "flow.encounter_flow",
      "name": "detect_encounter",
      "type": "function",
      "lineno": 4,
      "source_file": "flow\\encounter_flow.py",
      "description": "Placeholder for checking if an encounter should be triggered.",
      "docstring_full": "Placeholder for checking if an encounter should be triggered.\n\n@ignore: stub — detection logic not yet integrated",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "actor",
          "visible_entities"
        ],
        "returns": null
      }
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "flow.encounter_flow.trigger_ambush": {
    "fqname": "flow.encounter_flow.trigger_ambush",
    "type": "function",
    "description": "Placeholder for initiating an ambush encounter sequence.",
    "tags": [],
    "source_file": "flow\\encounter_flow.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "flow.encounter_flow.trigger_ambush",
      "module": "flow.encounter_flow",
      "name": "trigger_ambush",
      "type": "function",
      "lineno": 12,
      "source_file": "flow\\encounter_flow.py",
      "description": "Placeholder for initiating an ambush encounter sequence.",
      "docstring_full": "Placeholder for initiating an ambush encounter sequence.\n\n@ignore: stub — ambush flow not implemented",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "enemy",
          "player"
        ],
        "returns": null
      }
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "flow.engine": {
    "fqname": "flow.engine",
    "type": "module",
    "description": "Main game loop and core flow controller.",
    "tags": [],
    "source_file": "flow\\engine.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "flow.engine",
      "module": "flow.engine",
      "name": "flow.engine",
      "type": "module",
      "lineno": 1,
      "source_file": "flow\\engine.py",
      "description": "Main game loop and core flow controller.",
      "docstring_full": "Main game loop and core flow controller.\nThis file orchestrates the high-level progression of gameplay phases:\n- World entry\n- Tactical exploration\n- Combat resolution\n\n⚙️ Architectural Philosophy:\n- `engine.py` defines flow, not logic.\n- All calculations, rules, and simulation updates are offloaded to utils (e.g. combat_utils.py, player_utils.py).\n- No embedded string output. All messaging routed through messaging.py or debug_utils.py.\n- Tactical and world maps operate as separate layers: engine manages transitions.\n- Designed to be modular, testable, and cleanly extensible.\n\n📦 Current Flow Phases (subject to extension):\n1. World Entry\n2. Tactical Floorplan Load\n3. Perception Pass\n4. Initiative Queue\n5. Actor Turns (player and AI)\n6. Cleanup & Effects\n\nThis scaffolding will evolve with additional modules and rendering layers, but core responsibility remains orchestration only.",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {}
    },
    "links": [
      {
        "target": "definitions.floorplan.create_floorplan",
        "type": "calls"
      },
      {
        "target": "definitions.floorplan.get_tile",
        "type": "calls"
      },
      {
        "target": "flow.engine.enter_test_map",
        "type": "calls"
      },
      {
        "target": "definitions.floorplan.set_tile",
        "type": "calls"
      }
    ],
    "called_by_fqns": [],
    "calls_fqns": [
      "definitions.floorplan.create_floorplan",
      "definitions.floorplan.get_tile",
      "definitions.floorplan.set_tile",
      "flow.engine.enter_test_map"
    ]
  },
  "flow.engine.enter_test_map": {
    "fqname": "flow.engine.enter_test_map",
    "type": "function",
    "description": "Stub function to simulate entering a test tactical map.",
    "tags": [],
    "source_file": "flow\\engine.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "flow.engine.enter_test_map",
      "module": "flow.engine",
      "name": "enter_test_map",
      "type": "function",
      "lineno": 31,
      "source_file": "flow\\engine.py",
      "description": "Stub function to simulate entering a test tactical map.",
      "docstring_full": "Stub function to simulate entering a test tactical map.\nConstructs a minimal map instance using dict-based tiles.",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [],
        "returns": null
      }
    },
    "links": [
      {
        "target": "definitions.floorplan.create_floorplan",
        "type": "calls"
      },
      {
        "target": "definitions.floorplan.get_tile",
        "type": "calls"
      },
      {
        "target": "flow.engine.enter_test_map",
        "type": "calls"
      },
      {
        "target": "definitions.floorplan.set_tile",
        "type": "calls"
      }
    ],
    "called_by_fqns": [
      "flow.engine",
      "flow.engine.enter_test_map"
    ],
    "calls_fqns": [
      "definitions.floorplan.create_floorplan",
      "definitions.floorplan.get_tile",
      "definitions.floorplan.set_tile",
      "flow.engine.enter_test_map"
    ]
  },
  "flow.exploration_flow": {
    "fqname": "flow.exploration_flow",
    "type": "module",
    "description": "",
    "tags": [],
    "source_file": "flow\\exploration_flow.py",
    "test_coverage": false,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "flow.exploration_flow",
      "module": "flow.exploration_flow",
      "name": "flow.exploration_flow",
      "type": "module",
      "lineno": 1,
      "source_file": "flow\\exploration_flow.py",
      "description": "",
      "docstring_full": "",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": false,
      "metadata": {}
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "flow.exploration_flow.resolve_room_entry": {
    "fqname": "flow.exploration_flow.resolve_room_entry",
    "type": "function",
    "description": "Placeholder for resolving the effects of entering a new room.",
    "tags": [],
    "source_file": "flow\\exploration_flow.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "flow.exploration_flow.resolve_room_entry",
      "module": "flow.exploration_flow",
      "name": "resolve_room_entry",
      "type": "function",
      "lineno": 4,
      "source_file": "flow\\exploration_flow.py",
      "description": "Placeholder for resolving the effects of entering a new room.",
      "docstring_full": "Placeholder for resolving the effects of entering a new room.\n\n@ignore: stub — travel entry logic not yet implemented",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "player",
          "room"
        ],
        "returns": null
      }
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "flow.exploration_flow.handle_travel_command": {
    "fqname": "flow.exploration_flow.handle_travel_command",
    "type": "function",
    "description": "Placeholder for processing a travel command.",
    "tags": [],
    "source_file": "flow\\exploration_flow.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "flow.exploration_flow.handle_travel_command",
      "module": "flow.exploration_flow",
      "name": "handle_travel_command",
      "type": "function",
      "lineno": 12,
      "source_file": "flow\\exploration_flow.py",
      "description": "Placeholder for processing a travel command.",
      "docstring_full": "Placeholder for processing a travel command.\n\n@ignore: stub — movement input handling deferred",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "command"
        ],
        "returns": null
      }
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "flow.story_flow": {
    "fqname": "flow.story_flow",
    "type": "module",
    "description": "",
    "tags": [],
    "source_file": "flow\\story_flow.py",
    "test_coverage": false,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "flow.story_flow",
      "module": "flow.story_flow",
      "name": "flow.story_flow",
      "type": "module",
      "lineno": 1,
      "source_file": "flow\\story_flow.py",
      "description": "",
      "docstring_full": "",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": false,
      "metadata": {}
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "flow.story_flow.check_story_triggers": {
    "fqname": "flow.story_flow.check_story_triggers",
    "type": "function",
    "description": "Placeholder for scanning and resolving story triggers based on state.",
    "tags": [],
    "source_file": "flow\\story_flow.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "flow.story_flow.check_story_triggers",
      "module": "flow.story_flow",
      "name": "check_story_triggers",
      "type": "function",
      "lineno": 4,
      "source_file": "flow\\story_flow.py",
      "description": "Placeholder for scanning and resolving story triggers based on state.",
      "docstring_full": "Placeholder for scanning and resolving story triggers based on state.\n\n@ignore: stub — narrative event checks not yet implemented",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "state"
        ],
        "returns": null
      }
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "flow.story_flow.fire_story_event": {
    "fqname": "flow.story_flow.fire_story_event",
    "type": "function",
    "description": "Placeholder for executing a narrative event based on ID.",
    "tags": [],
    "source_file": "flow\\story_flow.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "flow.story_flow.fire_story_event",
      "module": "flow.story_flow",
      "name": "fire_story_event",
      "type": "function",
      "lineno": 12,
      "source_file": "flow\\story_flow.py",
      "description": "Placeholder for executing a narrative event based on ID.",
      "docstring_full": "Placeholder for executing a narrative event based on ID.\n\n@ignore: stub — narrative execution not implemented",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "event_id"
        ],
        "returns": null
      }
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "flow._init_": {
    "fqname": "flow._init_",
    "type": "module",
    "description": "",
    "tags": [],
    "source_file": "flow\\_init_.py",
    "test_coverage": false,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "flow._init_",
      "module": "flow._init_",
      "name": "flow._init_",
      "type": "module",
      "lineno": 1,
      "source_file": "flow\\_init_.py",
      "description": "",
      "docstring_full": "",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": false,
      "metadata": {}
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "helpers.actor_helpers": {
    "fqname": "helpers.actor_helpers",
    "type": "module",
    "description": "",
    "tags": [],
    "source_file": "helpers\\actor_helpers.py",
    "test_coverage": false,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "helpers.actor_helpers",
      "module": "helpers.actor_helpers",
      "name": "helpers.actor_helpers",
      "type": "module",
      "lineno": 1,
      "source_file": "helpers\\actor_helpers.py",
      "description": "",
      "docstring_full": "",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": false,
      "metadata": {}
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "helpers.actor_helpers.initialize_skill_if_missing": {
    "fqname": "helpers.actor_helpers.initialize_skill_if_missing",
    "type": "function",
    "description": "Adds a new skill block to the actor if it doesn't exist.",
    "tags": [],
    "source_file": "helpers\\actor_helpers.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "helpers.actor_helpers.initialize_skill_if_missing",
      "module": "helpers.actor_helpers",
      "name": "initialize_skill_if_missing",
      "type": "function",
      "lineno": 7,
      "source_file": "helpers\\actor_helpers.py",
      "description": "Adds a new skill block to the actor if it doesn't exist.",
      "docstring_full": "Adds a new skill block to the actor if it doesn't exist.\n\nIncludes all required fields to prevent downstream KeyErrors.",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "actor",
          "skill_id"
        ],
        "returns": null
      }
    },
    "links": [],
    "called_by_fqns": [
      "definitions.actor",
      "definitions.actor.Actor",
      "definitions.actor.add_skill",
      "definitions.actor.add_technique",
      "definitions.actor.initialize_skill_if_missing",
      "definitions.actor.initialize_technique_if_missing",
      "definitions.actor.__init__",
      "definitions.actor.has_skill",
      "definitions.actor.has_technique",
      "definitions.actor.get_technique",
      "utils.skill_xp_utils",
      "utils.skill_xp_utils.track_xp_gain",
      "utils.skill_xp_utils._tags_match",
      "utils.skill_xp_utils._check_level_up"
    ],
    "calls_fqns": []
  },
  "helpers.actor_helpers.initialize_technique_if_missing": {
    "fqname": "helpers.actor_helpers.initialize_technique_if_missing",
    "type": "function",
    "description": "Adds a technique to the actor's skill block if missing.",
    "tags": [],
    "source_file": "helpers\\actor_helpers.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "helpers.actor_helpers.initialize_technique_if_missing",
      "module": "helpers.actor_helpers",
      "name": "initialize_technique_if_missing",
      "type": "function",
      "lineno": 22,
      "source_file": "helpers\\actor_helpers.py",
      "description": "Adds a technique to the actor's skill block if missing.",
      "docstring_full": "Adds a technique to the actor's skill block if missing.\n\nRequires that the skill already exist. Initializes all required fields.",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "actor",
          "skill_id",
          "tech_id"
        ],
        "returns": null
      }
    },
    "links": [],
    "called_by_fqns": [
      "definitions.actor",
      "definitions.actor.Actor",
      "definitions.actor.add_skill",
      "definitions.actor.add_technique",
      "definitions.actor.initialize_skill_if_missing",
      "definitions.actor.initialize_technique_if_missing",
      "definitions.actor.__init__",
      "definitions.actor.has_skill",
      "definitions.actor.has_technique",
      "definitions.actor.get_technique",
      "utils.skill_xp_utils",
      "utils.skill_xp_utils.track_xp_gain",
      "utils.skill_xp_utils._tags_match",
      "utils.skill_xp_utils._check_level_up"
    ],
    "calls_fqns": []
  },
  "helpers.actor_helpers.validate_skill_structure": {
    "fqname": "helpers.actor_helpers.validate_skill_structure",
    "type": "function",
    "description": "",
    "tags": [],
    "source_file": "helpers\\actor_helpers.py",
    "test_coverage": false,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "helpers.actor_helpers.validate_skill_structure",
      "module": "helpers.actor_helpers",
      "name": "validate_skill_structure",
      "type": "function",
      "lineno": 55,
      "source_file": "helpers\\actor_helpers.py",
      "description": "",
      "docstring_full": "",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": false,
      "metadata": {
        "args": [
          "skill_block"
        ],
        "returns": null
      }
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "helpers.actor_helpers.validate_technique_structure": {
    "fqname": "helpers.actor_helpers.validate_technique_structure",
    "type": "function",
    "description": "",
    "tags": [],
    "source_file": "helpers\\actor_helpers.py",
    "test_coverage": false,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "helpers.actor_helpers.validate_technique_structure",
      "module": "helpers.actor_helpers",
      "name": "validate_technique_structure",
      "type": "function",
      "lineno": 60,
      "source_file": "helpers\\actor_helpers.py",
      "description": "",
      "docstring_full": "",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": false,
      "metadata": {
        "args": [
          "tech_block"
        ],
        "returns": null
      }
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "io.input_handler": {
    "fqname": "io.input_handler",
    "type": "module",
    "description": "",
    "tags": [],
    "source_file": "io\\input_handler.py",
    "test_coverage": false,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "io.input_handler",
      "module": "io.input_handler",
      "name": "io.input_handler",
      "type": "module",
      "lineno": 1,
      "source_file": "io\\input_handler.py",
      "description": "",
      "docstring_full": "",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": false,
      "metadata": {}
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "io.input_handler.get_player_input": {
    "fqname": "io.input_handler.get_player_input",
    "type": "function",
    "description": "Placeholder for reading player input.",
    "tags": [],
    "source_file": "io\\input_handler.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "io.input_handler.get_player_input",
      "module": "io.input_handler",
      "name": "get_player_input",
      "type": "function",
      "lineno": 4,
      "source_file": "io\\input_handler.py",
      "description": "Placeholder for reading player input.",
      "docstring_full": "Placeholder for reading player input.\n\n@ignore: stub — no player input system yet",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [],
        "returns": null
      }
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "io.input_handler.parse_command": {
    "fqname": "io.input_handler.parse_command",
    "type": "function",
    "description": "Placeholder for converting raw input into structured command dict.",
    "tags": [],
    "source_file": "io\\input_handler.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "io.input_handler.parse_command",
      "module": "io.input_handler",
      "name": "parse_command",
      "type": "function",
      "lineno": 12,
      "source_file": "io\\input_handler.py",
      "description": "Placeholder for converting raw input into structured command dict.",
      "docstring_full": "Placeholder for converting raw input into structured command dict.\n\n@ignore: stub — parser not implemented",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "raw_input"
        ],
        "returns": null
      }
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "io.messaging": {
    "fqname": "io.messaging",
    "type": "module",
    "description": "",
    "tags": [],
    "source_file": "io\\messaging.py",
    "test_coverage": false,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "io.messaging",
      "module": "io.messaging",
      "name": "io.messaging",
      "type": "module",
      "lineno": 1,
      "source_file": "io\\messaging.py",
      "description": "",
      "docstring_full": "",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": false,
      "metadata": {}
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "io.messaging.queue_room_description": {
    "fqname": "io.messaging.queue_room_description",
    "type": "function",
    "description": "Placeholder for describing the player's current room.",
    "tags": [],
    "source_file": "io\\messaging.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "io.messaging.queue_room_description",
      "module": "io.messaging",
      "name": "queue_room_description",
      "type": "function",
      "lineno": 4,
      "source_file": "io\\messaging.py",
      "description": "Placeholder for describing the player's current room.",
      "docstring_full": "Placeholder for describing the player's current room.\n\n@ignore: stub — no message rendering logic",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "room"
        ],
        "returns": null
      }
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "io.messaging.queue_sighting": {
    "fqname": "io.messaging.queue_sighting",
    "type": "function",
    "description": "Placeholder for notifying player of a seen actor.",
    "tags": [],
    "source_file": "io\\messaging.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "io.messaging.queue_sighting",
      "module": "io.messaging",
      "name": "queue_sighting",
      "type": "function",
      "lineno": 12,
      "source_file": "io\\messaging.py",
      "description": "Placeholder for notifying player of a seen actor.",
      "docstring_full": "Placeholder for notifying player of a seen actor.\n\n@ignore: stub — no actor perception feedback",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "actor"
        ],
        "returns": null
      }
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "io.messaging.queue_player_action_feedback": {
    "fqname": "io.messaging.queue_player_action_feedback",
    "type": "function",
    "description": "Placeholder for showing action results to player.",
    "tags": [],
    "source_file": "io\\messaging.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "io.messaging.queue_player_action_feedback",
      "module": "io.messaging",
      "name": "queue_player_action_feedback",
      "type": "function",
      "lineno": 20,
      "source_file": "io\\messaging.py",
      "description": "Placeholder for showing action results to player.",
      "docstring_full": "Placeholder for showing action results to player.\n\n@ignore: stub — no action feedback system",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "action"
        ],
        "returns": null
      }
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "io.messaging.queue_enemy_action_feedback": {
    "fqname": "io.messaging.queue_enemy_action_feedback",
    "type": "function",
    "description": "Placeholder for enemy action messaging.",
    "tags": [],
    "source_file": "io\\messaging.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "io.messaging.queue_enemy_action_feedback",
      "module": "io.messaging",
      "name": "queue_enemy_action_feedback",
      "type": "function",
      "lineno": 28,
      "source_file": "io\\messaging.py",
      "description": "Placeholder for enemy action messaging.",
      "docstring_full": "Placeholder for enemy action messaging.\n\n@ignore: stub — enemy messaging deferred",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "actor",
          "action"
        ],
        "returns": null
      }
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "io.messaging.queue_status_message": {
    "fqname": "io.messaging.queue_status_message",
    "type": "function",
    "description": "Placeholder for simple status message queueing.",
    "tags": [],
    "source_file": "io\\messaging.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "io.messaging.queue_status_message",
      "module": "io.messaging",
      "name": "queue_status_message",
      "type": "function",
      "lineno": 36,
      "source_file": "io\\messaging.py",
      "description": "Placeholder for simple status message queueing.",
      "docstring_full": "Placeholder for simple status message queueing.\n\n@ignore: stub — UI feedback not implemented",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "text"
        ],
        "returns": null
      }
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "io.messaging.flush_message_queue": {
    "fqname": "io.messaging.flush_message_queue",
    "type": "function",
    "description": "Placeholder for flushing and displaying queued messages.",
    "tags": [],
    "source_file": "io\\messaging.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "io.messaging.flush_message_queue",
      "module": "io.messaging",
      "name": "flush_message_queue",
      "type": "function",
      "lineno": 44,
      "source_file": "io\\messaging.py",
      "description": "Placeholder for flushing and displaying queued messages.",
      "docstring_full": "Placeholder for flushing and displaying queued messages.\n\n@ignore: stub — no message queue system present",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [],
        "returns": null
      }
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "libraries.technique_component_library": {
    "fqname": "libraries.technique_component_library",
    "type": "module",
    "description": "Component registry for procedural technique generation.",
    "tags": [],
    "source_file": "libraries\\technique_component_library.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "libraries.technique_component_library",
      "module": "libraries.technique_component_library",
      "name": "libraries.technique_component_library",
      "type": "module",
      "lineno": 1,
      "source_file": "libraries\\technique_component_library.py",
      "description": "Component registry for procedural technique generation.",
      "docstring_full": "Component registry for procedural technique generation.\n\nStatus: Locked\nDate: 2025-06-25\nTime: 00:00 UTC\n\nAll entries in this file are governed by Design Journal entry:\n📚 Technique Component Library – Journal Summary\n\nComponents must follow strict schema and are divided by role:\n- Triggers: Optional activation conditions\n- Effects: Required technique payloads\n- Modifiers: Optional conditional modifiers\n\nEach component is a flat dictionary with the following fields:\n- id (str): Unique identifier\n- type (str): One of 'trigger', 'effect', 'modifier'\n- description (str): Human-readable effect\n- rare (bool): If True, excluded from base generation\n- locked (bool): Must be True unless component is in test or dev state",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {}
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "libraries.technique_component_library.EFFECT_COMPONENTS": {
    "fqname": "libraries.technique_component_library.EFFECT_COMPONENTS",
    "type": "variable",
    "description": "",
    "tags": [],
    "source_file": "libraries\\technique_component_library.py",
    "test_coverage": false,
    "docstring_present": false,
    "linked_journal_entry": "",
    "is_orphaned": true,
    "metadata": {
      "fqname": "libraries.technique_component_library.EFFECT_COMPONENTS",
      "module": "libraries.technique_component_library",
      "name": "EFFECT_COMPONENTS",
      "type": "variable",
      "lineno": 28,
      "source_file": "libraries\\technique_component_library.py",
      "description": "",
      "docstring_full": "",
      "tags": [],
      "linked_journal_entry": "",
      "deprecated": false,
      "status": "",
      "visibility": "",
      "docstring_present": false,
      "metadata": {}
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "libraries.technique_component_library.MODIFIER_COMPONENTS": {
    "fqname": "libraries.technique_component_library.MODIFIER_COMPONENTS",
    "type": "variable",
    "description": "",
    "tags": [],
    "source_file": "libraries\\technique_component_library.py",
    "test_coverage": false,
    "docstring_present": false,
    "linked_journal_entry": "",
    "is_orphaned": true,
    "metadata": {
      "fqname": "libraries.technique_component_library.MODIFIER_COMPONENTS",
      "module": "libraries.technique_component_library",
      "name": "MODIFIER_COMPONENTS",
      "type": "variable",
      "lineno": 55,
      "source_file": "libraries\\technique_component_library.py",
      "description": "",
      "docstring_full": "",
      "tags": [],
      "linked_journal_entry": "",
      "deprecated": false,
      "status": "",
      "visibility": "",
      "docstring_present": false,
      "metadata": {}
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "libraries.technique_component_library.TRIGGER_COMPONENTS": {
    "fqname": "libraries.technique_component_library.TRIGGER_COMPONENTS",
    "type": "variable",
    "description": "",
    "tags": [],
    "source_file": "libraries\\technique_component_library.py",
    "test_coverage": false,
    "docstring_present": false,
    "linked_journal_entry": "",
    "is_orphaned": true,
    "metadata": {
      "fqname": "libraries.technique_component_library.TRIGGER_COMPONENTS",
      "module": "libraries.technique_component_library",
      "name": "TRIGGER_COMPONENTS",
      "type": "variable",
      "lineno": 82,
      "source_file": "libraries\\technique_component_library.py",
      "description": "",
      "docstring_full": "",
      "tags": [],
      "linked_journal_entry": "",
      "deprecated": false,
      "status": "",
      "visibility": "",
      "docstring_present": false,
      "metadata": {}
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "libraries.technique_component_library.ALL_COMPONENTS": {
    "fqname": "libraries.technique_component_library.ALL_COMPONENTS",
    "type": "variable",
    "description": "",
    "tags": [],
    "source_file": "libraries\\technique_component_library.py",
    "test_coverage": false,
    "docstring_present": false,
    "linked_journal_entry": "",
    "is_orphaned": true,
    "metadata": {
      "fqname": "libraries.technique_component_library.ALL_COMPONENTS",
      "module": "libraries.technique_component_library",
      "name": "ALL_COMPONENTS",
      "type": "variable",
      "lineno": 102,
      "source_file": "libraries\\technique_component_library.py",
      "description": "",
      "docstring_full": "",
      "tags": [],
      "linked_journal_entry": "",
      "deprecated": false,
      "status": "",
      "visibility": "",
      "docstring_present": false,
      "metadata": {}
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "libraries.technique_component_library.validate_component": {
    "fqname": "libraries.technique_component_library.validate_component",
    "type": "function",
    "description": "",
    "tags": [],
    "source_file": "libraries\\technique_component_library.py",
    "test_coverage": false,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "libraries.technique_component_library.validate_component",
      "module": "libraries.technique_component_library",
      "name": "validate_component",
      "type": "function",
      "lineno": 112,
      "source_file": "libraries\\technique_component_library.py",
      "description": "",
      "docstring_full": "",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": false,
      "metadata": {
        "args": [
          "comp"
        ],
        "returns": null
      }
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "libraries.technique_component_library.get_all_component_ids": {
    "fqname": "libraries.technique_component_library.get_all_component_ids",
    "type": "function",
    "description": "",
    "tags": [],
    "source_file": "libraries\\technique_component_library.py",
    "test_coverage": false,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "libraries.technique_component_library.get_all_component_ids",
      "module": "libraries.technique_component_library",
      "name": "get_all_component_ids",
      "type": "function",
      "lineno": 123,
      "source_file": "libraries\\technique_component_library.py",
      "description": "",
      "docstring_full": "",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": false,
      "metadata": {
        "args": [],
        "returns": null
      }
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "utils.action_utils": {
    "fqname": "utils.action_utils",
    "type": "module",
    "description": "",
    "tags": [],
    "source_file": "utils\\action_utils.py",
    "test_coverage": false,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "utils.action_utils",
      "module": "utils.action_utils",
      "name": "utils.action_utils",
      "type": "module",
      "lineno": 1,
      "source_file": "utils\\action_utils.py",
      "description": "",
      "docstring_full": "",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": false,
      "metadata": {}
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "utils.action_utils.resolve_walk_action": {
    "fqname": "utils.action_utils.resolve_walk_action",
    "type": "function",
    "description": "Placeholder for handling movement between tiles.",
    "tags": [],
    "source_file": "utils\\action_utils.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "utils.action_utils.resolve_walk_action",
      "module": "utils.action_utils",
      "name": "resolve_walk_action",
      "type": "function",
      "lineno": 4,
      "source_file": "utils\\action_utils.py",
      "description": "Placeholder for handling movement between tiles.",
      "docstring_full": "Placeholder for handling movement between tiles.\n\n@ignore: stub — walk action logic not implemented",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "actor",
          "target_tile"
        ],
        "returns": null
      }
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "utils.action_utils.resolve_search_action": {
    "fqname": "utils.action_utils.resolve_search_action",
    "type": "function",
    "description": "Placeholder for triggering an active perception boost.",
    "tags": [],
    "source_file": "utils\\action_utils.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "utils.action_utils.resolve_search_action",
      "module": "utils.action_utils",
      "name": "resolve_search_action",
      "type": "function",
      "lineno": 12,
      "source_file": "utils\\action_utils.py",
      "description": "Placeholder for triggering an active perception boost.",
      "docstring_full": "Placeholder for triggering an active perception boost.\n\n@ignore: stub — no search logic present",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "actor"
        ],
        "returns": null
      }
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "utils.action_utils.resolve_use_action": {
    "fqname": "utils.action_utils.resolve_use_action",
    "type": "function",
    "description": "Placeholder for using an item (e.g., medkit, key).",
    "tags": [],
    "source_file": "utils\\action_utils.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "utils.action_utils.resolve_use_action",
      "module": "utils.action_utils",
      "name": "resolve_use_action",
      "type": "function",
      "lineno": 20,
      "source_file": "utils\\action_utils.py",
      "description": "Placeholder for using an item (e.g., medkit, key).",
      "docstring_full": "Placeholder for using an item (e.g., medkit, key).\n\n@ignore: stub — use action deferred",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "actor",
          "item"
        ],
        "returns": null
      }
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "utils.actor_mutation_utils": {
    "fqname": "utils.actor_mutation_utils",
    "type": "module",
    "description": "",
    "tags": [],
    "source_file": "utils\\actor_mutation_utils.py",
    "test_coverage": false,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "utils.actor_mutation_utils",
      "module": "utils.actor_mutation_utils",
      "name": "utils.actor_mutation_utils",
      "type": "module",
      "lineno": 1,
      "source_file": "utils\\actor_mutation_utils.py",
      "description": "",
      "docstring_full": "",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": false,
      "metadata": {}
    },
    "links": [
      {
        "target": "utils.technique_mutation_utils.apply_mutation",
        "type": "calls"
      }
    ],
    "called_by_fqns": [],
    "calls_fqns": [
      "utils.technique_mutation_utils.apply_mutation"
    ]
  },
  "utils.actor_mutation_utils.apply_mutation_to_actor": {
    "fqname": "utils.actor_mutation_utils.apply_mutation_to_actor",
    "type": "function",
    "description": "Applies a selected mutation offer to the actor's technique instance.",
    "tags": [],
    "source_file": "utils\\actor_mutation_utils.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "utils.actor_mutation_utils.apply_mutation_to_actor",
      "module": "utils.actor_mutation_utils",
      "name": "apply_mutation_to_actor",
      "type": "function",
      "lineno": 7,
      "source_file": "utils\\actor_mutation_utils.py",
      "description": "Applies a selected mutation offer to the actor's technique instance.",
      "docstring_full": "Applies a selected mutation offer to the actor's technique instance.\n\nParameters:\n    actor: Actor instance\n    skill_id: Skill the technique belongs to (e.g., \"melee\", \"sword\")\n    technique_id: The canonical technique ID (e.g., \"piercing_thrust\")\n    offer: A mutation offer dict, as returned by generate_evolution_offer()\n\nBehavior:\n    - Retrieves the actor’s current technique instance\n    - Applies the mutation using pure-functional `apply_mutation`\n    - Replaces the actor’s stored copy with the mutated result\n    - Appends the offer to technique[\"mutations\"] for traceability",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "actor",
          "skill_id",
          "technique_id",
          "offer"
        ],
        "returns": null
      }
    },
    "links": [
      {
        "target": "utils.technique_mutation_utils.apply_mutation",
        "type": "calls"
      }
    ],
    "called_by_fqns": [],
    "calls_fqns": [
      "utils.technique_mutation_utils.apply_mutation"
    ]
  },
  "utils.actor_offer_utils": {
    "fqname": "utils.actor_offer_utils",
    "type": "module",
    "description": "",
    "tags": [],
    "source_file": "utils\\actor_offer_utils.py",
    "test_coverage": false,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "utils.actor_offer_utils",
      "module": "utils.actor_offer_utils",
      "name": "utils.actor_offer_utils",
      "type": "module",
      "lineno": 1,
      "source_file": "utils\\actor_offer_utils.py",
      "description": "",
      "docstring_full": "",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": false,
      "metadata": {}
    },
    "links": [
      {
        "target": "flow.actor_mutation_flow._boost_level_to_rarity",
        "type": "calls"
      },
      {
        "target": "utils.actor_offer_utils._boost_level_to_rarity",
        "type": "calls"
      },
      {
        "target": "definitions.evolution_offer_generator.generate_evolution_offer",
        "type": "calls"
      },
      {
        "target": "utils.technique_mutation_utils.generate_evolution_offer",
        "type": "calls"
      }
    ],
    "called_by_fqns": [],
    "calls_fqns": [
      "definitions.evolution_offer_generator.generate_evolution_offer",
      "flow.actor_mutation_flow._boost_level_to_rarity",
      "utils.actor_offer_utils._boost_level_to_rarity",
      "utils.technique_mutation_utils.generate_evolution_offer"
    ]
  },
  "utils.actor_offer_utils.generate_evolution_offer_for_actor": {
    "fqname": "utils.actor_offer_utils.generate_evolution_offer_for_actor",
    "type": "function",
    "description": "Generates 4 mutation offers for the given actor's technique.",
    "tags": [],
    "source_file": "utils\\actor_offer_utils.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "utils.actor_offer_utils.generate_evolution_offer_for_actor",
      "module": "utils.actor_offer_utils",
      "name": "generate_evolution_offer_for_actor",
      "type": "function",
      "lineno": 7,
      "source_file": "utils\\actor_offer_utils.py",
      "description": "Generates 4 mutation offers for the given actor's technique.",
      "docstring_full": "Generates 4 mutation offers for the given actor's technique.\n\nThis is a pure function: no state is modified.\n\nParameters:\n    actor: Actor instance\n    technique_id: ID of the technique to mutate\n\nReturns:\n    List of 4 offer dicts, each with:\n        - \"type\": str\n        - \"result\": new technique dict (or None for 'bank')",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "actor",
          "technique_id"
        ],
        "returns": null
      }
    },
    "links": [
      {
        "target": "flow.actor_mutation_flow._boost_level_to_rarity",
        "type": "calls"
      },
      {
        "target": "utils.actor_offer_utils._boost_level_to_rarity",
        "type": "calls"
      },
      {
        "target": "definitions.evolution_offer_generator.generate_evolution_offer",
        "type": "calls"
      },
      {
        "target": "utils.technique_mutation_utils.generate_evolution_offer",
        "type": "calls"
      }
    ],
    "called_by_fqns": [
      "flow.actor_mutation_flow",
      "flow.actor_mutation_flow.get_mutation_offer",
      "flow.actor_mutation_flow.can_offer_boost",
      "flow.actor_mutation_flow.apply_boost",
      "flow.actor_mutation_flow.apply_mutation_choice",
      "flow.actor_mutation_flow.handle_pending_mutation_offer",
      "flow.actor_mutation_flow.handle_post_action_mutation",
      "flow.actor_mutation_flow._boost_level_to_rarity"
    ],
    "calls_fqns": [
      "definitions.evolution_offer_generator.generate_evolution_offer",
      "flow.actor_mutation_flow._boost_level_to_rarity",
      "utils.actor_offer_utils._boost_level_to_rarity",
      "utils.technique_mutation_utils.generate_evolution_offer"
    ]
  },
  "utils.actor_offer_utils._boost_level_to_rarity": {
    "fqname": "utils.actor_offer_utils._boost_level_to_rarity",
    "type": "function",
    "description": "Converts integer boost level to a string rarity tier.",
    "tags": [],
    "source_file": "utils\\actor_offer_utils.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "utils.actor_offer_utils._boost_level_to_rarity",
      "module": "utils.actor_offer_utils",
      "name": "_boost_level_to_rarity",
      "type": "function",
      "lineno": 34,
      "source_file": "utils\\actor_offer_utils.py",
      "description": "Converts integer boost level to a string rarity tier.",
      "docstring_full": "Converts integer boost level to a string rarity tier.",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "boost_level"
        ],
        "returns": null
      }
    },
    "links": [
      {
        "target": "flow.actor_mutation_flow._boost_level_to_rarity",
        "type": "calls"
      },
      {
        "target": "utils.actor_offer_utils._boost_level_to_rarity",
        "type": "calls"
      },
      {
        "target": "definitions.evolution_offer_generator.generate_evolution_offer",
        "type": "calls"
      },
      {
        "target": "utils.technique_mutation_utils.generate_evolution_offer",
        "type": "calls"
      }
    ],
    "called_by_fqns": [
      "flow.actor_mutation_flow",
      "flow.actor_mutation_flow.get_mutation_offer",
      "flow.actor_mutation_flow.can_offer_boost",
      "flow.actor_mutation_flow.apply_boost",
      "flow.actor_mutation_flow.apply_mutation_choice",
      "flow.actor_mutation_flow.handle_pending_mutation_offer",
      "flow.actor_mutation_flow.handle_post_action_mutation",
      "flow.actor_mutation_flow._boost_level_to_rarity",
      "utils.actor_offer_utils",
      "utils.actor_offer_utils.generate_evolution_offer_for_actor",
      "utils.actor_offer_utils._boost_level_to_rarity"
    ],
    "calls_fqns": [
      "definitions.evolution_offer_generator.generate_evolution_offer",
      "flow.actor_mutation_flow._boost_level_to_rarity",
      "utils.actor_offer_utils._boost_level_to_rarity",
      "utils.technique_mutation_utils.generate_evolution_offer"
    ]
  },
  "utils.combat_utils": {
    "fqname": "utils.combat_utils",
    "type": "module",
    "description": "",
    "tags": [],
    "source_file": "utils\\combat_utils.py",
    "test_coverage": false,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "utils.combat_utils",
      "module": "utils.combat_utils",
      "name": "utils.combat_utils",
      "type": "module",
      "lineno": 1,
      "source_file": "utils\\combat_utils.py",
      "description": "",
      "docstring_full": "",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": false,
      "metadata": {}
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "utils.combat_utils.resolve_attack": {
    "fqname": "utils.combat_utils.resolve_attack",
    "type": "function",
    "description": "",
    "tags": [],
    "source_file": "utils\\combat_utils.py",
    "test_coverage": false,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "utils.combat_utils.resolve_attack",
      "module": "utils.combat_utils",
      "name": "resolve_attack",
      "type": "function",
      "lineno": 4,
      "source_file": "utils\\combat_utils.py",
      "description": "",
      "docstring_full": "",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": false,
      "metadata": {
        "args": [
          "attacker",
          "target"
        ],
        "returns": null
      }
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "utils.combat_utils.calculate_damage": {
    "fqname": "utils.combat_utils.calculate_damage",
    "type": "function",
    "description": "",
    "tags": [],
    "source_file": "utils\\combat_utils.py",
    "test_coverage": false,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "utils.combat_utils.calculate_damage",
      "module": "utils.combat_utils",
      "name": "calculate_damage",
      "type": "function",
      "lineno": 6,
      "source_file": "utils\\combat_utils.py",
      "description": "",
      "docstring_full": "",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": false,
      "metadata": {
        "args": [
          "weapon",
          "attacker",
          "target"
        ],
        "returns": null
      }
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "utils.combat_utils.roll_hit": {
    "fqname": "utils.combat_utils.roll_hit",
    "type": "function",
    "description": "",
    "tags": [],
    "source_file": "utils\\combat_utils.py",
    "test_coverage": false,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "utils.combat_utils.roll_hit",
      "module": "utils.combat_utils",
      "name": "roll_hit",
      "type": "function",
      "lineno": 8,
      "source_file": "utils\\combat_utils.py",
      "description": "",
      "docstring_full": "",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": false,
      "metadata": {
        "args": [
          "attacker",
          "target"
        ],
        "returns": null
      }
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "utils.cover_utils": {
    "fqname": "utils.cover_utils",
    "type": "module",
    "description": "This module provides utilities for calculating cover and line-of-sight interference",
    "tags": [],
    "source_file": "utils\\cover_utils.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "utils.cover_utils",
      "module": "utils.cover_utils",
      "name": "utils.cover_utils",
      "type": "module",
      "lineno": 1,
      "source_file": "utils\\cover_utils.py",
      "description": "This module provides utilities for calculating cover and line-of-sight interference",
      "docstring_full": "This module provides utilities for calculating cover and line-of-sight interference\nfrom things located on tactical tiles. Cover is determined by the presence of objects\nwith defined cover_rating or blocks_sight attributes.\n\nDesign Philosophy:\n- Cover and visibility are tile-centric but determined by objects ('things')\n- Modular: Does not assume or enforce actor/team logic\n- Lightweight: Only operates on floorplan and things, does not invoke perception or combat systems\n\nDependencies:\n- floorplan.get_tile(x, y): returns tile at (x, y)\n- Each tile: tile[\"things\"] is a list of dicts representing things\n- Each thing may define: \"cover_rating\": int, \"blocks_sight\": bool\n\nOutput:\n- calculate_cover_between returns list of cover-relevant things, with positions\n- Can be used by perception, combat, AI modules",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {}
    },
    "links": [
      {
        "target": "utils.cover_utils.get_cover_objects_along_path",
        "type": "calls"
      }
    ],
    "called_by_fqns": [],
    "calls_fqns": [
      "utils.cover_utils.get_cover_objects_along_path"
    ]
  },
  "utils.cover_utils.get_cover_objects_along_path": {
    "fqname": "utils.cover_utils.get_cover_objects_along_path",
    "type": "function",
    "description": "Scans the tiles along the given path and returns all objects that influence cover.",
    "tags": [],
    "source_file": "utils\\cover_utils.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "utils.cover_utils.get_cover_objects_along_path",
      "module": "utils.cover_utils",
      "name": "get_cover_objects_along_path",
      "type": "function",
      "lineno": 26,
      "source_file": "utils\\cover_utils.py",
      "description": "Scans the tiles along the given path and returns all objects that influence cover.",
      "docstring_full": "Scans the tiles along the given path and returns all objects that influence cover.\n\nArgs:\n    path (List[Tuple[int, int]]): List of (x, y) positions from observer to target\n    floorplan (Dict): Dict of (x, y): tile\n\nReturns:\n    List[Dict]: List of {\"pos\": (x, y), \"thing\": <thing dict>} entries that affect cover",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "path",
          "floorplan"
        ],
        "returns": null
      }
    },
    "links": [
      {
        "target": "utils.cover_utils.get_cover_objects_along_path",
        "type": "calls"
      }
    ],
    "called_by_fqns": [
      "utils.cover_utils",
      "utils.cover_utils.get_cover_objects_along_path",
      "utils.cover_utils.calculate_total_cover"
    ],
    "calls_fqns": [
      "utils.cover_utils.get_cover_objects_along_path"
    ]
  },
  "utils.cover_utils.calculate_total_cover": {
    "fqname": "utils.cover_utils.calculate_total_cover",
    "type": "function",
    "description": "Computes the total cover_rating from objects along the path.",
    "tags": [],
    "source_file": "utils\\cover_utils.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "utils.cover_utils.calculate_total_cover",
      "module": "utils.cover_utils",
      "name": "calculate_total_cover",
      "type": "function",
      "lineno": 48,
      "source_file": "utils\\cover_utils.py",
      "description": "Computes the total cover_rating from objects along the path.",
      "docstring_full": "Computes the total cover_rating from objects along the path.\nIgnores cover that is at the source or destination.\n\nArgs:\n    path (List[Tuple[int, int]]): Ordered list from observer to target (inclusive)\n    floorplan (Dict): Tactical map of tiles\n\nReturns:\n    int: Total cover penalty from all intervening things",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "path",
          "floorplan"
        ],
        "returns": null
      }
    },
    "links": [
      {
        "target": "utils.cover_utils.get_cover_objects_along_path",
        "type": "calls"
      }
    ],
    "called_by_fqns": [],
    "calls_fqns": [
      "utils.cover_utils.get_cover_objects_along_path"
    ]
  },
  "utils.debug_utils": {
    "fqname": "utils.debug_utils",
    "type": "module",
    "description": "",
    "tags": [],
    "source_file": "utils\\debug_utils.py",
    "test_coverage": false,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "utils.debug_utils",
      "module": "utils.debug_utils",
      "name": "utils.debug_utils",
      "type": "module",
      "lineno": 1,
      "source_file": "utils\\debug_utils.py",
      "description": "",
      "docstring_full": "",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": false,
      "metadata": {}
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "utils.debug_utils.debug": {
    "fqname": "utils.debug_utils.debug",
    "type": "function",
    "description": "",
    "tags": [],
    "source_file": "utils\\debug_utils.py",
    "test_coverage": false,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "utils.debug_utils.debug",
      "module": "utils.debug_utils",
      "name": "debug",
      "type": "function",
      "lineno": 19,
      "source_file": "utils\\debug_utils.py",
      "description": "",
      "docstring_full": "",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": false,
      "metadata": {
        "args": [
          "message"
        ],
        "returns": null
      }
    },
    "links": [],
    "called_by_fqns": [
      "utils.movement_utils",
      "utils.movement_utils",
      "utils.movement_utils",
      "utils.movement_utils",
      "utils.movement_utils",
      "utils.movement_utils",
      "utils.movement_utils",
      "utils.movement_utils",
      "utils.movement_utils",
      "utils.movement_utils",
      "utils.movement_utils",
      "utils.movement_utils",
      "utils.movement_utils",
      "utils.movement_utils",
      "utils.movement_utils",
      "utils.movement_utils",
      "utils.movement_utils",
      "utils.movement_utils",
      "utils.movement_utils.move_actor_to_zone",
      "utils.movement_utils.move_actor_to_zone",
      "utils.movement_utils.move_actor_to_zone",
      "utils.movement_utils.move_actor_to_zone",
      "utils.movement_utils.move_actor_to_zone",
      "utils.movement_utils.move_actor_to_zone",
      "utils.movement_utils.move_actor_to_zone",
      "utils.movement_utils.move_actor_to_zone",
      "utils.movement_utils.move_actor_to_zone",
      "utils.movement_utils.move_actor_to_zone",
      "utils.movement_utils.move_actor_to_zone",
      "utils.movement_utils.move_actor_to_zone",
      "utils.movement_utils.move_actor_to_zone",
      "utils.movement_utils.move_actor_to_zone",
      "utils.movement_utils.move_actor_to_zone",
      "utils.movement_utils.move_actor_to_zone",
      "utils.movement_utils.move_actor_to_zone",
      "utils.movement_utils.move_actor_to_zone",
      "utils.movement_utils.get_zone_by_feature",
      "utils.movement_utils.get_zone_by_feature",
      "utils.movement_utils.get_zone_by_feature",
      "utils.movement_utils.get_zone_by_feature",
      "utils.movement_utils.get_zone_by_feature",
      "utils.movement_utils.get_zone_by_feature",
      "utils.movement_utils.get_zone_by_feature",
      "utils.movement_utils.get_zone_by_feature",
      "utils.movement_utils.get_zone_by_feature",
      "utils.movement_utils.get_zone_by_feature",
      "utils.movement_utils.get_zone_by_feature",
      "utils.movement_utils.get_zone_by_feature",
      "utils.movement_utils.get_zone_by_feature",
      "utils.movement_utils.get_zone_by_feature",
      "utils.movement_utils.get_zone_by_feature",
      "utils.movement_utils.get_zone_by_feature",
      "utils.movement_utils.get_zone_by_feature",
      "utils.movement_utils.get_zone_by_feature",
      "utils.movement_utils.resolve_target_to_zone",
      "utils.movement_utils.resolve_target_to_zone",
      "utils.movement_utils.resolve_target_to_zone",
      "utils.movement_utils.resolve_target_to_zone",
      "utils.movement_utils.resolve_target_to_zone",
      "utils.movement_utils.resolve_target_to_zone",
      "utils.movement_utils.resolve_target_to_zone",
      "utils.movement_utils.resolve_target_to_zone",
      "utils.movement_utils.resolve_target_to_zone",
      "utils.movement_utils.resolve_target_to_zone",
      "utils.movement_utils.resolve_target_to_zone",
      "utils.movement_utils.resolve_target_to_zone",
      "utils.movement_utils.resolve_target_to_zone",
      "utils.movement_utils.resolve_target_to_zone",
      "utils.movement_utils.resolve_target_to_zone",
      "utils.movement_utils.resolve_target_to_zone",
      "utils.movement_utils.resolve_target_to_zone",
      "utils.movement_utils.resolve_target_to_zone",
      "utils.movement_utils.find_path_between_zones",
      "utils.movement_utils.find_path_between_zones",
      "utils.movement_utils.find_path_between_zones",
      "utils.movement_utils.find_path_between_zones",
      "utils.movement_utils.find_path_between_zones",
      "utils.movement_utils.find_path_between_zones",
      "utils.movement_utils.find_path_between_zones",
      "utils.movement_utils.find_path_between_zones",
      "utils.movement_utils.find_path_between_zones",
      "utils.movement_utils.find_path_between_zones",
      "utils.movement_utils.find_path_between_zones",
      "utils.movement_utils.find_path_between_zones",
      "utils.movement_utils.find_path_between_zones",
      "utils.movement_utils.find_path_between_zones",
      "utils.movement_utils.find_path_between_zones",
      "utils.movement_utils.find_path_between_zones",
      "utils.movement_utils.find_path_between_zones",
      "utils.movement_utils.find_path_between_zones",
      "utils.movement_utils.distance_between_zones",
      "utils.movement_utils.distance_between_zones",
      "utils.movement_utils.distance_between_zones",
      "utils.movement_utils.distance_between_zones",
      "utils.movement_utils.distance_between_zones",
      "utils.movement_utils.distance_between_zones",
      "utils.movement_utils.distance_between_zones",
      "utils.movement_utils.distance_between_zones",
      "utils.movement_utils.distance_between_zones",
      "utils.movement_utils.distance_between_zones",
      "utils.movement_utils.distance_between_zones",
      "utils.movement_utils.distance_between_zones",
      "utils.movement_utils.distance_between_zones",
      "utils.movement_utils.distance_between_zones",
      "utils.movement_utils.distance_between_zones",
      "utils.movement_utils.distance_between_zones",
      "utils.movement_utils.distance_between_zones",
      "utils.movement_utils.distance_between_zones",
      "utils.movement_utils.move_actor_toward_target",
      "utils.movement_utils.move_actor_toward_target",
      "utils.movement_utils.move_actor_toward_target",
      "utils.movement_utils.move_actor_toward_target",
      "utils.movement_utils.move_actor_toward_target",
      "utils.movement_utils.move_actor_toward_target",
      "utils.movement_utils.move_actor_toward_target",
      "utils.movement_utils.move_actor_toward_target",
      "utils.movement_utils.move_actor_toward_target",
      "utils.movement_utils.move_actor_toward_target",
      "utils.movement_utils.move_actor_toward_target",
      "utils.movement_utils.move_actor_toward_target",
      "utils.movement_utils.move_actor_toward_target",
      "utils.movement_utils.move_actor_toward_target",
      "utils.movement_utils.move_actor_toward_target",
      "utils.movement_utils.move_actor_toward_target",
      "utils.movement_utils.move_actor_toward_target",
      "utils.movement_utils.move_actor_toward_target",
      "utils.movement_utils.start_movement_to_target",
      "utils.movement_utils.start_movement_to_target",
      "utils.movement_utils.start_movement_to_target",
      "utils.movement_utils.start_movement_to_target",
      "utils.movement_utils.start_movement_to_target",
      "utils.movement_utils.start_movement_to_target",
      "utils.movement_utils.start_movement_to_target",
      "utils.movement_utils.start_movement_to_target",
      "utils.movement_utils.start_movement_to_target",
      "utils.movement_utils.start_movement_to_target",
      "utils.movement_utils.start_movement_to_target",
      "utils.movement_utils.start_movement_to_target",
      "utils.movement_utils.start_movement_to_target",
      "utils.movement_utils.start_movement_to_target",
      "utils.movement_utils.start_movement_to_target",
      "utils.movement_utils.start_movement_to_target",
      "utils.movement_utils.start_movement_to_target",
      "utils.movement_utils.start_movement_to_target",
      "utils.movement_utils.advance_actor_movement",
      "utils.movement_utils.advance_actor_movement",
      "utils.movement_utils.advance_actor_movement",
      "utils.movement_utils.advance_actor_movement",
      "utils.movement_utils.advance_actor_movement",
      "utils.movement_utils.advance_actor_movement",
      "utils.movement_utils.advance_actor_movement",
      "utils.movement_utils.advance_actor_movement",
      "utils.movement_utils.advance_actor_movement",
      "utils.movement_utils.advance_actor_movement",
      "utils.movement_utils.advance_actor_movement",
      "utils.movement_utils.advance_actor_movement",
      "utils.movement_utils.advance_actor_movement",
      "utils.movement_utils.advance_actor_movement",
      "utils.movement_utils.advance_actor_movement",
      "utils.movement_utils.advance_actor_movement",
      "utils.movement_utils.advance_actor_movement",
      "utils.movement_utils.advance_actor_movement",
      "utils.visibility_utils",
      "utils.visibility_utils",
      "utils.visibility_utils",
      "utils.visibility_utils",
      "utils.visibility_utils.get_visibility_caps",
      "utils.visibility_utils.get_visibility_caps",
      "utils.visibility_utils.get_visibility_caps",
      "utils.visibility_utils.get_visibility_caps",
      "utils.visibility_utils.visual_coverage",
      "utils.visibility_utils.visual_coverage",
      "utils.visibility_utils.visual_coverage",
      "utils.visibility_utils.visual_coverage",
      "utils.visibility_utils.observe",
      "utils.visibility_utils.observe",
      "utils.visibility_utils.observe",
      "utils.visibility_utils.observe",
      "utils.visibility_utils.trace_visibility_path",
      "utils.visibility_utils.trace_visibility_path",
      "utils.visibility_utils.trace_visibility_path",
      "utils.visibility_utils.trace_visibility_path",
      "utils.visibility_utils.compute_visibility_penalty_along_path",
      "utils.visibility_utils.compute_visibility_penalty_along_path",
      "utils.visibility_utils.compute_visibility_penalty_along_path",
      "utils.visibility_utils.compute_visibility_penalty_along_path"
    ],
    "calls_fqns": []
  },
  "utils.evasion_utils": {
    "fqname": "utils.evasion_utils",
    "type": "module",
    "description": "",
    "tags": [],
    "source_file": "utils\\evasion_utils.py",
    "test_coverage": false,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "utils.evasion_utils",
      "module": "utils.evasion_utils",
      "name": "utils.evasion_utils",
      "type": "module",
      "lineno": 1,
      "source_file": "utils\\evasion_utils.py",
      "description": "",
      "docstring_full": "",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": false,
      "metadata": {}
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "utils.evasion_utils.calculate_visibility": {
    "fqname": "utils.evasion_utils.calculate_visibility",
    "type": "function",
    "description": "",
    "tags": [],
    "source_file": "utils\\evasion_utils.py",
    "test_coverage": false,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "utils.evasion_utils.calculate_visibility",
      "module": "utils.evasion_utils",
      "name": "calculate_visibility",
      "type": "function",
      "lineno": 4,
      "source_file": "utils\\evasion_utils.py",
      "description": "",
      "docstring_full": "",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": false,
      "metadata": {
        "args": [
          "actor",
          "observer"
        ],
        "returns": null
      }
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "utils.evasion_utils.get_stealth_modifier": {
    "fqname": "utils.evasion_utils.get_stealth_modifier",
    "type": "function",
    "description": "",
    "tags": [],
    "source_file": "utils\\evasion_utils.py",
    "test_coverage": false,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "utils.evasion_utils.get_stealth_modifier",
      "module": "utils.evasion_utils",
      "name": "get_stealth_modifier",
      "type": "function",
      "lineno": 6,
      "source_file": "utils\\evasion_utils.py",
      "description": "",
      "docstring_full": "",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": false,
      "metadata": {
        "args": [
          "actor"
        ],
        "returns": null
      }
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "utils.evolution_offer_utils": {
    "fqname": "utils.evolution_offer_utils",
    "type": "module",
    "description": "Generates mutation offers based on rarity and actor boost state.",
    "tags": [],
    "source_file": "utils\\evolution_offer_utils.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "utils.evolution_offer_utils",
      "module": "utils.evolution_offer_utils",
      "name": "utils.evolution_offer_utils",
      "type": "module",
      "lineno": 1,
      "source_file": "utils\\evolution_offer_utils.py",
      "description": "Generates mutation offers based on rarity and actor boost state.",
      "docstring_full": "Generates mutation offers based on rarity and actor boost state.",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {}
    },
    "links": [
      {
        "target": "utils.evolution_offer_utils.get_allowed_rarities",
        "type": "calls"
      },
      {
        "target": "definitions.evolution_offer_generator.generate_evolution_offer",
        "type": "calls"
      },
      {
        "target": "utils.technique_mutation_utils.generate_evolution_offer",
        "type": "calls"
      }
    ],
    "called_by_fqns": [],
    "calls_fqns": [
      "definitions.evolution_offer_generator.generate_evolution_offer",
      "utils.evolution_offer_utils.get_allowed_rarities",
      "utils.technique_mutation_utils.generate_evolution_offer"
    ]
  },
  "utils.evolution_offer_utils.get_allowed_rarities": {
    "fqname": "utils.evolution_offer_utils.get_allowed_rarities",
    "type": "function",
    "description": "Returns the list of allowed rarities after applying boost filtering.",
    "tags": [],
    "source_file": "utils\\evolution_offer_utils.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "utils.evolution_offer_utils.get_allowed_rarities",
      "module": "utils.evolution_offer_utils",
      "name": "get_allowed_rarities",
      "type": "function",
      "lineno": 13,
      "source_file": "utils\\evolution_offer_utils.py",
      "description": "Returns the list of allowed rarities after applying boost filtering.",
      "docstring_full": "Returns the list of allowed rarities after applying boost filtering.\n\nBoost levels:\n    0 → all rarities\n    1 → uncommon, rare, epic\n    2 → rare, epic\n    3+ → epic only",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "boost"
        ],
        "returns": null
      }
    },
    "links": [
      {
        "target": "utils.evolution_offer_utils.get_allowed_rarities",
        "type": "calls"
      },
      {
        "target": "definitions.evolution_offer_generator.generate_evolution_offer",
        "type": "calls"
      },
      {
        "target": "utils.technique_mutation_utils.generate_evolution_offer",
        "type": "calls"
      }
    ],
    "called_by_fqns": [
      "utils.evolution_offer_utils",
      "utils.evolution_offer_utils.get_allowed_rarities",
      "utils.evolution_offer_utils.generate_evolution_offer_for_actor"
    ],
    "calls_fqns": [
      "definitions.evolution_offer_generator.generate_evolution_offer",
      "utils.evolution_offer_utils.get_allowed_rarities",
      "utils.technique_mutation_utils.generate_evolution_offer"
    ]
  },
  "utils.evolution_offer_utils.generate_evolution_offer_for_actor": {
    "fqname": "utils.evolution_offer_utils.generate_evolution_offer_for_actor",
    "type": "function",
    "description": "Generates 4 weighted mutation offers for a given actor's visible technique.",
    "tags": [],
    "source_file": "utils\\evolution_offer_utils.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "utils.evolution_offer_utils.generate_evolution_offer_for_actor",
      "module": "utils.evolution_offer_utils",
      "name": "generate_evolution_offer_for_actor",
      "type": "function",
      "lineno": 27,
      "source_file": "utils\\evolution_offer_utils.py",
      "description": "Generates 4 weighted mutation offers for a given actor's visible technique.",
      "docstring_full": "Generates 4 weighted mutation offers for a given actor's visible technique.\n\nReturns list of offer dicts:\n    - type\n    - skill\n    - technique\n    - value",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "actor",
          "technique_id"
        ],
        "returns": null
      }
    },
    "links": [
      {
        "target": "utils.evolution_offer_utils.get_allowed_rarities",
        "type": "calls"
      },
      {
        "target": "definitions.evolution_offer_generator.generate_evolution_offer",
        "type": "calls"
      },
      {
        "target": "utils.technique_mutation_utils.generate_evolution_offer",
        "type": "calls"
      }
    ],
    "called_by_fqns": [
      "flow.actor_mutation_flow",
      "flow.actor_mutation_flow.get_mutation_offer",
      "flow.actor_mutation_flow.can_offer_boost",
      "flow.actor_mutation_flow.apply_boost",
      "flow.actor_mutation_flow.apply_mutation_choice",
      "flow.actor_mutation_flow.handle_pending_mutation_offer",
      "flow.actor_mutation_flow.handle_post_action_mutation",
      "flow.actor_mutation_flow._boost_level_to_rarity"
    ],
    "calls_fqns": [
      "definitions.evolution_offer_generator.generate_evolution_offer",
      "utils.evolution_offer_utils.get_allowed_rarities",
      "utils.technique_mutation_utils.generate_evolution_offer"
    ]
  },
  "utils.general_utils": {
    "fqname": "utils.general_utils",
    "type": "module",
    "description": "",
    "tags": [],
    "source_file": "utils\\general_utils.py",
    "test_coverage": false,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "utils.general_utils",
      "module": "utils.general_utils",
      "name": "utils.general_utils",
      "type": "module",
      "lineno": 1,
      "source_file": "utils\\general_utils.py",
      "description": "",
      "docstring_full": "",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": false,
      "metadata": {}
    },
    "links": [
      {
        "target": "utils.general_utils.validate_tags",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.validate_tags",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.bresenham_line",
        "type": "calls"
      }
    ],
    "called_by_fqns": [],
    "calls_fqns": [
      "utils.general_utils.bresenham_line",
      "utils.general_utils.validate_tags"
    ]
  },
  "utils.general_utils.validate_tags": {
    "fqname": "utils.general_utils.validate_tags",
    "type": "function",
    "description": "Validates that all tags in a given definition dict exist in TAG_DB.",
    "tags": [],
    "source_file": "utils\\general_utils.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "utils.general_utils.validate_tags",
      "module": "utils.general_utils",
      "name": "validate_tags",
      "type": "function",
      "lineno": 12,
      "source_file": "utils\\general_utils.py",
      "description": "Validates that all tags in a given definition dict exist in TAG_DB.",
      "docstring_full": "Validates that all tags in a given definition dict exist in TAG_DB.",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "defs",
          "kind"
        ],
        "returns": null
      }
    },
    "links": [
      {
        "target": "utils.general_utils.validate_tags",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.validate_tags",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.bresenham_line",
        "type": "calls"
      }
    ],
    "called_by_fqns": [
      "utils.general_utils",
      "utils.general_utils",
      "utils.general_utils.validate_tags",
      "utils.general_utils.validate_tags",
      "utils.general_utils.validate_all_tags",
      "utils.general_utils.validate_all_tags",
      "utils.general_utils.trace_line",
      "utils.general_utils.trace_line",
      "utils.general_utils.compute_visibility_penalty_along_path",
      "utils.general_utils.compute_visibility_penalty_along_path",
      "utils.general_utils.bresenham_line",
      "utils.general_utils.bresenham_line"
    ],
    "calls_fqns": [
      "utils.general_utils.bresenham_line",
      "utils.general_utils.validate_tags"
    ]
  },
  "utils.general_utils.validate_all_tags": {
    "fqname": "utils.general_utils.validate_all_tags",
    "type": "function",
    "description": "Runs tag validation on both skills and techniques.",
    "tags": [],
    "source_file": "utils\\general_utils.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "utils.general_utils.validate_all_tags",
      "module": "utils.general_utils",
      "name": "validate_all_tags",
      "type": "function",
      "lineno": 23,
      "source_file": "utils\\general_utils.py",
      "description": "Runs tag validation on both skills and techniques.",
      "docstring_full": "Runs tag validation on both skills and techniques.",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "skill_defs",
          "technique_defs"
        ],
        "returns": null
      }
    },
    "links": [
      {
        "target": "utils.general_utils.validate_tags",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.validate_tags",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.bresenham_line",
        "type": "calls"
      }
    ],
    "called_by_fqns": [],
    "calls_fqns": [
      "utils.general_utils.bresenham_line",
      "utils.general_utils.validate_tags"
    ]
  },
  "utils.general_utils.trace_line": {
    "fqname": "utils.general_utils.trace_line",
    "type": "function",
    "description": "Traces a straight line from `start` to `end` using a grid-based algorithm.",
    "tags": [],
    "source_file": "utils\\general_utils.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "utils.general_utils.trace_line",
      "module": "utils.general_utils",
      "name": "trace_line",
      "type": "function",
      "lineno": 31,
      "source_file": "utils\\general_utils.py",
      "description": "Traces a straight line from `start` to `end` using a grid-based algorithm.",
      "docstring_full": "Traces a straight line from `start` to `end` using a grid-based algorithm.\nReturns a list of dicts, one for each tile crossed, including blocking status.\n\nThis function does NOT interpret what counts as blocking — it marks the presence\nof potentially blocking features (terrain, things), but leaves interpretation\nto the caller.\n\nParameters:\n    - start: origin (x, y)\n    - end: destination (x, y)\n    - floorplan: map of (x, y) to tile dict\n    - stop_at_block: if True, halts trace when blocking tile is encountered\n\nDesign constraints:\n- No side effects (pure function)\n- Supports cardinal and diagonal directions\n- Does not skip corners\n- Assumes floorplan is prevalidated and includes full tile data for every coord",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "start",
          "end",
          "floorplan",
          "stop_at_block"
        ],
        "returns": null
      }
    },
    "links": [
      {
        "target": "utils.general_utils.validate_tags",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.validate_tags",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.bresenham_line",
        "type": "calls"
      }
    ],
    "called_by_fqns": [
      "utils.test_trace_line",
      "utils.test_trace_line",
      "utils.test_trace_line",
      "utils.test_trace_line",
      "utils.test_trace_line.make_blank_tile",
      "utils.test_trace_line.make_blank_tile",
      "utils.test_trace_line.make_blank_tile",
      "utils.test_trace_line.make_blank_tile",
      "utils.test_trace_line.test_straight_line_unblocked",
      "utils.test_trace_line.test_straight_line_unblocked",
      "utils.test_trace_line.test_straight_line_unblocked",
      "utils.test_trace_line.test_straight_line_unblocked",
      "utils.test_trace_line.test_diagonal_line_with_blocking_tile",
      "utils.test_trace_line.test_diagonal_line_with_blocking_tile",
      "utils.test_trace_line.test_diagonal_line_with_blocking_tile",
      "utils.test_trace_line.test_diagonal_line_with_blocking_tile",
      "utils.test_trace_line.test_tile_with_blocking_thing",
      "utils.test_trace_line.test_tile_with_blocking_thing",
      "utils.test_trace_line.test_tile_with_blocking_thing",
      "utils.test_trace_line.test_tile_with_blocking_thing",
      "utils.test_trace_line.test_missing_tile_skipped",
      "utils.test_trace_line.test_missing_tile_skipped",
      "utils.test_trace_line.test_missing_tile_skipped",
      "utils.test_trace_line.test_missing_tile_skipped",
      "utils.test_visibility_penalty",
      "utils.test_visibility_penalty",
      "utils.test_visibility_penalty",
      "utils.test_visibility_penalty",
      "utils.test_visibility_penalty.make_tile_with_env",
      "utils.test_visibility_penalty.make_tile_with_env",
      "utils.test_visibility_penalty.make_tile_with_env",
      "utils.test_visibility_penalty.make_tile_with_env",
      "utils.test_visibility_penalty.test_no_environment_penalty",
      "utils.test_visibility_penalty.test_no_environment_penalty",
      "utils.test_visibility_penalty.test_no_environment_penalty",
      "utils.test_visibility_penalty.test_no_environment_penalty",
      "utils.test_visibility_penalty.test_single_fog_tile",
      "utils.test_visibility_penalty.test_single_fog_tile",
      "utils.test_visibility_penalty.test_single_fog_tile",
      "utils.test_visibility_penalty.test_single_fog_tile",
      "utils.test_visibility_penalty.test_multiple_penalty_sources",
      "utils.test_visibility_penalty.test_multiple_penalty_sources",
      "utils.test_visibility_penalty.test_multiple_penalty_sources",
      "utils.test_visibility_penalty.test_multiple_penalty_sources",
      "utils.test_visibility_penalty.test_missing_env_field",
      "utils.test_visibility_penalty.test_missing_env_field",
      "utils.test_visibility_penalty.test_missing_env_field",
      "utils.test_visibility_penalty.test_missing_env_field",
      "utils.test_visibility_penalty.test_empty_path",
      "utils.test_visibility_penalty.test_empty_path",
      "utils.test_visibility_penalty.test_empty_path",
      "utils.test_visibility_penalty.test_empty_path",
      "utils.test_visibility_penalty.test_invalid_path_type",
      "utils.test_visibility_penalty.test_invalid_path_type",
      "utils.test_visibility_penalty.test_invalid_path_type",
      "utils.test_visibility_penalty.test_invalid_path_type",
      "utils.test_visibility_penalty.test_step_not_dict",
      "utils.test_visibility_penalty.test_step_not_dict",
      "utils.test_visibility_penalty.test_step_not_dict",
      "utils.test_visibility_penalty.test_step_not_dict",
      "utils.test_visibility_penalty.test_missing_tile_dict",
      "utils.test_visibility_penalty.test_missing_tile_dict",
      "utils.test_visibility_penalty.test_missing_tile_dict",
      "utils.test_visibility_penalty.test_missing_tile_dict",
      "utils.test_visibility_penalty.test_env_not_list",
      "utils.test_visibility_penalty.test_env_not_list",
      "utils.test_visibility_penalty.test_env_not_list",
      "utils.test_visibility_penalty.test_env_not_list"
    ],
    "calls_fqns": [
      "utils.general_utils.bresenham_line",
      "utils.general_utils.validate_tags"
    ]
  },
  "utils.general_utils.compute_visibility_penalty_along_path": {
    "fqname": "utils.general_utils.compute_visibility_penalty_along_path",
    "type": "function",
    "description": "Given a traced path from `trace_line`, compute the cumulative visibility penalty",
    "tags": [],
    "source_file": "utils\\general_utils.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "utils.general_utils.compute_visibility_penalty_along_path",
      "module": "utils.general_utils",
      "name": "compute_visibility_penalty_along_path",
      "type": "function",
      "lineno": 121,
      "source_file": "utils\\general_utils.py",
      "description": "Given a traced path from `trace_line`, compute the cumulative visibility penalty",
      "docstring_full": "Given a traced path from `trace_line`, compute the cumulative visibility penalty\nfrom all environmental effects (e.g. fog, smoke, fire) on traversed tiles.\n\nThis function does not alter the path or interpret vision outcomes — it merely\nreturns the total penalty value for further evaluation.",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "traced_path"
        ],
        "returns": null
      }
    },
    "links": [
      {
        "target": "utils.general_utils.validate_tags",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.validate_tags",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.bresenham_line",
        "type": "calls"
      }
    ],
    "called_by_fqns": [
      "utils.test_visibility_penalty",
      "utils.test_visibility_penalty",
      "utils.test_visibility_penalty",
      "utils.test_visibility_penalty",
      "utils.test_visibility_penalty",
      "utils.test_visibility_penalty",
      "utils.test_visibility_penalty",
      "utils.test_visibility_penalty",
      "utils.test_visibility_penalty",
      "utils.test_visibility_penalty.make_tile_with_env",
      "utils.test_visibility_penalty.make_tile_with_env",
      "utils.test_visibility_penalty.make_tile_with_env",
      "utils.test_visibility_penalty.make_tile_with_env",
      "utils.test_visibility_penalty.make_tile_with_env",
      "utils.test_visibility_penalty.make_tile_with_env",
      "utils.test_visibility_penalty.make_tile_with_env",
      "utils.test_visibility_penalty.make_tile_with_env",
      "utils.test_visibility_penalty.make_tile_with_env",
      "utils.test_visibility_penalty.test_no_environment_penalty",
      "utils.test_visibility_penalty.test_no_environment_penalty",
      "utils.test_visibility_penalty.test_no_environment_penalty",
      "utils.test_visibility_penalty.test_no_environment_penalty",
      "utils.test_visibility_penalty.test_no_environment_penalty",
      "utils.test_visibility_penalty.test_no_environment_penalty",
      "utils.test_visibility_penalty.test_no_environment_penalty",
      "utils.test_visibility_penalty.test_no_environment_penalty",
      "utils.test_visibility_penalty.test_no_environment_penalty",
      "utils.test_visibility_penalty.test_single_fog_tile",
      "utils.test_visibility_penalty.test_single_fog_tile",
      "utils.test_visibility_penalty.test_single_fog_tile",
      "utils.test_visibility_penalty.test_single_fog_tile",
      "utils.test_visibility_penalty.test_single_fog_tile",
      "utils.test_visibility_penalty.test_single_fog_tile",
      "utils.test_visibility_penalty.test_single_fog_tile",
      "utils.test_visibility_penalty.test_single_fog_tile",
      "utils.test_visibility_penalty.test_single_fog_tile",
      "utils.test_visibility_penalty.test_multiple_penalty_sources",
      "utils.test_visibility_penalty.test_multiple_penalty_sources",
      "utils.test_visibility_penalty.test_multiple_penalty_sources",
      "utils.test_visibility_penalty.test_multiple_penalty_sources",
      "utils.test_visibility_penalty.test_multiple_penalty_sources",
      "utils.test_visibility_penalty.test_multiple_penalty_sources",
      "utils.test_visibility_penalty.test_multiple_penalty_sources",
      "utils.test_visibility_penalty.test_multiple_penalty_sources",
      "utils.test_visibility_penalty.test_multiple_penalty_sources",
      "utils.test_visibility_penalty.test_missing_env_field",
      "utils.test_visibility_penalty.test_missing_env_field",
      "utils.test_visibility_penalty.test_missing_env_field",
      "utils.test_visibility_penalty.test_missing_env_field",
      "utils.test_visibility_penalty.test_missing_env_field",
      "utils.test_visibility_penalty.test_missing_env_field",
      "utils.test_visibility_penalty.test_missing_env_field",
      "utils.test_visibility_penalty.test_missing_env_field",
      "utils.test_visibility_penalty.test_missing_env_field",
      "utils.test_visibility_penalty.test_empty_path",
      "utils.test_visibility_penalty.test_empty_path",
      "utils.test_visibility_penalty.test_empty_path",
      "utils.test_visibility_penalty.test_empty_path",
      "utils.test_visibility_penalty.test_empty_path",
      "utils.test_visibility_penalty.test_empty_path",
      "utils.test_visibility_penalty.test_empty_path",
      "utils.test_visibility_penalty.test_empty_path",
      "utils.test_visibility_penalty.test_empty_path",
      "utils.test_visibility_penalty.test_invalid_path_type",
      "utils.test_visibility_penalty.test_invalid_path_type",
      "utils.test_visibility_penalty.test_invalid_path_type",
      "utils.test_visibility_penalty.test_invalid_path_type",
      "utils.test_visibility_penalty.test_invalid_path_type",
      "utils.test_visibility_penalty.test_invalid_path_type",
      "utils.test_visibility_penalty.test_invalid_path_type",
      "utils.test_visibility_penalty.test_invalid_path_type",
      "utils.test_visibility_penalty.test_invalid_path_type",
      "utils.test_visibility_penalty.test_step_not_dict",
      "utils.test_visibility_penalty.test_step_not_dict",
      "utils.test_visibility_penalty.test_step_not_dict",
      "utils.test_visibility_penalty.test_step_not_dict",
      "utils.test_visibility_penalty.test_step_not_dict",
      "utils.test_visibility_penalty.test_step_not_dict",
      "utils.test_visibility_penalty.test_step_not_dict",
      "utils.test_visibility_penalty.test_step_not_dict",
      "utils.test_visibility_penalty.test_step_not_dict",
      "utils.test_visibility_penalty.test_missing_tile_dict",
      "utils.test_visibility_penalty.test_missing_tile_dict",
      "utils.test_visibility_penalty.test_missing_tile_dict",
      "utils.test_visibility_penalty.test_missing_tile_dict",
      "utils.test_visibility_penalty.test_missing_tile_dict",
      "utils.test_visibility_penalty.test_missing_tile_dict",
      "utils.test_visibility_penalty.test_missing_tile_dict",
      "utils.test_visibility_penalty.test_missing_tile_dict",
      "utils.test_visibility_penalty.test_missing_tile_dict",
      "utils.test_visibility_penalty.test_env_not_list",
      "utils.test_visibility_penalty.test_env_not_list",
      "utils.test_visibility_penalty.test_env_not_list",
      "utils.test_visibility_penalty.test_env_not_list",
      "utils.test_visibility_penalty.test_env_not_list",
      "utils.test_visibility_penalty.test_env_not_list",
      "utils.test_visibility_penalty.test_env_not_list",
      "utils.test_visibility_penalty.test_env_not_list",
      "utils.test_visibility_penalty.test_env_not_list"
    ],
    "calls_fqns": [
      "utils.general_utils.bresenham_line",
      "utils.general_utils.validate_tags"
    ]
  },
  "utils.general_utils.bresenham_line": {
    "fqname": "utils.general_utils.bresenham_line",
    "type": "function",
    "description": "Bresenham's line algorithm (integer-based, grid-safe)",
    "tags": [],
    "source_file": "utils\\general_utils.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "utils.general_utils.bresenham_line",
      "module": "utils.general_utils",
      "name": "bresenham_line",
      "type": "function",
      "lineno": 58,
      "source_file": "utils\\general_utils.py",
      "description": "Bresenham's line algorithm (integer-based, grid-safe)",
      "docstring_full": "Bresenham's line algorithm (integer-based, grid-safe)",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "x0",
          "y0",
          "x1",
          "y1"
        ],
        "returns": null
      }
    },
    "links": [
      {
        "target": "utils.general_utils.validate_tags",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.validate_tags",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.bresenham_line",
        "type": "calls"
      }
    ],
    "called_by_fqns": [
      "utils.general_utils",
      "utils.general_utils.validate_tags",
      "utils.general_utils.validate_all_tags",
      "utils.general_utils.trace_line",
      "utils.general_utils.compute_visibility_penalty_along_path",
      "utils.general_utils.bresenham_line"
    ],
    "calls_fqns": [
      "utils.general_utils.bresenham_line",
      "utils.general_utils.validate_tags"
    ]
  },
  "utils.initiative_queue": {
    "fqname": "utils.initiative_queue",
    "type": "module",
    "description": "",
    "tags": [],
    "source_file": "utils\\initiative_queue.py",
    "test_coverage": false,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "utils.initiative_queue",
      "module": "utils.initiative_queue",
      "name": "utils.initiative_queue",
      "type": "module",
      "lineno": 1,
      "source_file": "utils\\initiative_queue.py",
      "description": "",
      "docstring_full": "",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": false,
      "metadata": {}
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "utils.initiative_queue.initialize_initiative_queue": {
    "fqname": "utils.initiative_queue.initialize_initiative_queue",
    "type": "function",
    "description": "Placeholder for initializing the initiative queue from actors.",
    "tags": [],
    "source_file": "utils\\initiative_queue.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "utils.initiative_queue.initialize_initiative_queue",
      "module": "utils.initiative_queue",
      "name": "initialize_initiative_queue",
      "type": "function",
      "lineno": 4,
      "source_file": "utils\\initiative_queue.py",
      "description": "Placeholder for initializing the initiative queue from actors.",
      "docstring_full": "Placeholder for initializing the initiative queue from actors.\n\n@ignore: stub — turn logic not implemented",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "actors"
        ],
        "returns": null
      }
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "utils.initiative_queue.pop_next_actor": {
    "fqname": "utils.initiative_queue.pop_next_actor",
    "type": "function",
    "description": "Placeholder for retrieving the next actor to act.",
    "tags": [],
    "source_file": "utils\\initiative_queue.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "utils.initiative_queue.pop_next_actor",
      "module": "utils.initiative_queue",
      "name": "pop_next_actor",
      "type": "function",
      "lineno": 12,
      "source_file": "utils\\initiative_queue.py",
      "description": "Placeholder for retrieving the next actor to act.",
      "docstring_full": "Placeholder for retrieving the next actor to act.\n\n@ignore: stub — no timing or sorting logic yet",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "queue"
        ],
        "returns": null
      }
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "utils.initiative_queue.schedule_next_turn": {
    "fqname": "utils.initiative_queue.schedule_next_turn",
    "type": "function",
    "description": "Placeholder for rescheduling an actor's next turn.",
    "tags": [],
    "source_file": "utils\\initiative_queue.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "utils.initiative_queue.schedule_next_turn",
      "module": "utils.initiative_queue",
      "name": "schedule_next_turn",
      "type": "function",
      "lineno": 20,
      "source_file": "utils\\initiative_queue.py",
      "description": "Placeholder for rescheduling an actor's next turn.",
      "docstring_full": "Placeholder for rescheduling an actor's next turn.\n\n@ignore: stub — no cycle management yet",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "queue",
          "actor"
        ],
        "returns": null
      }
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "utils.inventory_utils": {
    "fqname": "utils.inventory_utils",
    "type": "module",
    "description": "",
    "tags": [],
    "source_file": "utils\\inventory_utils.py",
    "test_coverage": false,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "utils.inventory_utils",
      "module": "utils.inventory_utils",
      "name": "utils.inventory_utils",
      "type": "module",
      "lineno": 1,
      "source_file": "utils\\inventory_utils.py",
      "description": "",
      "docstring_full": "",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": false,
      "metadata": {}
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "utils.inventory_utils.add_item_to_inventory": {
    "fqname": "utils.inventory_utils.add_item_to_inventory",
    "type": "function",
    "description": "Placeholder for adding an item to the actor's inventory.",
    "tags": [],
    "source_file": "utils\\inventory_utils.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "utils.inventory_utils.add_item_to_inventory",
      "module": "utils.inventory_utils",
      "name": "add_item_to_inventory",
      "type": "function",
      "lineno": 4,
      "source_file": "utils\\inventory_utils.py",
      "description": "Placeholder for adding an item to the actor's inventory.",
      "docstring_full": "Placeholder for adding an item to the actor's inventory.\n\n@ignore: stub — inventory system not implemented",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "actor",
          "item"
        ],
        "returns": null
      }
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "utils.inventory_utils.remove_item_from_inventory": {
    "fqname": "utils.inventory_utils.remove_item_from_inventory",
    "type": "function",
    "description": "Placeholder for removing an item from inventory.",
    "tags": [],
    "source_file": "utils\\inventory_utils.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "utils.inventory_utils.remove_item_from_inventory",
      "module": "utils.inventory_utils",
      "name": "remove_item_from_inventory",
      "type": "function",
      "lineno": 12,
      "source_file": "utils\\inventory_utils.py",
      "description": "Placeholder for removing an item from inventory.",
      "docstring_full": "Placeholder for removing an item from inventory.\n\n@ignore: stub — item removal logic missing",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "actor",
          "item"
        ],
        "returns": null
      }
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "utils.inventory_utils.is_item_usable": {
    "fqname": "utils.inventory_utils.is_item_usable",
    "type": "function",
    "description": "Placeholder for checking item usability conditions.",
    "tags": [],
    "source_file": "utils\\inventory_utils.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "utils.inventory_utils.is_item_usable",
      "module": "utils.inventory_utils",
      "name": "is_item_usable",
      "type": "function",
      "lineno": 20,
      "source_file": "utils\\inventory_utils.py",
      "description": "Placeholder for checking item usability conditions.",
      "docstring_full": "Placeholder for checking item usability conditions.\n\n@ignore: stub — usage validation not present",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "item"
        ],
        "returns": null
      }
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "utils.loot_utils": {
    "fqname": "utils.loot_utils",
    "type": "module",
    "description": "",
    "tags": [],
    "source_file": "utils\\loot_utils.py",
    "test_coverage": false,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "utils.loot_utils",
      "module": "utils.loot_utils",
      "name": "utils.loot_utils",
      "type": "module",
      "lineno": 1,
      "source_file": "utils\\loot_utils.py",
      "description": "",
      "docstring_full": "",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": false,
      "metadata": {}
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "utils.loot_utils.roll_loot_table": {
    "fqname": "utils.loot_utils.roll_loot_table",
    "type": "function",
    "description": "Placeholder for rolling entries from a loot table.",
    "tags": [],
    "source_file": "utils\\loot_utils.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "utils.loot_utils.roll_loot_table",
      "module": "utils.loot_utils",
      "name": "roll_loot_table",
      "type": "function",
      "lineno": 4,
      "source_file": "utils\\loot_utils.py",
      "description": "Placeholder for rolling entries from a loot table.",
      "docstring_full": "Placeholder for rolling entries from a loot table.\n\n@ignore: stub — no loot system yet",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "table_id"
        ],
        "returns": null
      }
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "utils.loot_utils.drop_loot_to_room": {
    "fqname": "utils.loot_utils.drop_loot_to_room",
    "type": "function",
    "description": "Placeholder for distributing loot into a tactical room.",
    "tags": [],
    "source_file": "utils\\loot_utils.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "utils.loot_utils.drop_loot_to_room",
      "module": "utils.loot_utils",
      "name": "drop_loot_to_room",
      "type": "function",
      "lineno": 12,
      "source_file": "utils\\loot_utils.py",
      "description": "Placeholder for distributing loot into a tactical room.",
      "docstring_full": "Placeholder for distributing loot into a tactical room.\n\n@ignore: stub — item placement logic missing",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "room",
          "items"
        ],
        "returns": null
      }
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "utils.movement_utils": {
    "fqname": "utils.movement_utils",
    "type": "module",
    "description": "",
    "tags": [],
    "source_file": "utils\\movement_utils.py",
    "test_coverage": false,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "utils.movement_utils",
      "module": "utils.movement_utils",
      "name": "utils.movement_utils",
      "type": "module",
      "lineno": 1,
      "source_file": "utils\\movement_utils.py",
      "description": "",
      "docstring_full": "",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": false,
      "metadata": {}
    },
    "links": [
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.movement_utils.resolve_target_to_zone",
        "type": "calls"
      },
      {
        "target": "utils.movement_utils.find_path_between_zones",
        "type": "calls"
      },
      {
        "target": "utils.movement_utils.move_actor_to_zone",
        "type": "calls"
      },
      {
        "target": "utils.movement_utils.resolve_target_to_zone",
        "type": "calls"
      },
      {
        "target": "utils.movement_utils.find_path_between_zones",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.movement_utils.get_zone_by_feature",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.movement_utils.move_actor_to_zone",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      }
    ],
    "called_by_fqns": [],
    "calls_fqns": [
      "utils.debug_utils.debug",
      "utils.movement_utils.find_path_between_zones",
      "utils.movement_utils.get_zone_by_feature",
      "utils.movement_utils.move_actor_to_zone",
      "utils.movement_utils.resolve_target_to_zone"
    ]
  },
  "utils.movement_utils.move_actor_to_zone": {
    "fqname": "utils.movement_utils.move_actor_to_zone",
    "type": "function",
    "description": "🚶 Low-level zone transition function. Moves an actor from their current",
    "tags": [],
    "source_file": "utils\\movement_utils.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "utils.movement_utils.move_actor_to_zone",
      "module": "utils.movement_utils",
      "name": "move_actor_to_zone",
      "type": "function",
      "lineno": 28,
      "source_file": "utils\\movement_utils.py",
      "description": "🚶 Low-level zone transition function. Moves an actor from their current",
      "docstring_full": "🚶 Low-level zone transition function. Moves an actor from their current\nzone to an *adjacent* zone, with full validation.\n\nThis is the core atomic movement step, and is used by all higher-level\nmovement logic. It ensures:\n- The destination zone is adjacent to the current one\n- The actor is removed from the old zone and added to the new one\n- The actor's `current_zone` reference is updated\n\nParameters:\n- actor: any object with `.name` and `.current_zone`\n- destination_zone: Zone object\n\nReturns:\n- True if move succeeds\n- False if destination is not adjacent",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "actor",
          "destination_zone"
        ],
        "returns": null
      }
    },
    "links": [
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.movement_utils.resolve_target_to_zone",
        "type": "calls"
      },
      {
        "target": "utils.movement_utils.find_path_between_zones",
        "type": "calls"
      },
      {
        "target": "utils.movement_utils.move_actor_to_zone",
        "type": "calls"
      },
      {
        "target": "utils.movement_utils.resolve_target_to_zone",
        "type": "calls"
      },
      {
        "target": "utils.movement_utils.find_path_between_zones",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.movement_utils.get_zone_by_feature",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.movement_utils.move_actor_to_zone",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      }
    ],
    "called_by_fqns": [
      "utils.movement_utils",
      "utils.movement_utils",
      "utils.movement_utils.move_actor_to_zone",
      "utils.movement_utils.move_actor_to_zone",
      "utils.movement_utils.get_zone_by_feature",
      "utils.movement_utils.get_zone_by_feature",
      "utils.movement_utils.resolve_target_to_zone",
      "utils.movement_utils.resolve_target_to_zone",
      "utils.movement_utils.find_path_between_zones",
      "utils.movement_utils.find_path_between_zones",
      "utils.movement_utils.distance_between_zones",
      "utils.movement_utils.distance_between_zones",
      "utils.movement_utils.move_actor_toward_target",
      "utils.movement_utils.move_actor_toward_target",
      "utils.movement_utils.start_movement_to_target",
      "utils.movement_utils.start_movement_to_target",
      "utils.movement_utils.advance_actor_movement",
      "utils.movement_utils.advance_actor_movement"
    ],
    "calls_fqns": [
      "utils.debug_utils.debug",
      "utils.movement_utils.find_path_between_zones",
      "utils.movement_utils.get_zone_by_feature",
      "utils.movement_utils.move_actor_to_zone",
      "utils.movement_utils.resolve_target_to_zone"
    ]
  },
  "utils.movement_utils.get_zone_by_feature": {
    "fqname": "utils.movement_utils.get_zone_by_feature",
    "type": "function",
    "description": "Resolves a string like \"broken pillar\" or \"pile of crates\"",
    "tags": [],
    "source_file": "utils\\movement_utils.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "utils.movement_utils.get_zone_by_feature",
      "module": "utils.movement_utils",
      "name": "get_zone_by_feature",
      "type": "function",
      "lineno": 68,
      "source_file": "utils\\movement_utils.py",
      "description": "Resolves a string like \"broken pillar\" or \"pile of crates\"",
      "docstring_full": "Resolves a string like \"broken pillar\" or \"pile of crates\"\nto the first Zone in the room that contains that feature.\n\nParameters:\n- room: Room object containing zones\n- feature_string: exact string to match in zone.features\n\nReturns:\n- Zone object if found\n- None if not found",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "room",
          "feature_string"
        ],
        "returns": null
      }
    },
    "links": [
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.movement_utils.resolve_target_to_zone",
        "type": "calls"
      },
      {
        "target": "utils.movement_utils.find_path_between_zones",
        "type": "calls"
      },
      {
        "target": "utils.movement_utils.move_actor_to_zone",
        "type": "calls"
      },
      {
        "target": "utils.movement_utils.resolve_target_to_zone",
        "type": "calls"
      },
      {
        "target": "utils.movement_utils.find_path_between_zones",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.movement_utils.get_zone_by_feature",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.movement_utils.move_actor_to_zone",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      }
    ],
    "called_by_fqns": [
      "utils.movement_utils",
      "utils.movement_utils.move_actor_to_zone",
      "utils.movement_utils.get_zone_by_feature",
      "utils.movement_utils.resolve_target_to_zone",
      "utils.movement_utils.find_path_between_zones",
      "utils.movement_utils.distance_between_zones",
      "utils.movement_utils.move_actor_toward_target",
      "utils.movement_utils.start_movement_to_target",
      "utils.movement_utils.advance_actor_movement"
    ],
    "calls_fqns": [
      "utils.debug_utils.debug",
      "utils.movement_utils.find_path_between_zones",
      "utils.movement_utils.get_zone_by_feature",
      "utils.movement_utils.move_actor_to_zone",
      "utils.movement_utils.resolve_target_to_zone"
    ]
  },
  "utils.movement_utils.resolve_target_to_zone": {
    "fqname": "utils.movement_utils.resolve_target_to_zone",
    "type": "function",
    "description": "Resolves any navigation target to a Zone.",
    "tags": [],
    "source_file": "utils\\movement_utils.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "utils.movement_utils.resolve_target_to_zone",
      "module": "utils.movement_utils",
      "name": "resolve_target_to_zone",
      "type": "function",
      "lineno": 88,
      "source_file": "utils\\movement_utils.py",
      "description": "Resolves any navigation target to a Zone.",
      "docstring_full": "Resolves any navigation target to a Zone.\n\nAccepted target types:\n- str: treated as a feature name\n- any object with `.current_zone`: treated as an actor\n\nParameters:\n- target: str or actor object\n- room: Room object used for feature resolution\n\nReturns:\n- Zone object or None",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "target",
          "room"
        ],
        "returns": null
      }
    },
    "links": [
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.movement_utils.resolve_target_to_zone",
        "type": "calls"
      },
      {
        "target": "utils.movement_utils.find_path_between_zones",
        "type": "calls"
      },
      {
        "target": "utils.movement_utils.move_actor_to_zone",
        "type": "calls"
      },
      {
        "target": "utils.movement_utils.resolve_target_to_zone",
        "type": "calls"
      },
      {
        "target": "utils.movement_utils.find_path_between_zones",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.movement_utils.get_zone_by_feature",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.movement_utils.move_actor_to_zone",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      }
    ],
    "called_by_fqns": [
      "utils.movement_utils",
      "utils.movement_utils",
      "utils.movement_utils.move_actor_to_zone",
      "utils.movement_utils.move_actor_to_zone",
      "utils.movement_utils.get_zone_by_feature",
      "utils.movement_utils.get_zone_by_feature",
      "utils.movement_utils.resolve_target_to_zone",
      "utils.movement_utils.resolve_target_to_zone",
      "utils.movement_utils.find_path_between_zones",
      "utils.movement_utils.find_path_between_zones",
      "utils.movement_utils.distance_between_zones",
      "utils.movement_utils.distance_between_zones",
      "utils.movement_utils.move_actor_toward_target",
      "utils.movement_utils.move_actor_toward_target",
      "utils.movement_utils.start_movement_to_target",
      "utils.movement_utils.start_movement_to_target",
      "utils.movement_utils.advance_actor_movement",
      "utils.movement_utils.advance_actor_movement"
    ],
    "calls_fqns": [
      "utils.debug_utils.debug",
      "utils.movement_utils.find_path_between_zones",
      "utils.movement_utils.get_zone_by_feature",
      "utils.movement_utils.move_actor_to_zone",
      "utils.movement_utils.resolve_target_to_zone"
    ]
  },
  "utils.movement_utils.find_path_between_zones": {
    "fqname": "utils.movement_utils.find_path_between_zones",
    "type": "function",
    "description": "Returns a list of zones connecting start_zone to target_zone",
    "tags": [],
    "source_file": "utils\\movement_utils.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "utils.movement_utils.find_path_between_zones",
      "module": "utils.movement_utils",
      "name": "find_path_between_zones",
      "type": "function",
      "lineno": 114,
      "source_file": "utils\\movement_utils.py",
      "description": "Returns a list of zones connecting start_zone to target_zone",
      "docstring_full": "Returns a list of zones connecting start_zone to target_zone\nusing breadth-first search.\n\nThis allows navigation across multi-zone rooms based on connectivity.\n\nReturns:\n- List of Zone objects [start, ..., target]\n- Empty list if no valid path exists",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "start_zone",
          "target_zone"
        ],
        "returns": null
      }
    },
    "links": [
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.movement_utils.resolve_target_to_zone",
        "type": "calls"
      },
      {
        "target": "utils.movement_utils.find_path_between_zones",
        "type": "calls"
      },
      {
        "target": "utils.movement_utils.move_actor_to_zone",
        "type": "calls"
      },
      {
        "target": "utils.movement_utils.resolve_target_to_zone",
        "type": "calls"
      },
      {
        "target": "utils.movement_utils.find_path_between_zones",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.movement_utils.get_zone_by_feature",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.movement_utils.move_actor_to_zone",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      }
    ],
    "called_by_fqns": [
      "utils.movement_utils",
      "utils.movement_utils",
      "utils.movement_utils.move_actor_to_zone",
      "utils.movement_utils.move_actor_to_zone",
      "utils.movement_utils.get_zone_by_feature",
      "utils.movement_utils.get_zone_by_feature",
      "utils.movement_utils.resolve_target_to_zone",
      "utils.movement_utils.resolve_target_to_zone",
      "utils.movement_utils.find_path_between_zones",
      "utils.movement_utils.find_path_between_zones",
      "utils.movement_utils.distance_between_zones",
      "utils.movement_utils.distance_between_zones",
      "utils.movement_utils.move_actor_toward_target",
      "utils.movement_utils.move_actor_toward_target",
      "utils.movement_utils.start_movement_to_target",
      "utils.movement_utils.start_movement_to_target",
      "utils.movement_utils.advance_actor_movement",
      "utils.movement_utils.advance_actor_movement"
    ],
    "calls_fqns": [
      "utils.debug_utils.debug",
      "utils.movement_utils.find_path_between_zones",
      "utils.movement_utils.get_zone_by_feature",
      "utils.movement_utils.move_actor_to_zone",
      "utils.movement_utils.resolve_target_to_zone"
    ]
  },
  "utils.movement_utils.distance_between_zones": {
    "fqname": "utils.movement_utils.distance_between_zones",
    "type": "function",
    "description": "Returns the number of hops between two zones using breadth-first search.",
    "tags": [],
    "source_file": "utils\\movement_utils.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "utils.movement_utils.distance_between_zones",
      "module": "utils.movement_utils",
      "name": "distance_between_zones",
      "type": "function",
      "lineno": 150,
      "source_file": "utils\\movement_utils.py",
      "description": "Returns the number of hops between two zones using breadth-first search.",
      "docstring_full": "Returns the number of hops between two zones using breadth-first search.\nIf no path exists (e.g. blocked or disconnected), returns None.",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "start_zone",
          "target_zone"
        ],
        "returns": null
      }
    },
    "links": [
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.movement_utils.resolve_target_to_zone",
        "type": "calls"
      },
      {
        "target": "utils.movement_utils.find_path_between_zones",
        "type": "calls"
      },
      {
        "target": "utils.movement_utils.move_actor_to_zone",
        "type": "calls"
      },
      {
        "target": "utils.movement_utils.resolve_target_to_zone",
        "type": "calls"
      },
      {
        "target": "utils.movement_utils.find_path_between_zones",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.movement_utils.get_zone_by_feature",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.movement_utils.move_actor_to_zone",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      }
    ],
    "called_by_fqns": [
      "utils.visibility_utils",
      "utils.visibility_utils.get_visibility_caps",
      "utils.visibility_utils.visual_coverage",
      "utils.visibility_utils.observe",
      "utils.visibility_utils.trace_visibility_path",
      "utils.visibility_utils.compute_visibility_penalty_along_path"
    ],
    "calls_fqns": [
      "utils.debug_utils.debug",
      "utils.movement_utils.find_path_between_zones",
      "utils.movement_utils.get_zone_by_feature",
      "utils.movement_utils.move_actor_to_zone",
      "utils.movement_utils.resolve_target_to_zone"
    ]
  },
  "utils.movement_utils.move_actor_toward_target": {
    "fqname": "utils.movement_utils.move_actor_toward_target",
    "type": "function",
    "description": "Generalized movement function that handles:",
    "tags": [],
    "source_file": "utils\\movement_utils.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "utils.movement_utils.move_actor_toward_target",
      "module": "utils.movement_utils",
      "name": "move_actor_toward_target",
      "type": "function",
      "lineno": 179,
      "source_file": "utils\\movement_utils.py",
      "description": "Generalized movement function that handles:",
      "docstring_full": "Generalized movement function that handles:\n- Moving toward a feature (str)\n- Moving toward another actor\n\nIt resolves the target to a destination zone, computes the shortest\npath from the actor's current zone, and moves one step toward it.\n\nThis enables natural language-style inputs:\n- \"move to pile of crates\"\n- \"approach the automaton\"\n\nMovement is only one step per call to enforce tactical pacing.\n\nParameters:\n- actor: object with .name and .current_zone\n- room: Room object the actor is in\n- target: str (feature) or object with .current_zone\n\nReturns:\n- True if movement occurred\n- False if move invalid, unreachable, or already there",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "actor",
          "room",
          "target"
        ],
        "returns": null
      }
    },
    "links": [
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.movement_utils.resolve_target_to_zone",
        "type": "calls"
      },
      {
        "target": "utils.movement_utils.find_path_between_zones",
        "type": "calls"
      },
      {
        "target": "utils.movement_utils.move_actor_to_zone",
        "type": "calls"
      },
      {
        "target": "utils.movement_utils.resolve_target_to_zone",
        "type": "calls"
      },
      {
        "target": "utils.movement_utils.find_path_between_zones",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.movement_utils.get_zone_by_feature",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.movement_utils.move_actor_to_zone",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      }
    ],
    "called_by_fqns": [],
    "calls_fqns": [
      "utils.debug_utils.debug",
      "utils.movement_utils.find_path_between_zones",
      "utils.movement_utils.get_zone_by_feature",
      "utils.movement_utils.move_actor_to_zone",
      "utils.movement_utils.resolve_target_to_zone"
    ]
  },
  "utils.movement_utils.start_movement_to_target": {
    "fqname": "utils.movement_utils.start_movement_to_target",
    "type": "function",
    "description": "Initializes multi-turn movement toward a feature or actor.",
    "tags": [],
    "source_file": "utils\\movement_utils.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "utils.movement_utils.start_movement_to_target",
      "module": "utils.movement_utils",
      "name": "start_movement_to_target",
      "type": "function",
      "lineno": 220,
      "source_file": "utils\\movement_utils.py",
      "description": "Initializes multi-turn movement toward a feature or actor.",
      "docstring_full": "Initializes multi-turn movement toward a feature or actor.\nStores the zone path in actor.movement_path.\n\nThis replaces immediate movement — nothing happens this turn,\nbut actor is now committed to a path.\n\nParameters:\n- actor: actor object\n- room: the current Room\n- target: feature string or another actor\n\nReturns:\n- True if movement path created\n- False if target invalid or unreachable",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "actor",
          "room",
          "target"
        ],
        "returns": null
      }
    },
    "links": [
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.movement_utils.resolve_target_to_zone",
        "type": "calls"
      },
      {
        "target": "utils.movement_utils.find_path_between_zones",
        "type": "calls"
      },
      {
        "target": "utils.movement_utils.move_actor_to_zone",
        "type": "calls"
      },
      {
        "target": "utils.movement_utils.resolve_target_to_zone",
        "type": "calls"
      },
      {
        "target": "utils.movement_utils.find_path_between_zones",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.movement_utils.get_zone_by_feature",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.movement_utils.move_actor_to_zone",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      }
    ],
    "called_by_fqns": [],
    "calls_fqns": [
      "utils.debug_utils.debug",
      "utils.movement_utils.find_path_between_zones",
      "utils.movement_utils.get_zone_by_feature",
      "utils.movement_utils.move_actor_to_zone",
      "utils.movement_utils.resolve_target_to_zone"
    ]
  },
  "utils.movement_utils.advance_actor_movement": {
    "fqname": "utils.movement_utils.advance_actor_movement",
    "type": "function",
    "description": "Advances movement along actor's movement_path by one turn.",
    "tags": [],
    "source_file": "utils\\movement_utils.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "utils.movement_utils.advance_actor_movement",
      "module": "utils.movement_utils",
      "name": "advance_actor_movement",
      "type": "function",
      "lineno": 252,
      "source_file": "utils\\movement_utils.py",
      "description": "Advances movement along actor's movement_path by one turn.",
      "docstring_full": "Advances movement along actor's movement_path by one turn.\n- Adds 1 to progress\n- Moves to next zone when cost is met\n- Resets progress\n- Continues until path is empty\n\nReturns:\n- True if actor moved to a new zone this turn\n- False if still progressing or path empty",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "actor"
        ],
        "returns": null
      }
    },
    "links": [
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.movement_utils.resolve_target_to_zone",
        "type": "calls"
      },
      {
        "target": "utils.movement_utils.find_path_between_zones",
        "type": "calls"
      },
      {
        "target": "utils.movement_utils.move_actor_to_zone",
        "type": "calls"
      },
      {
        "target": "utils.movement_utils.resolve_target_to_zone",
        "type": "calls"
      },
      {
        "target": "utils.movement_utils.find_path_between_zones",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.movement_utils.get_zone_by_feature",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.movement_utils.move_actor_to_zone",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      }
    ],
    "called_by_fqns": [],
    "calls_fqns": [
      "utils.debug_utils.debug",
      "utils.movement_utils.find_path_between_zones",
      "utils.movement_utils.get_zone_by_feature",
      "utils.movement_utils.move_actor_to_zone",
      "utils.movement_utils.resolve_target_to_zone"
    ]
  },
  "utils.npc_ai": {
    "fqname": "utils.npc_ai",
    "type": "module",
    "description": "",
    "tags": [],
    "source_file": "utils\\npc_ai.py",
    "test_coverage": false,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "utils.npc_ai",
      "module": "utils.npc_ai",
      "name": "utils.npc_ai",
      "type": "module",
      "lineno": 1,
      "source_file": "utils\\npc_ai.py",
      "description": "",
      "docstring_full": "",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": false,
      "metadata": {}
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "utils.npc_ai.handle_npc_action": {
    "fqname": "utils.npc_ai.handle_npc_action",
    "type": "function",
    "description": "Placeholder for executing a turn for an NPC.",
    "tags": [],
    "source_file": "utils\\npc_ai.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "utils.npc_ai.handle_npc_action",
      "module": "utils.npc_ai",
      "name": "handle_npc_action",
      "type": "function",
      "lineno": 5,
      "source_file": "utils\\npc_ai.py",
      "description": "Placeholder for executing a turn for an NPC.",
      "docstring_full": "Placeholder for executing a turn for an NPC.\n\n@ignore: stub — AI loop not implemented",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "npc"
        ],
        "returns": null
      }
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "utils.npc_ai.choose_npc_action": {
    "fqname": "utils.npc_ai.choose_npc_action",
    "type": "function",
    "description": "Placeholder for selecting an NPC action.",
    "tags": [],
    "source_file": "utils\\npc_ai.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "utils.npc_ai.choose_npc_action",
      "module": "utils.npc_ai",
      "name": "choose_npc_action",
      "type": "function",
      "lineno": 13,
      "source_file": "utils\\npc_ai.py",
      "description": "Placeholder for selecting an NPC action.",
      "docstring_full": "Placeholder for selecting an NPC action.\n\n@ignore: stub — decision logic deferred",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "npc"
        ],
        "returns": null
      }
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "utils.npc_ai.npc_can_see_player": {
    "fqname": "utils.npc_ai.npc_can_see_player",
    "type": "function",
    "description": "Placeholder for visibility logic between NPC and player.",
    "tags": [],
    "source_file": "utils\\npc_ai.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "utils.npc_ai.npc_can_see_player",
      "module": "utils.npc_ai",
      "name": "npc_can_see_player",
      "type": "function",
      "lineno": 21,
      "source_file": "utils\\npc_ai.py",
      "description": "Placeholder for visibility logic between NPC and player.",
      "docstring_full": "Placeholder for visibility logic between NPC and player.\n\n@ignore: stub — perception loop missing",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "npc",
          "player"
        ],
        "returns": null
      }
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "utils.skills_utils": {
    "fqname": "utils.skills_utils",
    "type": "module",
    "description": "",
    "tags": [],
    "source_file": "utils\\skills_utils.py",
    "test_coverage": false,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "utils.skills_utils",
      "module": "utils.skills_utils",
      "name": "utils.skills_utils",
      "type": "module",
      "lineno": 1,
      "source_file": "utils\\skills_utils.py",
      "description": "",
      "docstring_full": "",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": false,
      "metadata": {}
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "utils.skills_utils.tick_skill_progression": {
    "fqname": "utils.skills_utils.tick_skill_progression",
    "type": "function",
    "description": "Placeholder for advancing passive skill timers.",
    "tags": [],
    "source_file": "utils\\skills_utils.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "utils.skills_utils.tick_skill_progression",
      "module": "utils.skills_utils",
      "name": "tick_skill_progression",
      "type": "function",
      "lineno": 4,
      "source_file": "utils\\skills_utils.py",
      "description": "Placeholder for advancing passive skill timers.",
      "docstring_full": "Placeholder for advancing passive skill timers.\n\n@ignore: stub — time-based skill gains not implemented",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "actor"
        ],
        "returns": null
      }
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "utils.skills_utils.get_skill_modifier": {
    "fqname": "utils.skills_utils.get_skill_modifier",
    "type": "function",
    "description": "Placeholder for computing stat bonus from skill.",
    "tags": [],
    "source_file": "utils\\skills_utils.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "utils.skills_utils.get_skill_modifier",
      "module": "utils.skills_utils",
      "name": "get_skill_modifier",
      "type": "function",
      "lineno": 12,
      "source_file": "utils\\skills_utils.py",
      "description": "Placeholder for computing stat bonus from skill.",
      "docstring_full": "Placeholder for computing stat bonus from skill.\n\n@ignore: stub — no lookup logic wired",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "actor",
          "skill_id"
        ],
        "returns": null
      }
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "utils.skills_utils.add_skill_xp": {
    "fqname": "utils.skills_utils.add_skill_xp",
    "type": "function",
    "description": "Placeholder for incrementing raw skill XP.",
    "tags": [],
    "source_file": "utils\\skills_utils.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "utils.skills_utils.add_skill_xp",
      "module": "utils.skills_utils",
      "name": "add_skill_xp",
      "type": "function",
      "lineno": 20,
      "source_file": "utils\\skills_utils.py",
      "description": "Placeholder for incrementing raw skill XP.",
      "docstring_full": "Placeholder for incrementing raw skill XP.\n\n@ignore: stub — skill injection not functional",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "actor",
          "skill_id",
          "xp"
        ],
        "returns": null
      }
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "utils.skill_xp_utils": {
    "fqname": "utils.skill_xp_utils",
    "type": "module",
    "description": "",
    "tags": [],
    "source_file": "utils\\skill_xp_utils.py",
    "test_coverage": false,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "utils.skill_xp_utils",
      "module": "utils.skill_xp_utils",
      "name": "utils.skill_xp_utils",
      "type": "module",
      "lineno": 1,
      "source_file": "utils\\skill_xp_utils.py",
      "description": "",
      "docstring_full": "",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": false,
      "metadata": {}
    },
    "links": [
      {
        "target": "definitions.actor.initialize_skill_if_missing",
        "type": "calls"
      },
      {
        "target": "helpers.actor_helpers.initialize_skill_if_missing",
        "type": "calls"
      },
      {
        "target": "definitions.actor.initialize_technique_if_missing",
        "type": "calls"
      },
      {
        "target": "helpers.actor_helpers.initialize_technique_if_missing",
        "type": "calls"
      },
      {
        "target": "utils.skill_xp_utils._check_level_up",
        "type": "calls"
      },
      {
        "target": "utils.skill_xp_utils._check_level_up",
        "type": "calls"
      },
      {
        "target": "utils.skill_xp_utils._tags_match",
        "type": "calls"
      }
    ],
    "called_by_fqns": [],
    "calls_fqns": [
      "definitions.actor.initialize_skill_if_missing",
      "definitions.actor.initialize_technique_if_missing",
      "helpers.actor_helpers.initialize_skill_if_missing",
      "helpers.actor_helpers.initialize_technique_if_missing",
      "utils.skill_xp_utils._check_level_up",
      "utils.skill_xp_utils._tags_match"
    ]
  },
  "utils.skill_xp_utils.track_xp_gain": {
    "fqname": "utils.skill_xp_utils.track_xp_gain",
    "type": "function",
    "description": "Distributes XP to matching skills and techniques.",
    "tags": [],
    "source_file": "utils\\skill_xp_utils.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "utils.skill_xp_utils.track_xp_gain",
      "module": "utils.skill_xp_utils",
      "name": "track_xp_gain",
      "type": "function",
      "lineno": 7,
      "source_file": "utils\\skill_xp_utils.py",
      "description": "Distributes XP to matching skills and techniques.",
      "docstring_full": "Distributes XP to matching skills and techniques.\n\nAutomatically initializes skills/techniques if needed.\n\nXP gain is flat per success. Level-up is probabilistic.",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "actor",
          "tags"
        ],
        "returns": null
      }
    },
    "links": [
      {
        "target": "definitions.actor.initialize_skill_if_missing",
        "type": "calls"
      },
      {
        "target": "helpers.actor_helpers.initialize_skill_if_missing",
        "type": "calls"
      },
      {
        "target": "definitions.actor.initialize_technique_if_missing",
        "type": "calls"
      },
      {
        "target": "helpers.actor_helpers.initialize_technique_if_missing",
        "type": "calls"
      },
      {
        "target": "utils.skill_xp_utils._check_level_up",
        "type": "calls"
      },
      {
        "target": "utils.skill_xp_utils._check_level_up",
        "type": "calls"
      },
      {
        "target": "utils.skill_xp_utils._tags_match",
        "type": "calls"
      }
    ],
    "called_by_fqns": [
      "flow.action_flow",
      "flow.action_flow.run_action_phase"
    ],
    "calls_fqns": [
      "definitions.actor.initialize_skill_if_missing",
      "definitions.actor.initialize_technique_if_missing",
      "helpers.actor_helpers.initialize_skill_if_missing",
      "helpers.actor_helpers.initialize_technique_if_missing",
      "utils.skill_xp_utils._check_level_up",
      "utils.skill_xp_utils._tags_match"
    ]
  },
  "utils.skill_xp_utils._tags_match": {
    "fqname": "utils.skill_xp_utils._tags_match",
    "type": "function",
    "description": "Returns True if any of the required tags are found in the observed list.",
    "tags": [],
    "source_file": "utils\\skill_xp_utils.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "utils.skill_xp_utils._tags_match",
      "module": "utils.skill_xp_utils",
      "name": "_tags_match",
      "type": "function",
      "lineno": 45,
      "source_file": "utils\\skill_xp_utils.py",
      "description": "Returns True if any of the required tags are found in the observed list.",
      "docstring_full": "Returns True if any of the required tags are found in the observed list.",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "observed",
          "required"
        ],
        "returns": null
      }
    },
    "links": [
      {
        "target": "definitions.actor.initialize_skill_if_missing",
        "type": "calls"
      },
      {
        "target": "helpers.actor_helpers.initialize_skill_if_missing",
        "type": "calls"
      },
      {
        "target": "definitions.actor.initialize_technique_if_missing",
        "type": "calls"
      },
      {
        "target": "helpers.actor_helpers.initialize_technique_if_missing",
        "type": "calls"
      },
      {
        "target": "utils.skill_xp_utils._check_level_up",
        "type": "calls"
      },
      {
        "target": "utils.skill_xp_utils._check_level_up",
        "type": "calls"
      },
      {
        "target": "utils.skill_xp_utils._tags_match",
        "type": "calls"
      }
    ],
    "called_by_fqns": [
      "utils.skill_xp_utils",
      "utils.skill_xp_utils.track_xp_gain",
      "utils.skill_xp_utils._tags_match",
      "utils.skill_xp_utils._check_level_up"
    ],
    "calls_fqns": [
      "definitions.actor.initialize_skill_if_missing",
      "definitions.actor.initialize_technique_if_missing",
      "helpers.actor_helpers.initialize_skill_if_missing",
      "helpers.actor_helpers.initialize_technique_if_missing",
      "utils.skill_xp_utils._check_level_up",
      "utils.skill_xp_utils._tags_match"
    ]
  },
  "utils.skill_xp_utils._check_level_up": {
    "fqname": "utils.skill_xp_utils._check_level_up",
    "type": "function",
    "description": "Performs a probabilistic level-up check for the given skill or technique block.",
    "tags": [],
    "source_file": "utils\\skill_xp_utils.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "utils.skill_xp_utils._check_level_up",
      "module": "utils.skill_xp_utils",
      "name": "_check_level_up",
      "type": "function",
      "lineno": 56,
      "source_file": "utils\\skill_xp_utils.py",
      "description": "Performs a probabilistic level-up check for the given skill or technique block.",
      "docstring_full": "Performs a probabilistic level-up check for the given skill or technique block.\nXP is preserved. Visibility is granted on first level.",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "block"
        ],
        "returns": null
      }
    },
    "links": [
      {
        "target": "definitions.actor.initialize_skill_if_missing",
        "type": "calls"
      },
      {
        "target": "helpers.actor_helpers.initialize_skill_if_missing",
        "type": "calls"
      },
      {
        "target": "definitions.actor.initialize_technique_if_missing",
        "type": "calls"
      },
      {
        "target": "helpers.actor_helpers.initialize_technique_if_missing",
        "type": "calls"
      },
      {
        "target": "utils.skill_xp_utils._check_level_up",
        "type": "calls"
      },
      {
        "target": "utils.skill_xp_utils._check_level_up",
        "type": "calls"
      },
      {
        "target": "utils.skill_xp_utils._tags_match",
        "type": "calls"
      }
    ],
    "called_by_fqns": [
      "utils.skill_xp_utils",
      "utils.skill_xp_utils",
      "utils.skill_xp_utils.track_xp_gain",
      "utils.skill_xp_utils.track_xp_gain",
      "utils.skill_xp_utils._tags_match",
      "utils.skill_xp_utils._tags_match",
      "utils.skill_xp_utils._check_level_up",
      "utils.skill_xp_utils._check_level_up"
    ],
    "calls_fqns": [
      "definitions.actor.initialize_skill_if_missing",
      "definitions.actor.initialize_technique_if_missing",
      "helpers.actor_helpers.initialize_skill_if_missing",
      "helpers.actor_helpers.initialize_technique_if_missing",
      "utils.skill_xp_utils._check_level_up",
      "utils.skill_xp_utils._tags_match"
    ]
  },
  "utils.status_effects": {
    "fqname": "utils.status_effects",
    "type": "module",
    "description": "",
    "tags": [],
    "source_file": "utils\\status_effects.py",
    "test_coverage": false,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "utils.status_effects",
      "module": "utils.status_effects",
      "name": "utils.status_effects",
      "type": "module",
      "lineno": 1,
      "source_file": "utils\\status_effects.py",
      "description": "",
      "docstring_full": "",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": false,
      "metadata": {}
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "utils.status_effects.apply_status_effects": {
    "fqname": "utils.status_effects.apply_status_effects",
    "type": "function",
    "description": "Placeholder for applying all active effects on actor.",
    "tags": [],
    "source_file": "utils\\status_effects.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "utils.status_effects.apply_status_effects",
      "module": "utils.status_effects",
      "name": "apply_status_effects",
      "type": "function",
      "lineno": 4,
      "source_file": "utils\\status_effects.py",
      "description": "Placeholder for applying all active effects on actor.",
      "docstring_full": "Placeholder for applying all active effects on actor.\n\n@ignore: stub — effect resolution system missing",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "actor"
        ],
        "returns": null
      }
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "utils.status_effects.tick_status_effects": {
    "fqname": "utils.status_effects.tick_status_effects",
    "type": "function",
    "description": "Placeholder for decrementing durations on active effects.",
    "tags": [],
    "source_file": "utils\\status_effects.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "utils.status_effects.tick_status_effects",
      "module": "utils.status_effects",
      "name": "tick_status_effects",
      "type": "function",
      "lineno": 12,
      "source_file": "utils\\status_effects.py",
      "description": "Placeholder for decrementing durations on active effects.",
      "docstring_full": "Placeholder for decrementing durations on active effects.\n\n@ignore: stub — ticking engine not in place",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "actor"
        ],
        "returns": null
      }
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "utils.status_effects.add_effect": {
    "fqname": "utils.status_effects.add_effect",
    "type": "function",
    "description": "Placeholder for applying a new effect to an actor.",
    "tags": [],
    "source_file": "utils\\status_effects.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "utils.status_effects.add_effect",
      "module": "utils.status_effects",
      "name": "add_effect",
      "type": "function",
      "lineno": 20,
      "source_file": "utils\\status_effects.py",
      "description": "Placeholder for applying a new effect to an actor.",
      "docstring_full": "Placeholder for applying a new effect to an actor.\n\n@ignore: stub — effect injection logic not present",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "actor",
          "effect_dict"
        ],
        "returns": null
      }
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "utils.technique_mutation_utils": {
    "fqname": "utils.technique_mutation_utils",
    "type": "module",
    "description": "",
    "tags": [],
    "source_file": "utils\\technique_mutation_utils.py",
    "test_coverage": false,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "utils.technique_mutation_utils",
      "module": "utils.technique_mutation_utils",
      "name": "utils.technique_mutation_utils",
      "type": "module",
      "lineno": 1,
      "source_file": "utils\\technique_mutation_utils.py",
      "description": "",
      "docstring_full": "",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": false,
      "metadata": {}
    },
    "links": [
      {
        "target": "utils.technique_mutation_utils.available_effects",
        "type": "calls"
      },
      {
        "target": "utils.technique_mutation_utils.available_effects",
        "type": "calls"
      }
    ],
    "called_by_fqns": [],
    "calls_fqns": [
      "utils.technique_mutation_utils.available_effects"
    ]
  },
  "utils.technique_mutation_utils.generate_evolution_offer": {
    "fqname": "utils.technique_mutation_utils.generate_evolution_offer",
    "type": "function",
    "description": "Given a technique dict, returns 4 possible evolution choices:",
    "tags": [],
    "source_file": "utils\\technique_mutation_utils.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "utils.technique_mutation_utils.generate_evolution_offer",
      "module": "utils.technique_mutation_utils",
      "name": "generate_evolution_offer",
      "type": "function",
      "lineno": 12,
      "source_file": "utils\\technique_mutation_utils.py",
      "description": "Given a technique dict, returns 4 possible evolution choices:",
      "docstring_full": "Given a technique dict, returns 4 possible evolution choices:\n- Add effect (if legal)\n- Replace effect\n- Change modifier (if any)\n- Bank offer\n\nThe rarity parameter influences the subcomponent weights.",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "base_technique",
          "rarity"
        ],
        "returns": null
      }
    },
    "links": [
      {
        "target": "utils.technique_mutation_utils.available_effects",
        "type": "calls"
      },
      {
        "target": "utils.technique_mutation_utils.available_effects",
        "type": "calls"
      }
    ],
    "called_by_fqns": [
      "flow.actor_mutation_flow",
      "flow.actor_mutation_flow.get_mutation_offer",
      "flow.actor_mutation_flow.can_offer_boost",
      "flow.actor_mutation_flow.apply_boost",
      "flow.actor_mutation_flow.apply_mutation_choice",
      "flow.actor_mutation_flow.handle_pending_mutation_offer",
      "flow.actor_mutation_flow.handle_post_action_mutation",
      "flow.actor_mutation_flow._boost_level_to_rarity",
      "utils.actor_offer_utils",
      "utils.actor_offer_utils.generate_evolution_offer_for_actor",
      "utils.actor_offer_utils._boost_level_to_rarity",
      "utils.evolution_offer_utils",
      "utils.evolution_offer_utils.get_allowed_rarities",
      "utils.evolution_offer_utils.generate_evolution_offer_for_actor"
    ],
    "calls_fqns": [
      "utils.technique_mutation_utils.available_effects"
    ]
  },
  "utils.technique_mutation_utils.apply_mutation": {
    "fqname": "utils.technique_mutation_utils.apply_mutation",
    "type": "function",
    "description": "Applies the selected mutation offer to the base technique.",
    "tags": [],
    "source_file": "utils\\technique_mutation_utils.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "utils.technique_mutation_utils.apply_mutation",
      "module": "utils.technique_mutation_utils",
      "name": "apply_mutation",
      "type": "function",
      "lineno": 62,
      "source_file": "utils\\technique_mutation_utils.py",
      "description": "Applies the selected mutation offer to the base technique.",
      "docstring_full": "Applies the selected mutation offer to the base technique.\n\nArguments:\n    base_technique: The original technique dict before mutation.\n    offer: A dict containing keys:\n        - \"type\": One of \"replace_effect\", \"add_effect\", \"change_modifier\", \"bank\"\n        - \"result\": The precomputed result technique (except for \"bank\")\n\nReturns:\n    A new technique dict reflecting the chosen mutation.\n    If type == \"bank\", returns the original technique unchanged.",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "base_technique",
          "offer"
        ],
        "returns": null
      }
    },
    "links": [
      {
        "target": "utils.technique_mutation_utils.available_effects",
        "type": "calls"
      },
      {
        "target": "utils.technique_mutation_utils.available_effects",
        "type": "calls"
      }
    ],
    "called_by_fqns": [
      "utils.actor_mutation_utils",
      "utils.actor_mutation_utils.apply_mutation_to_actor"
    ],
    "calls_fqns": [
      "utils.technique_mutation_utils.available_effects"
    ]
  },
  "utils.technique_mutation_utils.available_effects": {
    "fqname": "utils.technique_mutation_utils.available_effects",
    "type": "function",
    "description": "",
    "tags": [],
    "source_file": "utils\\technique_mutation_utils.py",
    "test_coverage": false,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "utils.technique_mutation_utils.available_effects",
      "module": "utils.technique_mutation_utils",
      "name": "available_effects",
      "type": "function",
      "lineno": 25,
      "source_file": "utils\\technique_mutation_utils.py",
      "description": "",
      "docstring_full": "",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": false,
      "metadata": {
        "args": [
          "existing"
        ],
        "returns": null
      }
    },
    "links": [
      {
        "target": "utils.technique_mutation_utils.available_effects",
        "type": "calls"
      },
      {
        "target": "utils.technique_mutation_utils.available_effects",
        "type": "calls"
      }
    ],
    "called_by_fqns": [
      "utils.technique_mutation_utils",
      "utils.technique_mutation_utils",
      "utils.technique_mutation_utils.generate_evolution_offer",
      "utils.technique_mutation_utils.generate_evolution_offer",
      "utils.technique_mutation_utils.apply_mutation",
      "utils.technique_mutation_utils.apply_mutation",
      "utils.technique_mutation_utils.available_effects",
      "utils.technique_mutation_utils.available_effects"
    ],
    "calls_fqns": [
      "utils.technique_mutation_utils.available_effects"
    ]
  },
  "utils.technique_unlock_utils": {
    "fqname": "utils.technique_unlock_utils",
    "type": "module",
    "description": "",
    "tags": [],
    "source_file": "utils\\technique_unlock_utils.py",
    "test_coverage": false,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "utils.technique_unlock_utils",
      "module": "utils.technique_unlock_utils",
      "name": "utils.technique_unlock_utils",
      "type": "module",
      "lineno": 1,
      "source_file": "utils\\technique_unlock_utils.py",
      "description": "",
      "docstring_full": "",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": false,
      "metadata": {}
    },
    "links": [
      {
        "target": "definitions.actor.add_technique",
        "type": "calls"
      }
    ],
    "called_by_fqns": [],
    "calls_fqns": [
      "definitions.actor.add_technique"
    ]
  },
  "utils.technique_unlock_utils.auto_unlock_techniques": {
    "fqname": "utils.technique_unlock_utils.auto_unlock_techniques",
    "type": "function",
    "description": "Scans canonical techniques and adds any to the actor whose",
    "tags": [],
    "source_file": "utils\\technique_unlock_utils.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "utils.technique_unlock_utils.auto_unlock_techniques",
      "module": "utils.technique_unlock_utils",
      "name": "auto_unlock_techniques",
      "type": "function",
      "lineno": 7,
      "source_file": "utils\\technique_unlock_utils.py",
      "description": "Scans canonical techniques and adds any to the actor whose",
      "docstring_full": "Scans canonical techniques and adds any to the actor whose\nbase_skill has reached its level_required.",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "actor"
        ],
        "returns": null
      }
    },
    "links": [
      {
        "target": "definitions.actor.add_technique",
        "type": "calls"
      }
    ],
    "called_by_fqns": [
      "flow.action_flow",
      "flow.action_flow.run_action_phase"
    ],
    "calls_fqns": [
      "definitions.actor.add_technique"
    ]
  },
  "utils.technique_utils": {
    "fqname": "utils.technique_utils",
    "type": "module",
    "description": "",
    "tags": [],
    "source_file": "utils\\technique_utils.py",
    "test_coverage": false,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "utils.technique_utils",
      "module": "utils.technique_utils",
      "name": "utils.technique_utils",
      "type": "module",
      "lineno": 1,
      "source_file": "utils\\technique_utils.py",
      "description": "",
      "docstring_full": "",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": false,
      "metadata": {}
    },
    "links": [
      {
        "target": "utils.technique_utils.evolve_add_modifier",
        "type": "calls"
      },
      {
        "target": "utils.technique_utils.evolve_add_effect",
        "type": "calls"
      },
      {
        "target": "utils.technique_utils.evolve_replace_effect",
        "type": "calls"
      }
    ],
    "called_by_fqns": [],
    "calls_fqns": [
      "utils.technique_utils.evolve_add_effect",
      "utils.technique_utils.evolve_add_modifier",
      "utils.technique_utils.evolve_replace_effect"
    ]
  },
  "utils.technique_utils.generate_technique": {
    "fqname": "utils.technique_utils.generate_technique",
    "type": "function",
    "description": "Generate a base technique scaffold with random components for a given skill.",
    "tags": [],
    "source_file": "utils\\technique_utils.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "utils.technique_utils.generate_technique",
      "module": "utils.technique_utils",
      "name": "generate_technique",
      "type": "function",
      "lineno": 12,
      "source_file": "utils\\technique_utils.py",
      "description": "Generate a base technique scaffold with random components for a given skill.",
      "docstring_full": "Generate a base technique scaffold with random components for a given skill.",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "skill_id"
        ],
        "returns": null
      }
    },
    "links": [
      {
        "target": "utils.technique_utils.evolve_add_modifier",
        "type": "calls"
      },
      {
        "target": "utils.technique_utils.evolve_add_effect",
        "type": "calls"
      },
      {
        "target": "utils.technique_utils.evolve_replace_effect",
        "type": "calls"
      }
    ],
    "called_by_fqns": [
      "definitions.evolution_offer_generator",
      "definitions.evolution_offer_generator.generate_evolution_offer",
      "definitions.evolution_offer_generator._generate_base_technique"
    ],
    "calls_fqns": [
      "utils.technique_utils.evolve_add_effect",
      "utils.technique_utils.evolve_add_modifier",
      "utils.technique_utils.evolve_replace_effect"
    ]
  },
  "utils.technique_utils.evolve_replace_effect": {
    "fqname": "utils.technique_utils.evolve_replace_effect",
    "type": "function",
    "description": "Replaces the first effect with a different one from the effect pool.",
    "tags": [],
    "source_file": "utils\\technique_utils.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "utils.technique_utils.evolve_replace_effect",
      "module": "utils.technique_utils",
      "name": "evolve_replace_effect",
      "type": "function",
      "lineno": 36,
      "source_file": "utils\\technique_utils.py",
      "description": "Replaces the first effect with a different one from the effect pool.",
      "docstring_full": "Replaces the first effect with a different one from the effect pool.\nGuarantees a change if at least 2 effects exist.\nSkips if same replacement already applied.",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "tech"
        ],
        "returns": null
      }
    },
    "links": [
      {
        "target": "utils.technique_utils.evolve_add_modifier",
        "type": "calls"
      },
      {
        "target": "utils.technique_utils.evolve_add_effect",
        "type": "calls"
      },
      {
        "target": "utils.technique_utils.evolve_replace_effect",
        "type": "calls"
      }
    ],
    "called_by_fqns": [
      "utils.technique_utils",
      "utils.technique_utils.generate_technique",
      "utils.technique_utils.evolve_replace_effect",
      "utils.technique_utils.evolve_add_modifier",
      "utils.technique_utils.evolve_add_effect",
      "utils.technique_utils.evolve_technique",
      "utils.technique_utils.get_available_mutations"
    ],
    "calls_fqns": [
      "utils.technique_utils.evolve_add_effect",
      "utils.technique_utils.evolve_add_modifier",
      "utils.technique_utils.evolve_replace_effect"
    ]
  },
  "utils.technique_utils.evolve_add_modifier": {
    "fqname": "utils.technique_utils.evolve_add_modifier",
    "type": "function",
    "description": "Adds a new modifier from the pool. Does nothing if already added.",
    "tags": [],
    "source_file": "utils\\technique_utils.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "utils.technique_utils.evolve_add_modifier",
      "module": "utils.technique_utils",
      "name": "evolve_add_modifier",
      "type": "function",
      "lineno": 69,
      "source_file": "utils\\technique_utils.py",
      "description": "Adds a new modifier from the pool. Does nothing if already added.",
      "docstring_full": "Adds a new modifier from the pool. Does nothing if already added.",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "tech",
          "options"
        ],
        "returns": null
      }
    },
    "links": [
      {
        "target": "utils.technique_utils.evolve_add_modifier",
        "type": "calls"
      },
      {
        "target": "utils.technique_utils.evolve_add_effect",
        "type": "calls"
      },
      {
        "target": "utils.technique_utils.evolve_replace_effect",
        "type": "calls"
      }
    ],
    "called_by_fqns": [
      "utils.technique_utils",
      "utils.technique_utils.generate_technique",
      "utils.technique_utils.evolve_replace_effect",
      "utils.technique_utils.evolve_add_modifier",
      "utils.technique_utils.evolve_add_effect",
      "utils.technique_utils.evolve_technique",
      "utils.technique_utils.get_available_mutations"
    ],
    "calls_fqns": [
      "utils.technique_utils.evolve_add_effect",
      "utils.technique_utils.evolve_add_modifier",
      "utils.technique_utils.evolve_replace_effect"
    ]
  },
  "utils.technique_utils.evolve_add_effect": {
    "fqname": "utils.technique_utils.evolve_add_effect",
    "type": "function",
    "description": "Adds a new effect if not already present and not already added before.",
    "tags": [],
    "source_file": "utils\\technique_utils.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "utils.technique_utils.evolve_add_effect",
      "module": "utils.technique_utils",
      "name": "evolve_add_effect",
      "type": "function",
      "lineno": 91,
      "source_file": "utils\\technique_utils.py",
      "description": "Adds a new effect if not already present and not already added before.",
      "docstring_full": "Adds a new effect if not already present and not already added before.",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "tech",
          "options"
        ],
        "returns": null
      }
    },
    "links": [
      {
        "target": "utils.technique_utils.evolve_add_modifier",
        "type": "calls"
      },
      {
        "target": "utils.technique_utils.evolve_add_effect",
        "type": "calls"
      },
      {
        "target": "utils.technique_utils.evolve_replace_effect",
        "type": "calls"
      }
    ],
    "called_by_fqns": [
      "utils.technique_utils",
      "utils.technique_utils.generate_technique",
      "utils.technique_utils.evolve_replace_effect",
      "utils.technique_utils.evolve_add_modifier",
      "utils.technique_utils.evolve_add_effect",
      "utils.technique_utils.evolve_technique",
      "utils.technique_utils.get_available_mutations"
    ],
    "calls_fqns": [
      "utils.technique_utils.evolve_add_effect",
      "utils.technique_utils.evolve_add_modifier",
      "utils.technique_utils.evolve_replace_effect"
    ]
  },
  "utils.technique_utils.evolve_technique": {
    "fqname": "utils.technique_utils.evolve_technique",
    "type": "function",
    "description": "Dispatches to the correct mutation function for test scaffolding.",
    "tags": [],
    "source_file": "utils\\technique_utils.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "utils.technique_utils.evolve_technique",
      "module": "utils.technique_utils",
      "name": "evolve_technique",
      "type": "function",
      "lineno": 122,
      "source_file": "utils\\technique_utils.py",
      "description": "Dispatches to the correct mutation function for test scaffolding.",
      "docstring_full": "Dispatches to the correct mutation function for test scaffolding.\nNot intended for runtime use.",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "tech",
          "mode",
          "options"
        ],
        "returns": null
      }
    },
    "links": [
      {
        "target": "utils.technique_utils.evolve_add_modifier",
        "type": "calls"
      },
      {
        "target": "utils.technique_utils.evolve_add_effect",
        "type": "calls"
      },
      {
        "target": "utils.technique_utils.evolve_replace_effect",
        "type": "calls"
      }
    ],
    "called_by_fqns": [
      "definitions.evolution_offer_generator",
      "definitions.evolution_offer_generator.generate_evolution_offer",
      "definitions.evolution_offer_generator._generate_base_technique"
    ],
    "calls_fqns": [
      "utils.technique_utils.evolve_add_effect",
      "utils.technique_utils.evolve_add_modifier",
      "utils.technique_utils.evolve_replace_effect"
    ]
  },
  "utils.technique_utils.get_available_mutations": {
    "fqname": "utils.technique_utils.get_available_mutations",
    "type": "function",
    "description": "Returns a list of valid mutation types for a given technique.",
    "tags": [],
    "source_file": "utils\\technique_utils.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "utils.technique_utils.get_available_mutations",
      "module": "utils.technique_utils",
      "name": "get_available_mutations",
      "type": "function",
      "lineno": 141,
      "source_file": "utils\\technique_utils.py",
      "description": "Returns a list of valid mutation types for a given technique.",
      "docstring_full": "Returns a list of valid mutation types for a given technique.\n\nEnsures we do not suggest evolutions that would exceed field limits\nor create invalid states. Used by the mutation offer generator.\n\nPossible mutations:\n- \"replace_effect\": always allowed if any effect exists\n- \"add_effect\": allowed if len(effects) < 2\n- \"add_modifier\": only allowed if modifier is None",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "tech"
        ],
        "returns": null
      }
    },
    "links": [
      {
        "target": "utils.technique_utils.evolve_add_modifier",
        "type": "calls"
      },
      {
        "target": "utils.technique_utils.evolve_add_effect",
        "type": "calls"
      },
      {
        "target": "utils.technique_utils.evolve_replace_effect",
        "type": "calls"
      }
    ],
    "called_by_fqns": [],
    "calls_fqns": [
      "utils.technique_utils.evolve_add_effect",
      "utils.technique_utils.evolve_add_modifier",
      "utils.technique_utils.evolve_replace_effect"
    ]
  },
  "utils.test_trace_line": {
    "fqname": "utils.test_trace_line",
    "type": "module",
    "description": "",
    "tags": [],
    "source_file": "utils\\test_trace_line.py",
    "test_coverage": false,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "utils.test_trace_line",
      "module": "utils.test_trace_line",
      "name": "utils.test_trace_line",
      "type": "module",
      "lineno": 1,
      "source_file": "utils\\test_trace_line.py",
      "description": "",
      "docstring_full": "",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": false,
      "metadata": {}
    },
    "links": [
      {
        "target": "utils.general_utils.trace_line",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.trace_line",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.trace_line",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.trace_line",
        "type": "calls"
      },
      {
        "target": "utils.test_trace_line.make_blank_tile",
        "type": "calls"
      },
      {
        "target": "utils.test_trace_line.make_blank_tile",
        "type": "calls"
      },
      {
        "target": "utils.test_trace_line.make_blank_tile",
        "type": "calls"
      },
      {
        "target": "utils.test_trace_line.make_blank_tile",
        "type": "calls"
      },
      {
        "target": "utils.test_trace_line.make_blank_tile",
        "type": "calls"
      },
      {
        "target": "utils.test_trace_line.make_blank_tile",
        "type": "calls"
      }
    ],
    "called_by_fqns": [],
    "calls_fqns": [
      "utils.general_utils.trace_line",
      "utils.test_trace_line.make_blank_tile"
    ]
  },
  "utils.test_trace_line.make_blank_tile": {
    "fqname": "utils.test_trace_line.make_blank_tile",
    "type": "function",
    "description": "",
    "tags": [],
    "source_file": "utils\\test_trace_line.py",
    "test_coverage": false,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "utils.test_trace_line.make_blank_tile",
      "module": "utils.test_trace_line",
      "name": "make_blank_tile",
      "type": "function",
      "lineno": 6,
      "source_file": "utils\\test_trace_line.py",
      "description": "",
      "docstring_full": "",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": false,
      "metadata": {
        "args": [],
        "returns": null
      }
    },
    "links": [
      {
        "target": "utils.general_utils.trace_line",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.trace_line",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.trace_line",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.trace_line",
        "type": "calls"
      },
      {
        "target": "utils.test_trace_line.make_blank_tile",
        "type": "calls"
      },
      {
        "target": "utils.test_trace_line.make_blank_tile",
        "type": "calls"
      },
      {
        "target": "utils.test_trace_line.make_blank_tile",
        "type": "calls"
      },
      {
        "target": "utils.test_trace_line.make_blank_tile",
        "type": "calls"
      },
      {
        "target": "utils.test_trace_line.make_blank_tile",
        "type": "calls"
      },
      {
        "target": "utils.test_trace_line.make_blank_tile",
        "type": "calls"
      }
    ],
    "called_by_fqns": [
      "utils.test_trace_line",
      "utils.test_trace_line",
      "utils.test_trace_line",
      "utils.test_trace_line",
      "utils.test_trace_line",
      "utils.test_trace_line",
      "utils.test_trace_line.make_blank_tile",
      "utils.test_trace_line.make_blank_tile",
      "utils.test_trace_line.make_blank_tile",
      "utils.test_trace_line.make_blank_tile",
      "utils.test_trace_line.make_blank_tile",
      "utils.test_trace_line.make_blank_tile",
      "utils.test_trace_line.test_straight_line_unblocked",
      "utils.test_trace_line.test_straight_line_unblocked",
      "utils.test_trace_line.test_straight_line_unblocked",
      "utils.test_trace_line.test_straight_line_unblocked",
      "utils.test_trace_line.test_straight_line_unblocked",
      "utils.test_trace_line.test_straight_line_unblocked",
      "utils.test_trace_line.test_diagonal_line_with_blocking_tile",
      "utils.test_trace_line.test_diagonal_line_with_blocking_tile",
      "utils.test_trace_line.test_diagonal_line_with_blocking_tile",
      "utils.test_trace_line.test_diagonal_line_with_blocking_tile",
      "utils.test_trace_line.test_diagonal_line_with_blocking_tile",
      "utils.test_trace_line.test_diagonal_line_with_blocking_tile",
      "utils.test_trace_line.test_tile_with_blocking_thing",
      "utils.test_trace_line.test_tile_with_blocking_thing",
      "utils.test_trace_line.test_tile_with_blocking_thing",
      "utils.test_trace_line.test_tile_with_blocking_thing",
      "utils.test_trace_line.test_tile_with_blocking_thing",
      "utils.test_trace_line.test_tile_with_blocking_thing",
      "utils.test_trace_line.test_missing_tile_skipped",
      "utils.test_trace_line.test_missing_tile_skipped",
      "utils.test_trace_line.test_missing_tile_skipped",
      "utils.test_trace_line.test_missing_tile_skipped",
      "utils.test_trace_line.test_missing_tile_skipped",
      "utils.test_trace_line.test_missing_tile_skipped"
    ],
    "calls_fqns": [
      "utils.general_utils.trace_line",
      "utils.test_trace_line.make_blank_tile"
    ]
  },
  "utils.test_trace_line.test_straight_line_unblocked": {
    "fqname": "utils.test_trace_line.test_straight_line_unblocked",
    "type": "function",
    "description": "",
    "tags": [],
    "source_file": "utils\\test_trace_line.py",
    "test_coverage": false,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "utils.test_trace_line.test_straight_line_unblocked",
      "module": "utils.test_trace_line",
      "name": "test_straight_line_unblocked",
      "type": "function",
      "lineno": 9,
      "source_file": "utils\\test_trace_line.py",
      "description": "",
      "docstring_full": "",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": false,
      "metadata": {
        "args": [],
        "returns": null
      }
    },
    "links": [
      {
        "target": "utils.general_utils.trace_line",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.trace_line",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.trace_line",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.trace_line",
        "type": "calls"
      },
      {
        "target": "utils.test_trace_line.make_blank_tile",
        "type": "calls"
      },
      {
        "target": "utils.test_trace_line.make_blank_tile",
        "type": "calls"
      },
      {
        "target": "utils.test_trace_line.make_blank_tile",
        "type": "calls"
      },
      {
        "target": "utils.test_trace_line.make_blank_tile",
        "type": "calls"
      },
      {
        "target": "utils.test_trace_line.make_blank_tile",
        "type": "calls"
      },
      {
        "target": "utils.test_trace_line.make_blank_tile",
        "type": "calls"
      }
    ],
    "called_by_fqns": [],
    "calls_fqns": [
      "utils.general_utils.trace_line",
      "utils.test_trace_line.make_blank_tile"
    ]
  },
  "utils.test_trace_line.test_diagonal_line_with_blocking_tile": {
    "fqname": "utils.test_trace_line.test_diagonal_line_with_blocking_tile",
    "type": "function",
    "description": "",
    "tags": [],
    "source_file": "utils\\test_trace_line.py",
    "test_coverage": false,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "utils.test_trace_line.test_diagonal_line_with_blocking_tile",
      "module": "utils.test_trace_line",
      "name": "test_diagonal_line_with_blocking_tile",
      "type": "function",
      "lineno": 17,
      "source_file": "utils\\test_trace_line.py",
      "description": "",
      "docstring_full": "",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": false,
      "metadata": {
        "args": [],
        "returns": null
      }
    },
    "links": [
      {
        "target": "utils.general_utils.trace_line",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.trace_line",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.trace_line",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.trace_line",
        "type": "calls"
      },
      {
        "target": "utils.test_trace_line.make_blank_tile",
        "type": "calls"
      },
      {
        "target": "utils.test_trace_line.make_blank_tile",
        "type": "calls"
      },
      {
        "target": "utils.test_trace_line.make_blank_tile",
        "type": "calls"
      },
      {
        "target": "utils.test_trace_line.make_blank_tile",
        "type": "calls"
      },
      {
        "target": "utils.test_trace_line.make_blank_tile",
        "type": "calls"
      },
      {
        "target": "utils.test_trace_line.make_blank_tile",
        "type": "calls"
      }
    ],
    "called_by_fqns": [],
    "calls_fqns": [
      "utils.general_utils.trace_line",
      "utils.test_trace_line.make_blank_tile"
    ]
  },
  "utils.test_trace_line.test_tile_with_blocking_thing": {
    "fqname": "utils.test_trace_line.test_tile_with_blocking_thing",
    "type": "function",
    "description": "",
    "tags": [],
    "source_file": "utils\\test_trace_line.py",
    "test_coverage": false,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "utils.test_trace_line.test_tile_with_blocking_thing",
      "module": "utils.test_trace_line",
      "name": "test_tile_with_blocking_thing",
      "type": "function",
      "lineno": 27,
      "source_file": "utils\\test_trace_line.py",
      "description": "",
      "docstring_full": "",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": false,
      "metadata": {
        "args": [],
        "returns": null
      }
    },
    "links": [
      {
        "target": "utils.general_utils.trace_line",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.trace_line",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.trace_line",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.trace_line",
        "type": "calls"
      },
      {
        "target": "utils.test_trace_line.make_blank_tile",
        "type": "calls"
      },
      {
        "target": "utils.test_trace_line.make_blank_tile",
        "type": "calls"
      },
      {
        "target": "utils.test_trace_line.make_blank_tile",
        "type": "calls"
      },
      {
        "target": "utils.test_trace_line.make_blank_tile",
        "type": "calls"
      },
      {
        "target": "utils.test_trace_line.make_blank_tile",
        "type": "calls"
      },
      {
        "target": "utils.test_trace_line.make_blank_tile",
        "type": "calls"
      }
    ],
    "called_by_fqns": [],
    "calls_fqns": [
      "utils.general_utils.trace_line",
      "utils.test_trace_line.make_blank_tile"
    ]
  },
  "utils.test_trace_line.test_missing_tile_skipped": {
    "fqname": "utils.test_trace_line.test_missing_tile_skipped",
    "type": "function",
    "description": "",
    "tags": [],
    "source_file": "utils\\test_trace_line.py",
    "test_coverage": false,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "utils.test_trace_line.test_missing_tile_skipped",
      "module": "utils.test_trace_line",
      "name": "test_missing_tile_skipped",
      "type": "function",
      "lineno": 34,
      "source_file": "utils\\test_trace_line.py",
      "description": "",
      "docstring_full": "",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": false,
      "metadata": {
        "args": [],
        "returns": null
      }
    },
    "links": [
      {
        "target": "utils.general_utils.trace_line",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.trace_line",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.trace_line",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.trace_line",
        "type": "calls"
      },
      {
        "target": "utils.test_trace_line.make_blank_tile",
        "type": "calls"
      },
      {
        "target": "utils.test_trace_line.make_blank_tile",
        "type": "calls"
      },
      {
        "target": "utils.test_trace_line.make_blank_tile",
        "type": "calls"
      },
      {
        "target": "utils.test_trace_line.make_blank_tile",
        "type": "calls"
      },
      {
        "target": "utils.test_trace_line.make_blank_tile",
        "type": "calls"
      },
      {
        "target": "utils.test_trace_line.make_blank_tile",
        "type": "calls"
      }
    ],
    "called_by_fqns": [],
    "calls_fqns": [
      "utils.general_utils.trace_line",
      "utils.test_trace_line.make_blank_tile"
    ]
  },
  "utils.test_visibility_penalty": {
    "fqname": "utils.test_visibility_penalty",
    "type": "module",
    "description": "",
    "tags": [],
    "source_file": "utils\\test_visibility_penalty.py",
    "test_coverage": false,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "utils.test_visibility_penalty",
      "module": "utils.test_visibility_penalty",
      "name": "utils.test_visibility_penalty",
      "type": "module",
      "lineno": 1,
      "source_file": "utils\\test_visibility_penalty.py",
      "description": "",
      "docstring_full": "",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": false,
      "metadata": {}
    },
    "links": [
      {
        "target": "utils.general_utils.trace_line",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.trace_line",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.trace_line",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.trace_line",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.visibility_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.test_visibility_penalty.make_tile_with_env",
        "type": "calls"
      },
      {
        "target": "utils.test_visibility_penalty.make_tile_with_env",
        "type": "calls"
      },
      {
        "target": "utils.test_visibility_penalty.make_tile_with_env",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.visibility_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.test_visibility_penalty.make_tile_with_env",
        "type": "calls"
      },
      {
        "target": "utils.test_visibility_penalty.make_tile_with_env",
        "type": "calls"
      },
      {
        "target": "utils.test_visibility_penalty.make_tile_with_env",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.visibility_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.test_visibility_penalty.make_tile_with_env",
        "type": "calls"
      },
      {
        "target": "utils.test_visibility_penalty.make_tile_with_env",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.visibility_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.visibility_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.visibility_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.visibility_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.visibility_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.visibility_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      }
    ],
    "called_by_fqns": [],
    "calls_fqns": [
      "utils.general_utils.compute_visibility_penalty_along_path",
      "utils.general_utils.trace_line",
      "utils.test_visibility_penalty.make_tile_with_env",
      "utils.visibility_utils.compute_visibility_penalty_along_path"
    ]
  },
  "utils.test_visibility_penalty.make_tile_with_env": {
    "fqname": "utils.test_visibility_penalty.make_tile_with_env",
    "type": "function",
    "description": "Helper: create tile with list of env objects, each with a visibility_penalty.",
    "tags": [],
    "source_file": "utils\\test_visibility_penalty.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "utils.test_visibility_penalty.make_tile_with_env",
      "module": "utils.test_visibility_penalty",
      "name": "make_tile_with_env",
      "type": "function",
      "lineno": 6,
      "source_file": "utils\\test_visibility_penalty.py",
      "description": "Helper: create tile with list of env objects, each with a visibility_penalty.",
      "docstring_full": "Helper: create tile with list of env objects, each with a visibility_penalty.",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "penalties"
        ],
        "returns": null
      }
    },
    "links": [
      {
        "target": "utils.general_utils.trace_line",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.trace_line",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.trace_line",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.trace_line",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.visibility_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.test_visibility_penalty.make_tile_with_env",
        "type": "calls"
      },
      {
        "target": "utils.test_visibility_penalty.make_tile_with_env",
        "type": "calls"
      },
      {
        "target": "utils.test_visibility_penalty.make_tile_with_env",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.visibility_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.test_visibility_penalty.make_tile_with_env",
        "type": "calls"
      },
      {
        "target": "utils.test_visibility_penalty.make_tile_with_env",
        "type": "calls"
      },
      {
        "target": "utils.test_visibility_penalty.make_tile_with_env",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.visibility_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.test_visibility_penalty.make_tile_with_env",
        "type": "calls"
      },
      {
        "target": "utils.test_visibility_penalty.make_tile_with_env",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.visibility_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.visibility_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.visibility_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.visibility_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.visibility_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.visibility_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      }
    ],
    "called_by_fqns": [
      "utils.test_visibility_penalty",
      "utils.test_visibility_penalty",
      "utils.test_visibility_penalty",
      "utils.test_visibility_penalty",
      "utils.test_visibility_penalty",
      "utils.test_visibility_penalty",
      "utils.test_visibility_penalty",
      "utils.test_visibility_penalty",
      "utils.test_visibility_penalty.make_tile_with_env",
      "utils.test_visibility_penalty.make_tile_with_env",
      "utils.test_visibility_penalty.make_tile_with_env",
      "utils.test_visibility_penalty.make_tile_with_env",
      "utils.test_visibility_penalty.make_tile_with_env",
      "utils.test_visibility_penalty.make_tile_with_env",
      "utils.test_visibility_penalty.make_tile_with_env",
      "utils.test_visibility_penalty.make_tile_with_env",
      "utils.test_visibility_penalty.test_no_environment_penalty",
      "utils.test_visibility_penalty.test_no_environment_penalty",
      "utils.test_visibility_penalty.test_no_environment_penalty",
      "utils.test_visibility_penalty.test_no_environment_penalty",
      "utils.test_visibility_penalty.test_no_environment_penalty",
      "utils.test_visibility_penalty.test_no_environment_penalty",
      "utils.test_visibility_penalty.test_no_environment_penalty",
      "utils.test_visibility_penalty.test_no_environment_penalty",
      "utils.test_visibility_penalty.test_single_fog_tile",
      "utils.test_visibility_penalty.test_single_fog_tile",
      "utils.test_visibility_penalty.test_single_fog_tile",
      "utils.test_visibility_penalty.test_single_fog_tile",
      "utils.test_visibility_penalty.test_single_fog_tile",
      "utils.test_visibility_penalty.test_single_fog_tile",
      "utils.test_visibility_penalty.test_single_fog_tile",
      "utils.test_visibility_penalty.test_single_fog_tile",
      "utils.test_visibility_penalty.test_multiple_penalty_sources",
      "utils.test_visibility_penalty.test_multiple_penalty_sources",
      "utils.test_visibility_penalty.test_multiple_penalty_sources",
      "utils.test_visibility_penalty.test_multiple_penalty_sources",
      "utils.test_visibility_penalty.test_multiple_penalty_sources",
      "utils.test_visibility_penalty.test_multiple_penalty_sources",
      "utils.test_visibility_penalty.test_multiple_penalty_sources",
      "utils.test_visibility_penalty.test_multiple_penalty_sources",
      "utils.test_visibility_penalty.test_missing_env_field",
      "utils.test_visibility_penalty.test_missing_env_field",
      "utils.test_visibility_penalty.test_missing_env_field",
      "utils.test_visibility_penalty.test_missing_env_field",
      "utils.test_visibility_penalty.test_missing_env_field",
      "utils.test_visibility_penalty.test_missing_env_field",
      "utils.test_visibility_penalty.test_missing_env_field",
      "utils.test_visibility_penalty.test_missing_env_field",
      "utils.test_visibility_penalty.test_empty_path",
      "utils.test_visibility_penalty.test_empty_path",
      "utils.test_visibility_penalty.test_empty_path",
      "utils.test_visibility_penalty.test_empty_path",
      "utils.test_visibility_penalty.test_empty_path",
      "utils.test_visibility_penalty.test_empty_path",
      "utils.test_visibility_penalty.test_empty_path",
      "utils.test_visibility_penalty.test_empty_path",
      "utils.test_visibility_penalty.test_invalid_path_type",
      "utils.test_visibility_penalty.test_invalid_path_type",
      "utils.test_visibility_penalty.test_invalid_path_type",
      "utils.test_visibility_penalty.test_invalid_path_type",
      "utils.test_visibility_penalty.test_invalid_path_type",
      "utils.test_visibility_penalty.test_invalid_path_type",
      "utils.test_visibility_penalty.test_invalid_path_type",
      "utils.test_visibility_penalty.test_invalid_path_type",
      "utils.test_visibility_penalty.test_step_not_dict",
      "utils.test_visibility_penalty.test_step_not_dict",
      "utils.test_visibility_penalty.test_step_not_dict",
      "utils.test_visibility_penalty.test_step_not_dict",
      "utils.test_visibility_penalty.test_step_not_dict",
      "utils.test_visibility_penalty.test_step_not_dict",
      "utils.test_visibility_penalty.test_step_not_dict",
      "utils.test_visibility_penalty.test_step_not_dict",
      "utils.test_visibility_penalty.test_missing_tile_dict",
      "utils.test_visibility_penalty.test_missing_tile_dict",
      "utils.test_visibility_penalty.test_missing_tile_dict",
      "utils.test_visibility_penalty.test_missing_tile_dict",
      "utils.test_visibility_penalty.test_missing_tile_dict",
      "utils.test_visibility_penalty.test_missing_tile_dict",
      "utils.test_visibility_penalty.test_missing_tile_dict",
      "utils.test_visibility_penalty.test_missing_tile_dict",
      "utils.test_visibility_penalty.test_env_not_list",
      "utils.test_visibility_penalty.test_env_not_list",
      "utils.test_visibility_penalty.test_env_not_list",
      "utils.test_visibility_penalty.test_env_not_list",
      "utils.test_visibility_penalty.test_env_not_list",
      "utils.test_visibility_penalty.test_env_not_list",
      "utils.test_visibility_penalty.test_env_not_list",
      "utils.test_visibility_penalty.test_env_not_list"
    ],
    "calls_fqns": [
      "utils.general_utils.compute_visibility_penalty_along_path",
      "utils.general_utils.trace_line",
      "utils.test_visibility_penalty.make_tile_with_env",
      "utils.visibility_utils.compute_visibility_penalty_along_path"
    ]
  },
  "utils.test_visibility_penalty.test_no_environment_penalty": {
    "fqname": "utils.test_visibility_penalty.test_no_environment_penalty",
    "type": "function",
    "description": "",
    "tags": [],
    "source_file": "utils\\test_visibility_penalty.py",
    "test_coverage": false,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "utils.test_visibility_penalty.test_no_environment_penalty",
      "module": "utils.test_visibility_penalty",
      "name": "test_no_environment_penalty",
      "type": "function",
      "lineno": 14,
      "source_file": "utils\\test_visibility_penalty.py",
      "description": "",
      "docstring_full": "",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": false,
      "metadata": {
        "args": [],
        "returns": null
      }
    },
    "links": [
      {
        "target": "utils.general_utils.trace_line",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.trace_line",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.trace_line",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.trace_line",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.visibility_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.test_visibility_penalty.make_tile_with_env",
        "type": "calls"
      },
      {
        "target": "utils.test_visibility_penalty.make_tile_with_env",
        "type": "calls"
      },
      {
        "target": "utils.test_visibility_penalty.make_tile_with_env",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.visibility_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.test_visibility_penalty.make_tile_with_env",
        "type": "calls"
      },
      {
        "target": "utils.test_visibility_penalty.make_tile_with_env",
        "type": "calls"
      },
      {
        "target": "utils.test_visibility_penalty.make_tile_with_env",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.visibility_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.test_visibility_penalty.make_tile_with_env",
        "type": "calls"
      },
      {
        "target": "utils.test_visibility_penalty.make_tile_with_env",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.visibility_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.visibility_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.visibility_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.visibility_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.visibility_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.visibility_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      }
    ],
    "called_by_fqns": [],
    "calls_fqns": [
      "utils.general_utils.compute_visibility_penalty_along_path",
      "utils.general_utils.trace_line",
      "utils.test_visibility_penalty.make_tile_with_env",
      "utils.visibility_utils.compute_visibility_penalty_along_path"
    ]
  },
  "utils.test_visibility_penalty.test_single_fog_tile": {
    "fqname": "utils.test_visibility_penalty.test_single_fog_tile",
    "type": "function",
    "description": "",
    "tags": [],
    "source_file": "utils\\test_visibility_penalty.py",
    "test_coverage": false,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "utils.test_visibility_penalty.test_single_fog_tile",
      "module": "utils.test_visibility_penalty",
      "name": "test_single_fog_tile",
      "type": "function",
      "lineno": 19,
      "source_file": "utils\\test_visibility_penalty.py",
      "description": "",
      "docstring_full": "",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": false,
      "metadata": {
        "args": [],
        "returns": null
      }
    },
    "links": [
      {
        "target": "utils.general_utils.trace_line",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.trace_line",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.trace_line",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.trace_line",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.visibility_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.test_visibility_penalty.make_tile_with_env",
        "type": "calls"
      },
      {
        "target": "utils.test_visibility_penalty.make_tile_with_env",
        "type": "calls"
      },
      {
        "target": "utils.test_visibility_penalty.make_tile_with_env",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.visibility_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.test_visibility_penalty.make_tile_with_env",
        "type": "calls"
      },
      {
        "target": "utils.test_visibility_penalty.make_tile_with_env",
        "type": "calls"
      },
      {
        "target": "utils.test_visibility_penalty.make_tile_with_env",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.visibility_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.test_visibility_penalty.make_tile_with_env",
        "type": "calls"
      },
      {
        "target": "utils.test_visibility_penalty.make_tile_with_env",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.visibility_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.visibility_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.visibility_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.visibility_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.visibility_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.visibility_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      }
    ],
    "called_by_fqns": [],
    "calls_fqns": [
      "utils.general_utils.compute_visibility_penalty_along_path",
      "utils.general_utils.trace_line",
      "utils.test_visibility_penalty.make_tile_with_env",
      "utils.visibility_utils.compute_visibility_penalty_along_path"
    ]
  },
  "utils.test_visibility_penalty.test_multiple_penalty_sources": {
    "fqname": "utils.test_visibility_penalty.test_multiple_penalty_sources",
    "type": "function",
    "description": "",
    "tags": [],
    "source_file": "utils\\test_visibility_penalty.py",
    "test_coverage": false,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "utils.test_visibility_penalty.test_multiple_penalty_sources",
      "module": "utils.test_visibility_penalty",
      "name": "test_multiple_penalty_sources",
      "type": "function",
      "lineno": 28,
      "source_file": "utils\\test_visibility_penalty.py",
      "description": "",
      "docstring_full": "",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": false,
      "metadata": {
        "args": [],
        "returns": null
      }
    },
    "links": [
      {
        "target": "utils.general_utils.trace_line",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.trace_line",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.trace_line",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.trace_line",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.visibility_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.test_visibility_penalty.make_tile_with_env",
        "type": "calls"
      },
      {
        "target": "utils.test_visibility_penalty.make_tile_with_env",
        "type": "calls"
      },
      {
        "target": "utils.test_visibility_penalty.make_tile_with_env",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.visibility_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.test_visibility_penalty.make_tile_with_env",
        "type": "calls"
      },
      {
        "target": "utils.test_visibility_penalty.make_tile_with_env",
        "type": "calls"
      },
      {
        "target": "utils.test_visibility_penalty.make_tile_with_env",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.visibility_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.test_visibility_penalty.make_tile_with_env",
        "type": "calls"
      },
      {
        "target": "utils.test_visibility_penalty.make_tile_with_env",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.visibility_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.visibility_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.visibility_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.visibility_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.visibility_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.visibility_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      }
    ],
    "called_by_fqns": [],
    "calls_fqns": [
      "utils.general_utils.compute_visibility_penalty_along_path",
      "utils.general_utils.trace_line",
      "utils.test_visibility_penalty.make_tile_with_env",
      "utils.visibility_utils.compute_visibility_penalty_along_path"
    ]
  },
  "utils.test_visibility_penalty.test_missing_env_field": {
    "fqname": "utils.test_visibility_penalty.test_missing_env_field",
    "type": "function",
    "description": "",
    "tags": [],
    "source_file": "utils\\test_visibility_penalty.py",
    "test_coverage": false,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "utils.test_visibility_penalty.test_missing_env_field",
      "module": "utils.test_visibility_penalty",
      "name": "test_missing_env_field",
      "type": "function",
      "lineno": 37,
      "source_file": "utils\\test_visibility_penalty.py",
      "description": "",
      "docstring_full": "",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": false,
      "metadata": {
        "args": [],
        "returns": null
      }
    },
    "links": [
      {
        "target": "utils.general_utils.trace_line",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.trace_line",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.trace_line",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.trace_line",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.visibility_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.test_visibility_penalty.make_tile_with_env",
        "type": "calls"
      },
      {
        "target": "utils.test_visibility_penalty.make_tile_with_env",
        "type": "calls"
      },
      {
        "target": "utils.test_visibility_penalty.make_tile_with_env",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.visibility_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.test_visibility_penalty.make_tile_with_env",
        "type": "calls"
      },
      {
        "target": "utils.test_visibility_penalty.make_tile_with_env",
        "type": "calls"
      },
      {
        "target": "utils.test_visibility_penalty.make_tile_with_env",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.visibility_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.test_visibility_penalty.make_tile_with_env",
        "type": "calls"
      },
      {
        "target": "utils.test_visibility_penalty.make_tile_with_env",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.visibility_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.visibility_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.visibility_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.visibility_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.visibility_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.visibility_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      }
    ],
    "called_by_fqns": [],
    "calls_fqns": [
      "utils.general_utils.compute_visibility_penalty_along_path",
      "utils.general_utils.trace_line",
      "utils.test_visibility_penalty.make_tile_with_env",
      "utils.visibility_utils.compute_visibility_penalty_along_path"
    ]
  },
  "utils.test_visibility_penalty.test_empty_path": {
    "fqname": "utils.test_visibility_penalty.test_empty_path",
    "type": "function",
    "description": "",
    "tags": [],
    "source_file": "utils\\test_visibility_penalty.py",
    "test_coverage": false,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "utils.test_visibility_penalty.test_empty_path",
      "module": "utils.test_visibility_penalty",
      "name": "test_empty_path",
      "type": "function",
      "lineno": 46,
      "source_file": "utils\\test_visibility_penalty.py",
      "description": "",
      "docstring_full": "",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": false,
      "metadata": {
        "args": [],
        "returns": null
      }
    },
    "links": [
      {
        "target": "utils.general_utils.trace_line",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.trace_line",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.trace_line",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.trace_line",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.visibility_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.test_visibility_penalty.make_tile_with_env",
        "type": "calls"
      },
      {
        "target": "utils.test_visibility_penalty.make_tile_with_env",
        "type": "calls"
      },
      {
        "target": "utils.test_visibility_penalty.make_tile_with_env",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.visibility_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.test_visibility_penalty.make_tile_with_env",
        "type": "calls"
      },
      {
        "target": "utils.test_visibility_penalty.make_tile_with_env",
        "type": "calls"
      },
      {
        "target": "utils.test_visibility_penalty.make_tile_with_env",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.visibility_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.test_visibility_penalty.make_tile_with_env",
        "type": "calls"
      },
      {
        "target": "utils.test_visibility_penalty.make_tile_with_env",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.visibility_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.visibility_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.visibility_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.visibility_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.visibility_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.visibility_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      }
    ],
    "called_by_fqns": [],
    "calls_fqns": [
      "utils.general_utils.compute_visibility_penalty_along_path",
      "utils.general_utils.trace_line",
      "utils.test_visibility_penalty.make_tile_with_env",
      "utils.visibility_utils.compute_visibility_penalty_along_path"
    ]
  },
  "utils.test_visibility_penalty.test_invalid_path_type": {
    "fqname": "utils.test_visibility_penalty.test_invalid_path_type",
    "type": "function",
    "description": "",
    "tags": [],
    "source_file": "utils\\test_visibility_penalty.py",
    "test_coverage": false,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "utils.test_visibility_penalty.test_invalid_path_type",
      "module": "utils.test_visibility_penalty",
      "name": "test_invalid_path_type",
      "type": "function",
      "lineno": 49,
      "source_file": "utils\\test_visibility_penalty.py",
      "description": "",
      "docstring_full": "",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": false,
      "metadata": {
        "args": [],
        "returns": null
      }
    },
    "links": [
      {
        "target": "utils.general_utils.trace_line",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.trace_line",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.trace_line",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.trace_line",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.visibility_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.test_visibility_penalty.make_tile_with_env",
        "type": "calls"
      },
      {
        "target": "utils.test_visibility_penalty.make_tile_with_env",
        "type": "calls"
      },
      {
        "target": "utils.test_visibility_penalty.make_tile_with_env",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.visibility_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.test_visibility_penalty.make_tile_with_env",
        "type": "calls"
      },
      {
        "target": "utils.test_visibility_penalty.make_tile_with_env",
        "type": "calls"
      },
      {
        "target": "utils.test_visibility_penalty.make_tile_with_env",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.visibility_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.test_visibility_penalty.make_tile_with_env",
        "type": "calls"
      },
      {
        "target": "utils.test_visibility_penalty.make_tile_with_env",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.visibility_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.visibility_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.visibility_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.visibility_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.visibility_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.visibility_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      }
    ],
    "called_by_fqns": [],
    "calls_fqns": [
      "utils.general_utils.compute_visibility_penalty_along_path",
      "utils.general_utils.trace_line",
      "utils.test_visibility_penalty.make_tile_with_env",
      "utils.visibility_utils.compute_visibility_penalty_along_path"
    ]
  },
  "utils.test_visibility_penalty.test_step_not_dict": {
    "fqname": "utils.test_visibility_penalty.test_step_not_dict",
    "type": "function",
    "description": "",
    "tags": [],
    "source_file": "utils\\test_visibility_penalty.py",
    "test_coverage": false,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "utils.test_visibility_penalty.test_step_not_dict",
      "module": "utils.test_visibility_penalty",
      "name": "test_step_not_dict",
      "type": "function",
      "lineno": 53,
      "source_file": "utils\\test_visibility_penalty.py",
      "description": "",
      "docstring_full": "",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": false,
      "metadata": {
        "args": [],
        "returns": null
      }
    },
    "links": [
      {
        "target": "utils.general_utils.trace_line",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.trace_line",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.trace_line",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.trace_line",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.visibility_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.test_visibility_penalty.make_tile_with_env",
        "type": "calls"
      },
      {
        "target": "utils.test_visibility_penalty.make_tile_with_env",
        "type": "calls"
      },
      {
        "target": "utils.test_visibility_penalty.make_tile_with_env",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.visibility_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.test_visibility_penalty.make_tile_with_env",
        "type": "calls"
      },
      {
        "target": "utils.test_visibility_penalty.make_tile_with_env",
        "type": "calls"
      },
      {
        "target": "utils.test_visibility_penalty.make_tile_with_env",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.visibility_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.test_visibility_penalty.make_tile_with_env",
        "type": "calls"
      },
      {
        "target": "utils.test_visibility_penalty.make_tile_with_env",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.visibility_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.visibility_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.visibility_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.visibility_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.visibility_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.visibility_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      }
    ],
    "called_by_fqns": [],
    "calls_fqns": [
      "utils.general_utils.compute_visibility_penalty_along_path",
      "utils.general_utils.trace_line",
      "utils.test_visibility_penalty.make_tile_with_env",
      "utils.visibility_utils.compute_visibility_penalty_along_path"
    ]
  },
  "utils.test_visibility_penalty.test_missing_tile_dict": {
    "fqname": "utils.test_visibility_penalty.test_missing_tile_dict",
    "type": "function",
    "description": "",
    "tags": [],
    "source_file": "utils\\test_visibility_penalty.py",
    "test_coverage": false,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "utils.test_visibility_penalty.test_missing_tile_dict",
      "module": "utils.test_visibility_penalty",
      "name": "test_missing_tile_dict",
      "type": "function",
      "lineno": 57,
      "source_file": "utils\\test_visibility_penalty.py",
      "description": "",
      "docstring_full": "",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": false,
      "metadata": {
        "args": [],
        "returns": null
      }
    },
    "links": [
      {
        "target": "utils.general_utils.trace_line",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.trace_line",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.trace_line",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.trace_line",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.visibility_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.test_visibility_penalty.make_tile_with_env",
        "type": "calls"
      },
      {
        "target": "utils.test_visibility_penalty.make_tile_with_env",
        "type": "calls"
      },
      {
        "target": "utils.test_visibility_penalty.make_tile_with_env",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.visibility_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.test_visibility_penalty.make_tile_with_env",
        "type": "calls"
      },
      {
        "target": "utils.test_visibility_penalty.make_tile_with_env",
        "type": "calls"
      },
      {
        "target": "utils.test_visibility_penalty.make_tile_with_env",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.visibility_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.test_visibility_penalty.make_tile_with_env",
        "type": "calls"
      },
      {
        "target": "utils.test_visibility_penalty.make_tile_with_env",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.visibility_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.visibility_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.visibility_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.visibility_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.visibility_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.visibility_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      }
    ],
    "called_by_fqns": [],
    "calls_fqns": [
      "utils.general_utils.compute_visibility_penalty_along_path",
      "utils.general_utils.trace_line",
      "utils.test_visibility_penalty.make_tile_with_env",
      "utils.visibility_utils.compute_visibility_penalty_along_path"
    ]
  },
  "utils.test_visibility_penalty.test_env_not_list": {
    "fqname": "utils.test_visibility_penalty.test_env_not_list",
    "type": "function",
    "description": "",
    "tags": [],
    "source_file": "utils\\test_visibility_penalty.py",
    "test_coverage": false,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "utils.test_visibility_penalty.test_env_not_list",
      "module": "utils.test_visibility_penalty",
      "name": "test_env_not_list",
      "type": "function",
      "lineno": 61,
      "source_file": "utils\\test_visibility_penalty.py",
      "description": "",
      "docstring_full": "",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": false,
      "metadata": {
        "args": [],
        "returns": null
      }
    },
    "links": [
      {
        "target": "utils.general_utils.trace_line",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.trace_line",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.trace_line",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.trace_line",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.visibility_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.test_visibility_penalty.make_tile_with_env",
        "type": "calls"
      },
      {
        "target": "utils.test_visibility_penalty.make_tile_with_env",
        "type": "calls"
      },
      {
        "target": "utils.test_visibility_penalty.make_tile_with_env",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.visibility_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.test_visibility_penalty.make_tile_with_env",
        "type": "calls"
      },
      {
        "target": "utils.test_visibility_penalty.make_tile_with_env",
        "type": "calls"
      },
      {
        "target": "utils.test_visibility_penalty.make_tile_with_env",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.visibility_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.test_visibility_penalty.make_tile_with_env",
        "type": "calls"
      },
      {
        "target": "utils.test_visibility_penalty.make_tile_with_env",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.visibility_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.visibility_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.visibility_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.visibility_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.visibility_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.general_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      },
      {
        "target": "utils.visibility_utils.compute_visibility_penalty_along_path",
        "type": "calls"
      }
    ],
    "called_by_fqns": [],
    "calls_fqns": [
      "utils.general_utils.compute_visibility_penalty_along_path",
      "utils.general_utils.trace_line",
      "utils.test_visibility_penalty.make_tile_with_env",
      "utils.visibility_utils.compute_visibility_penalty_along_path"
    ]
  },
  "utils.visibility_utils": {
    "fqname": "utils.visibility_utils",
    "type": "module",
    "description": "",
    "tags": [],
    "source_file": "utils\\visibility_utils.py",
    "test_coverage": false,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "utils.visibility_utils",
      "module": "utils.visibility_utils",
      "name": "utils.visibility_utils",
      "type": "module",
      "lineno": 1,
      "source_file": "utils\\visibility_utils.py",
      "description": "",
      "docstring_full": "",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": false,
      "metadata": {}
    },
    "links": [
      {
        "target": "utils.visibility_utils.trace_visibility_path",
        "type": "calls"
      },
      {
        "target": "utils.movement_utils.distance_between_zones",
        "type": "calls"
      },
      {
        "target": "utils.visibility_utils.get_visibility_caps",
        "type": "calls"
      },
      {
        "target": "utils.visibility_utils.trace_visibility_path",
        "type": "calls"
      },
      {
        "target": "utils.visibility_utils.visual_coverage",
        "type": "calls"
      },
      {
        "target": "utils.visibility_utils.visual_coverage",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.visibility_utils.visual_coverage",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      }
    ],
    "called_by_fqns": [],
    "calls_fqns": [
      "utils.debug_utils.debug",
      "utils.movement_utils.distance_between_zones",
      "utils.visibility_utils.get_visibility_caps",
      "utils.visibility_utils.trace_visibility_path",
      "utils.visibility_utils.visual_coverage"
    ]
  },
  "utils.visibility_utils.get_visibility_caps": {
    "fqname": "utils.visibility_utils.get_visibility_caps",
    "type": "function",
    "description": "Returns (max_clear, max_vague) based on light level.",
    "tags": [],
    "source_file": "utils\\visibility_utils.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "utils.visibility_utils.get_visibility_caps",
      "module": "utils.visibility_utils",
      "name": "get_visibility_caps",
      "type": "function",
      "lineno": 8,
      "source_file": "utils\\visibility_utils.py",
      "description": "Returns (max_clear, max_vague) based on light level.",
      "docstring_full": "Returns (max_clear, max_vague) based on light level.\nIncludes overexposure collapse at high intensity.",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "light_level"
        ],
        "returns": null
      }
    },
    "links": [
      {
        "target": "utils.visibility_utils.trace_visibility_path",
        "type": "calls"
      },
      {
        "target": "utils.movement_utils.distance_between_zones",
        "type": "calls"
      },
      {
        "target": "utils.visibility_utils.get_visibility_caps",
        "type": "calls"
      },
      {
        "target": "utils.visibility_utils.trace_visibility_path",
        "type": "calls"
      },
      {
        "target": "utils.visibility_utils.visual_coverage",
        "type": "calls"
      },
      {
        "target": "utils.visibility_utils.visual_coverage",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.visibility_utils.visual_coverage",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      }
    ],
    "called_by_fqns": [
      "utils.visibility_utils",
      "utils.visibility_utils.get_visibility_caps",
      "utils.visibility_utils.visual_coverage",
      "utils.visibility_utils.observe",
      "utils.visibility_utils.trace_visibility_path",
      "utils.visibility_utils.compute_visibility_penalty_along_path"
    ],
    "calls_fqns": [
      "utils.debug_utils.debug",
      "utils.movement_utils.distance_between_zones",
      "utils.visibility_utils.get_visibility_caps",
      "utils.visibility_utils.trace_visibility_path",
      "utils.visibility_utils.visual_coverage"
    ]
  },
  "utils.visibility_utils.visual_coverage": {
    "fqname": "utils.visibility_utils.visual_coverage",
    "type": "function",
    "description": "Estimate how much of the target zone is visible from the observer.",
    "tags": [],
    "source_file": "utils\\visibility_utils.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "utils.visibility_utils.visual_coverage",
      "module": "utils.visibility_utils",
      "name": "visual_coverage",
      "type": "function",
      "lineno": 37,
      "source_file": "utils\\visibility_utils.py",
      "description": "Estimate how much of the target zone is visible from the observer.",
      "docstring_full": "Estimate how much of the target zone is visible from the observer.\nUses number of blocking zones along the visibility path as a proxy for visual obstruction.\n\nReturns a float between 0.0 and 1.0:\n- >= 0.9 → clear visibility\n- >= 0.3 → vague\n- < 0.3 → unseen",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "observer_zone",
          "target_zone"
        ],
        "returns": null
      }
    },
    "links": [
      {
        "target": "utils.visibility_utils.trace_visibility_path",
        "type": "calls"
      },
      {
        "target": "utils.movement_utils.distance_between_zones",
        "type": "calls"
      },
      {
        "target": "utils.visibility_utils.get_visibility_caps",
        "type": "calls"
      },
      {
        "target": "utils.visibility_utils.trace_visibility_path",
        "type": "calls"
      },
      {
        "target": "utils.visibility_utils.visual_coverage",
        "type": "calls"
      },
      {
        "target": "utils.visibility_utils.visual_coverage",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.visibility_utils.visual_coverage",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      }
    ],
    "called_by_fqns": [
      "utils.visibility_utils",
      "utils.visibility_utils",
      "utils.visibility_utils",
      "utils.visibility_utils.get_visibility_caps",
      "utils.visibility_utils.get_visibility_caps",
      "utils.visibility_utils.get_visibility_caps",
      "utils.visibility_utils.visual_coverage",
      "utils.visibility_utils.visual_coverage",
      "utils.visibility_utils.visual_coverage",
      "utils.visibility_utils.observe",
      "utils.visibility_utils.observe",
      "utils.visibility_utils.observe",
      "utils.visibility_utils.trace_visibility_path",
      "utils.visibility_utils.trace_visibility_path",
      "utils.visibility_utils.trace_visibility_path",
      "utils.visibility_utils.compute_visibility_penalty_along_path",
      "utils.visibility_utils.compute_visibility_penalty_along_path",
      "utils.visibility_utils.compute_visibility_penalty_along_path"
    ],
    "calls_fqns": [
      "utils.debug_utils.debug",
      "utils.movement_utils.distance_between_zones",
      "utils.visibility_utils.get_visibility_caps",
      "utils.visibility_utils.trace_visibility_path",
      "utils.visibility_utils.visual_coverage"
    ]
  },
  "utils.visibility_utils.observe": {
    "fqname": "utils.visibility_utils.observe",
    "type": "function",
    "description": "Perception scan with:",
    "tags": [],
    "source_file": "utils\\visibility_utils.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "utils.visibility_utils.observe",
      "module": "utils.visibility_utils",
      "name": "observe",
      "type": "function",
      "lineno": 59,
      "source_file": "utils\\visibility_utils.py",
      "description": "Perception scan with:",
      "docstring_full": "Perception scan with:\n- Light-based visibility caps\n- Vague fallback awareness\n- Tiered resolution: clear, vague, or unknown",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "observer"
        ],
        "returns": null
      }
    },
    "links": [
      {
        "target": "utils.visibility_utils.trace_visibility_path",
        "type": "calls"
      },
      {
        "target": "utils.movement_utils.distance_between_zones",
        "type": "calls"
      },
      {
        "target": "utils.visibility_utils.get_visibility_caps",
        "type": "calls"
      },
      {
        "target": "utils.visibility_utils.trace_visibility_path",
        "type": "calls"
      },
      {
        "target": "utils.visibility_utils.visual_coverage",
        "type": "calls"
      },
      {
        "target": "utils.visibility_utils.visual_coverage",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.visibility_utils.visual_coverage",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      }
    ],
    "called_by_fqns": [],
    "calls_fqns": [
      "utils.debug_utils.debug",
      "utils.movement_utils.distance_between_zones",
      "utils.visibility_utils.get_visibility_caps",
      "utils.visibility_utils.trace_visibility_path",
      "utils.visibility_utils.visual_coverage"
    ]
  },
  "utils.visibility_utils.trace_visibility_path": {
    "fqname": "utils.visibility_utils.trace_visibility_path",
    "type": "function",
    "description": "Returns the list of intermediate zones (excluding origin and target)",
    "tags": [],
    "source_file": "utils\\visibility_utils.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "utils.visibility_utils.trace_visibility_path",
      "module": "utils.visibility_utils",
      "name": "trace_visibility_path",
      "type": "function",
      "lineno": 150,
      "source_file": "utils\\visibility_utils.py",
      "description": "Returns the list of intermediate zones (excluding origin and target)",
      "docstring_full": "Returns the list of intermediate zones (excluding origin and target)\nalong the shortest line-of-vision path between origin and target.\nThis is a vision-safe BFS path that ignores movement-specific obstacles.\n\nIf no path is found (e.g. disconnected zones), returns None.",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "origin",
          "target"
        ],
        "returns": null
      }
    },
    "links": [
      {
        "target": "utils.visibility_utils.trace_visibility_path",
        "type": "calls"
      },
      {
        "target": "utils.movement_utils.distance_between_zones",
        "type": "calls"
      },
      {
        "target": "utils.visibility_utils.get_visibility_caps",
        "type": "calls"
      },
      {
        "target": "utils.visibility_utils.trace_visibility_path",
        "type": "calls"
      },
      {
        "target": "utils.visibility_utils.visual_coverage",
        "type": "calls"
      },
      {
        "target": "utils.visibility_utils.visual_coverage",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.visibility_utils.visual_coverage",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      }
    ],
    "called_by_fqns": [
      "utils.visibility_utils",
      "utils.visibility_utils",
      "utils.visibility_utils.get_visibility_caps",
      "utils.visibility_utils.get_visibility_caps",
      "utils.visibility_utils.visual_coverage",
      "utils.visibility_utils.visual_coverage",
      "utils.visibility_utils.observe",
      "utils.visibility_utils.observe",
      "utils.visibility_utils.trace_visibility_path",
      "utils.visibility_utils.trace_visibility_path",
      "utils.visibility_utils.compute_visibility_penalty_along_path",
      "utils.visibility_utils.compute_visibility_penalty_along_path"
    ],
    "calls_fqns": [
      "utils.debug_utils.debug",
      "utils.movement_utils.distance_between_zones",
      "utils.visibility_utils.get_visibility_caps",
      "utils.visibility_utils.trace_visibility_path",
      "utils.visibility_utils.visual_coverage"
    ]
  },
  "utils.visibility_utils.compute_visibility_penalty_along_path": {
    "fqname": "utils.visibility_utils.compute_visibility_penalty_along_path",
    "type": "function",
    "description": "",
    "tags": [],
    "source_file": "utils\\visibility_utils.py",
    "test_coverage": false,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "utils.visibility_utils.compute_visibility_penalty_along_path",
      "module": "utils.visibility_utils",
      "name": "compute_visibility_penalty_along_path",
      "type": "function",
      "lineno": 182,
      "source_file": "utils\\visibility_utils.py",
      "description": "",
      "docstring_full": "",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": false,
      "metadata": {
        "args": [
          "traced_path"
        ],
        "returns": null
      }
    },
    "links": [
      {
        "target": "utils.visibility_utils.trace_visibility_path",
        "type": "calls"
      },
      {
        "target": "utils.movement_utils.distance_between_zones",
        "type": "calls"
      },
      {
        "target": "utils.visibility_utils.get_visibility_caps",
        "type": "calls"
      },
      {
        "target": "utils.visibility_utils.trace_visibility_path",
        "type": "calls"
      },
      {
        "target": "utils.visibility_utils.visual_coverage",
        "type": "calls"
      },
      {
        "target": "utils.visibility_utils.visual_coverage",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.visibility_utils.visual_coverage",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      },
      {
        "target": "utils.debug_utils.debug",
        "type": "calls"
      }
    ],
    "called_by_fqns": [
      "utils.test_visibility_penalty",
      "utils.test_visibility_penalty",
      "utils.test_visibility_penalty",
      "utils.test_visibility_penalty",
      "utils.test_visibility_penalty",
      "utils.test_visibility_penalty",
      "utils.test_visibility_penalty",
      "utils.test_visibility_penalty",
      "utils.test_visibility_penalty",
      "utils.test_visibility_penalty.make_tile_with_env",
      "utils.test_visibility_penalty.make_tile_with_env",
      "utils.test_visibility_penalty.make_tile_with_env",
      "utils.test_visibility_penalty.make_tile_with_env",
      "utils.test_visibility_penalty.make_tile_with_env",
      "utils.test_visibility_penalty.make_tile_with_env",
      "utils.test_visibility_penalty.make_tile_with_env",
      "utils.test_visibility_penalty.make_tile_with_env",
      "utils.test_visibility_penalty.make_tile_with_env",
      "utils.test_visibility_penalty.test_no_environment_penalty",
      "utils.test_visibility_penalty.test_no_environment_penalty",
      "utils.test_visibility_penalty.test_no_environment_penalty",
      "utils.test_visibility_penalty.test_no_environment_penalty",
      "utils.test_visibility_penalty.test_no_environment_penalty",
      "utils.test_visibility_penalty.test_no_environment_penalty",
      "utils.test_visibility_penalty.test_no_environment_penalty",
      "utils.test_visibility_penalty.test_no_environment_penalty",
      "utils.test_visibility_penalty.test_no_environment_penalty",
      "utils.test_visibility_penalty.test_single_fog_tile",
      "utils.test_visibility_penalty.test_single_fog_tile",
      "utils.test_visibility_penalty.test_single_fog_tile",
      "utils.test_visibility_penalty.test_single_fog_tile",
      "utils.test_visibility_penalty.test_single_fog_tile",
      "utils.test_visibility_penalty.test_single_fog_tile",
      "utils.test_visibility_penalty.test_single_fog_tile",
      "utils.test_visibility_penalty.test_single_fog_tile",
      "utils.test_visibility_penalty.test_single_fog_tile",
      "utils.test_visibility_penalty.test_multiple_penalty_sources",
      "utils.test_visibility_penalty.test_multiple_penalty_sources",
      "utils.test_visibility_penalty.test_multiple_penalty_sources",
      "utils.test_visibility_penalty.test_multiple_penalty_sources",
      "utils.test_visibility_penalty.test_multiple_penalty_sources",
      "utils.test_visibility_penalty.test_multiple_penalty_sources",
      "utils.test_visibility_penalty.test_multiple_penalty_sources",
      "utils.test_visibility_penalty.test_multiple_penalty_sources",
      "utils.test_visibility_penalty.test_multiple_penalty_sources",
      "utils.test_visibility_penalty.test_missing_env_field",
      "utils.test_visibility_penalty.test_missing_env_field",
      "utils.test_visibility_penalty.test_missing_env_field",
      "utils.test_visibility_penalty.test_missing_env_field",
      "utils.test_visibility_penalty.test_missing_env_field",
      "utils.test_visibility_penalty.test_missing_env_field",
      "utils.test_visibility_penalty.test_missing_env_field",
      "utils.test_visibility_penalty.test_missing_env_field",
      "utils.test_visibility_penalty.test_missing_env_field",
      "utils.test_visibility_penalty.test_empty_path",
      "utils.test_visibility_penalty.test_empty_path",
      "utils.test_visibility_penalty.test_empty_path",
      "utils.test_visibility_penalty.test_empty_path",
      "utils.test_visibility_penalty.test_empty_path",
      "utils.test_visibility_penalty.test_empty_path",
      "utils.test_visibility_penalty.test_empty_path",
      "utils.test_visibility_penalty.test_empty_path",
      "utils.test_visibility_penalty.test_empty_path",
      "utils.test_visibility_penalty.test_invalid_path_type",
      "utils.test_visibility_penalty.test_invalid_path_type",
      "utils.test_visibility_penalty.test_invalid_path_type",
      "utils.test_visibility_penalty.test_invalid_path_type",
      "utils.test_visibility_penalty.test_invalid_path_type",
      "utils.test_visibility_penalty.test_invalid_path_type",
      "utils.test_visibility_penalty.test_invalid_path_type",
      "utils.test_visibility_penalty.test_invalid_path_type",
      "utils.test_visibility_penalty.test_invalid_path_type",
      "utils.test_visibility_penalty.test_step_not_dict",
      "utils.test_visibility_penalty.test_step_not_dict",
      "utils.test_visibility_penalty.test_step_not_dict",
      "utils.test_visibility_penalty.test_step_not_dict",
      "utils.test_visibility_penalty.test_step_not_dict",
      "utils.test_visibility_penalty.test_step_not_dict",
      "utils.test_visibility_penalty.test_step_not_dict",
      "utils.test_visibility_penalty.test_step_not_dict",
      "utils.test_visibility_penalty.test_step_not_dict",
      "utils.test_visibility_penalty.test_missing_tile_dict",
      "utils.test_visibility_penalty.test_missing_tile_dict",
      "utils.test_visibility_penalty.test_missing_tile_dict",
      "utils.test_visibility_penalty.test_missing_tile_dict",
      "utils.test_visibility_penalty.test_missing_tile_dict",
      "utils.test_visibility_penalty.test_missing_tile_dict",
      "utils.test_visibility_penalty.test_missing_tile_dict",
      "utils.test_visibility_penalty.test_missing_tile_dict",
      "utils.test_visibility_penalty.test_missing_tile_dict",
      "utils.test_visibility_penalty.test_env_not_list",
      "utils.test_visibility_penalty.test_env_not_list",
      "utils.test_visibility_penalty.test_env_not_list",
      "utils.test_visibility_penalty.test_env_not_list",
      "utils.test_visibility_penalty.test_env_not_list",
      "utils.test_visibility_penalty.test_env_not_list",
      "utils.test_visibility_penalty.test_env_not_list",
      "utils.test_visibility_penalty.test_env_not_list",
      "utils.test_visibility_penalty.test_env_not_list"
    ],
    "calls_fqns": [
      "utils.debug_utils.debug",
      "utils.movement_utils.distance_between_zones",
      "utils.visibility_utils.get_visibility_caps",
      "utils.visibility_utils.trace_visibility_path",
      "utils.visibility_utils.visual_coverage"
    ]
  },
  "utils.world_utils": {
    "fqname": "utils.world_utils",
    "type": "module",
    "description": "",
    "tags": [],
    "source_file": "utils\\world_utils.py",
    "test_coverage": false,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "utils.world_utils",
      "module": "utils.world_utils",
      "name": "utils.world_utils",
      "type": "module",
      "lineno": 1,
      "source_file": "utils\\world_utils.py",
      "description": "",
      "docstring_full": "",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": false,
      "metadata": {}
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "utils.world_utils.get_all_actors_in_room": {
    "fqname": "utils.world_utils.get_all_actors_in_room",
    "type": "function",
    "description": "Placeholder for retrieving all actors in a room.",
    "tags": [],
    "source_file": "utils\\world_utils.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "utils.world_utils.get_all_actors_in_room",
      "module": "utils.world_utils",
      "name": "get_all_actors_in_room",
      "type": "function",
      "lineno": 4,
      "source_file": "utils\\world_utils.py",
      "description": "Placeholder for retrieving all actors in a room.",
      "docstring_full": "Placeholder for retrieving all actors in a room.\n\n@ignore: stub — not integrated with room system",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "room"
        ],
        "returns": null
      }
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "utils.world_utils.remove_dead_entities": {
    "fqname": "utils.world_utils.remove_dead_entities",
    "type": "function",
    "description": "Placeholder for purging actors flagged as dead.",
    "tags": [],
    "source_file": "utils\\world_utils.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "utils.world_utils.remove_dead_entities",
      "module": "utils.world_utils",
      "name": "remove_dead_entities",
      "type": "function",
      "lineno": 12,
      "source_file": "utils\\world_utils.py",
      "description": "Placeholder for purging actors flagged as dead.",
      "docstring_full": "Placeholder for purging actors flagged as dead.\n\n@ignore: stub — no actor cleanup system yet",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [],
        "returns": null
      }
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "utils.world_utils.transfer_loot_to_room": {
    "fqname": "utils.world_utils.transfer_loot_to_room",
    "type": "function",
    "description": "Placeholder for moving NPC-held loot into the room on death.",
    "tags": [],
    "source_file": "utils\\world_utils.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "utils.world_utils.transfer_loot_to_room",
      "module": "utils.world_utils",
      "name": "transfer_loot_to_room",
      "type": "function",
      "lineno": 20,
      "source_file": "utils\\world_utils.py",
      "description": "Placeholder for moving NPC-held loot into the room on death.",
      "docstring_full": "Placeholder for moving NPC-held loot into the room on death.\n\n@ignore: stub — loot routing not implemented",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "npc"
        ],
        "returns": null
      }
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "utils.__init__": {
    "fqname": "utils.__init__",
    "type": "module",
    "description": "",
    "tags": [],
    "source_file": "utils\\__init__.py",
    "test_coverage": false,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "utils.__init__",
      "module": "utils.__init__",
      "name": "utils.__init__",
      "type": "module",
      "lineno": 1,
      "source_file": "utils\\__init__.py",
      "description": "",
      "docstring_full": "",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": false,
      "metadata": {}
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "world.discovery": {
    "fqname": "world.discovery",
    "type": "module",
    "description": "TileGenerator is responsible for instantiating HexTiles into full terrain and features.",
    "tags": [],
    "source_file": "world\\discovery.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "world.discovery",
      "module": "world.discovery",
      "name": "world.discovery",
      "type": "module",
      "lineno": 1,
      "source_file": "world\\discovery.py",
      "description": "TileGenerator is responsible for instantiating HexTiles into full terrain and features.",
      "docstring_full": "TileGenerator is responsible for instantiating HexTiles into full terrain and features.\n\n@ignore: stub — placeholder world tile generator with no output logic",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {}
    },
    "links": [
      {
        "target": "world.discovery.sample_biome",
        "type": "calls"
      },
      {
        "target": "world.generation.sample_biome",
        "type": "calls"
      },
      {
        "target": "world.discovery.sample_elevation",
        "type": "calls"
      },
      {
        "target": "world.generation.sample_elevation",
        "type": "calls"
      },
      {
        "target": "world.discovery.sample_moisture",
        "type": "calls"
      },
      {
        "target": "world.generation.sample_moisture",
        "type": "calls"
      },
      {
        "target": "world.discovery.sample_features",
        "type": "calls"
      },
      {
        "target": "world.generation.sample_features",
        "type": "calls"
      }
    ],
    "called_by_fqns": [],
    "calls_fqns": [
      "world.discovery.sample_biome",
      "world.discovery.sample_elevation",
      "world.discovery.sample_features",
      "world.discovery.sample_moisture",
      "world.generation.sample_biome",
      "world.generation.sample_elevation",
      "world.generation.sample_features",
      "world.generation.sample_moisture"
    ]
  },
  "world.discovery.TileGenerator": {
    "fqname": "world.discovery.TileGenerator",
    "type": "class",
    "description": "Mock generator for terrain tile features. Currently returns static values.",
    "tags": [],
    "source_file": "world\\discovery.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "world.discovery.TileGenerator",
      "module": "world.discovery",
      "name": "TileGenerator",
      "type": "class",
      "lineno": 9,
      "source_file": "world\\discovery.py",
      "description": "Mock generator for terrain tile features. Currently returns static values.",
      "docstring_full": "Mock generator for terrain tile features. Currently returns static values.\n\n@ignore: inactive — not used by any system",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {}
    },
    "links": [
      {
        "target": "world.discovery.sample_biome",
        "type": "calls"
      },
      {
        "target": "world.generation.sample_biome",
        "type": "calls"
      },
      {
        "target": "world.discovery.sample_elevation",
        "type": "calls"
      },
      {
        "target": "world.generation.sample_elevation",
        "type": "calls"
      },
      {
        "target": "world.discovery.sample_moisture",
        "type": "calls"
      },
      {
        "target": "world.generation.sample_moisture",
        "type": "calls"
      },
      {
        "target": "world.discovery.sample_features",
        "type": "calls"
      },
      {
        "target": "world.generation.sample_features",
        "type": "calls"
      }
    ],
    "called_by_fqns": [],
    "calls_fqns": [
      "world.discovery.sample_biome",
      "world.discovery.sample_elevation",
      "world.discovery.sample_features",
      "world.discovery.sample_moisture",
      "world.generation.sample_biome",
      "world.generation.sample_elevation",
      "world.generation.sample_features",
      "world.generation.sample_moisture"
    ]
  },
  "world.discovery.__init__": {
    "fqname": "world.discovery.__init__",
    "type": "method",
    "description": "",
    "tags": [],
    "source_file": "world\\discovery.py",
    "test_coverage": false,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "world.discovery.__init__",
      "module": "world.discovery",
      "name": "__init__",
      "type": "method",
      "lineno": 15,
      "source_file": "world\\discovery.py",
      "description": "",
      "docstring_full": "",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": false,
      "metadata": {
        "args": [
          "self",
          "world_seed"
        ],
        "returns": null
      }
    },
    "links": [
      {
        "target": "world.discovery.sample_biome",
        "type": "calls"
      },
      {
        "target": "world.generation.sample_biome",
        "type": "calls"
      },
      {
        "target": "world.discovery.sample_elevation",
        "type": "calls"
      },
      {
        "target": "world.generation.sample_elevation",
        "type": "calls"
      },
      {
        "target": "world.discovery.sample_moisture",
        "type": "calls"
      },
      {
        "target": "world.generation.sample_moisture",
        "type": "calls"
      },
      {
        "target": "world.discovery.sample_features",
        "type": "calls"
      },
      {
        "target": "world.generation.sample_features",
        "type": "calls"
      }
    ],
    "called_by_fqns": [],
    "calls_fqns": [
      "world.discovery.sample_biome",
      "world.discovery.sample_elevation",
      "world.discovery.sample_features",
      "world.discovery.sample_moisture",
      "world.generation.sample_biome",
      "world.generation.sample_elevation",
      "world.generation.sample_features",
      "world.generation.sample_moisture"
    ]
  },
  "world.discovery.generate_tile": {
    "fqname": "world.discovery.generate_tile",
    "type": "method",
    "description": "Populate a tile's biome, elevation, moisture, and features.",
    "tags": [],
    "source_file": "world\\discovery.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "world.discovery.generate_tile",
      "module": "world.discovery",
      "name": "generate_tile",
      "type": "method",
      "lineno": 18,
      "source_file": "world\\discovery.py",
      "description": "Populate a tile's biome, elevation, moisture, and features.",
      "docstring_full": "Populate a tile's biome, elevation, moisture, and features.\n\n@ignore",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "self",
          "tile",
          "neighbors"
        ],
        "returns": null
      }
    },
    "links": [
      {
        "target": "world.discovery.sample_biome",
        "type": "calls"
      },
      {
        "target": "world.generation.sample_biome",
        "type": "calls"
      },
      {
        "target": "world.discovery.sample_elevation",
        "type": "calls"
      },
      {
        "target": "world.generation.sample_elevation",
        "type": "calls"
      },
      {
        "target": "world.discovery.sample_moisture",
        "type": "calls"
      },
      {
        "target": "world.generation.sample_moisture",
        "type": "calls"
      },
      {
        "target": "world.discovery.sample_features",
        "type": "calls"
      },
      {
        "target": "world.generation.sample_features",
        "type": "calls"
      }
    ],
    "called_by_fqns": [],
    "calls_fqns": [
      "world.discovery.sample_biome",
      "world.discovery.sample_elevation",
      "world.discovery.sample_features",
      "world.discovery.sample_moisture",
      "world.generation.sample_biome",
      "world.generation.sample_elevation",
      "world.generation.sample_features",
      "world.generation.sample_moisture"
    ]
  },
  "world.discovery.sample_biome": {
    "fqname": "world.discovery.sample_biome",
    "type": "method",
    "description": "Stub biome sampler.",
    "tags": [],
    "source_file": "world\\discovery.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "world.discovery.sample_biome",
      "module": "world.discovery",
      "name": "sample_biome",
      "type": "method",
      "lineno": 30,
      "source_file": "world\\discovery.py",
      "description": "Stub biome sampler.",
      "docstring_full": "Stub biome sampler.\n\n@ignore",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "self",
          "tile",
          "neighbors"
        ],
        "returns": null
      }
    },
    "links": [
      {
        "target": "world.discovery.sample_biome",
        "type": "calls"
      },
      {
        "target": "world.generation.sample_biome",
        "type": "calls"
      },
      {
        "target": "world.discovery.sample_elevation",
        "type": "calls"
      },
      {
        "target": "world.generation.sample_elevation",
        "type": "calls"
      },
      {
        "target": "world.discovery.sample_moisture",
        "type": "calls"
      },
      {
        "target": "world.generation.sample_moisture",
        "type": "calls"
      },
      {
        "target": "world.discovery.sample_features",
        "type": "calls"
      },
      {
        "target": "world.generation.sample_features",
        "type": "calls"
      }
    ],
    "called_by_fqns": [
      "world.discovery",
      "world.discovery.TileGenerator",
      "world.discovery.__init__",
      "world.discovery.generate_tile",
      "world.discovery.sample_biome",
      "world.discovery.sample_elevation",
      "world.discovery.sample_moisture",
      "world.discovery.sample_features",
      "world.generation",
      "world.generation.TileGenerator",
      "world.generation.__init__",
      "world.generation.generate_tile",
      "world.generation.sample_biome",
      "world.generation.sample_elevation",
      "world.generation.sample_moisture",
      "world.generation.sample_features"
    ],
    "calls_fqns": [
      "world.discovery.sample_biome",
      "world.discovery.sample_elevation",
      "world.discovery.sample_features",
      "world.discovery.sample_moisture",
      "world.generation.sample_biome",
      "world.generation.sample_elevation",
      "world.generation.sample_features",
      "world.generation.sample_moisture"
    ]
  },
  "world.discovery.sample_elevation": {
    "fqname": "world.discovery.sample_elevation",
    "type": "method",
    "description": "Stub elevation sampler.",
    "tags": [],
    "source_file": "world\\discovery.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "world.discovery.sample_elevation",
      "module": "world.discovery",
      "name": "sample_elevation",
      "type": "method",
      "lineno": 38,
      "source_file": "world\\discovery.py",
      "description": "Stub elevation sampler.",
      "docstring_full": "Stub elevation sampler.\n\n@ignore",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "self",
          "tile",
          "neighbors"
        ],
        "returns": null
      }
    },
    "links": [
      {
        "target": "world.discovery.sample_biome",
        "type": "calls"
      },
      {
        "target": "world.generation.sample_biome",
        "type": "calls"
      },
      {
        "target": "world.discovery.sample_elevation",
        "type": "calls"
      },
      {
        "target": "world.generation.sample_elevation",
        "type": "calls"
      },
      {
        "target": "world.discovery.sample_moisture",
        "type": "calls"
      },
      {
        "target": "world.generation.sample_moisture",
        "type": "calls"
      },
      {
        "target": "world.discovery.sample_features",
        "type": "calls"
      },
      {
        "target": "world.generation.sample_features",
        "type": "calls"
      }
    ],
    "called_by_fqns": [
      "world.discovery",
      "world.discovery.TileGenerator",
      "world.discovery.__init__",
      "world.discovery.generate_tile",
      "world.discovery.sample_biome",
      "world.discovery.sample_elevation",
      "world.discovery.sample_moisture",
      "world.discovery.sample_features",
      "world.generation",
      "world.generation.TileGenerator",
      "world.generation.__init__",
      "world.generation.generate_tile",
      "world.generation.sample_biome",
      "world.generation.sample_elevation",
      "world.generation.sample_moisture",
      "world.generation.sample_features"
    ],
    "calls_fqns": [
      "world.discovery.sample_biome",
      "world.discovery.sample_elevation",
      "world.discovery.sample_features",
      "world.discovery.sample_moisture",
      "world.generation.sample_biome",
      "world.generation.sample_elevation",
      "world.generation.sample_features",
      "world.generation.sample_moisture"
    ]
  },
  "world.discovery.sample_moisture": {
    "fqname": "world.discovery.sample_moisture",
    "type": "method",
    "description": "Stub moisture sampler.",
    "tags": [],
    "source_file": "world\\discovery.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "world.discovery.sample_moisture",
      "module": "world.discovery",
      "name": "sample_moisture",
      "type": "method",
      "lineno": 46,
      "source_file": "world\\discovery.py",
      "description": "Stub moisture sampler.",
      "docstring_full": "Stub moisture sampler.\n\n@ignore",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "self",
          "tile",
          "neighbors"
        ],
        "returns": null
      }
    },
    "links": [
      {
        "target": "world.discovery.sample_biome",
        "type": "calls"
      },
      {
        "target": "world.generation.sample_biome",
        "type": "calls"
      },
      {
        "target": "world.discovery.sample_elevation",
        "type": "calls"
      },
      {
        "target": "world.generation.sample_elevation",
        "type": "calls"
      },
      {
        "target": "world.discovery.sample_moisture",
        "type": "calls"
      },
      {
        "target": "world.generation.sample_moisture",
        "type": "calls"
      },
      {
        "target": "world.discovery.sample_features",
        "type": "calls"
      },
      {
        "target": "world.generation.sample_features",
        "type": "calls"
      }
    ],
    "called_by_fqns": [
      "world.discovery",
      "world.discovery.TileGenerator",
      "world.discovery.__init__",
      "world.discovery.generate_tile",
      "world.discovery.sample_biome",
      "world.discovery.sample_elevation",
      "world.discovery.sample_moisture",
      "world.discovery.sample_features",
      "world.generation",
      "world.generation.TileGenerator",
      "world.generation.__init__",
      "world.generation.generate_tile",
      "world.generation.sample_biome",
      "world.generation.sample_elevation",
      "world.generation.sample_moisture",
      "world.generation.sample_features"
    ],
    "calls_fqns": [
      "world.discovery.sample_biome",
      "world.discovery.sample_elevation",
      "world.discovery.sample_features",
      "world.discovery.sample_moisture",
      "world.generation.sample_biome",
      "world.generation.sample_elevation",
      "world.generation.sample_features",
      "world.generation.sample_moisture"
    ]
  },
  "world.discovery.sample_features": {
    "fqname": "world.discovery.sample_features",
    "type": "method",
    "description": "Stub feature generator.",
    "tags": [],
    "source_file": "world\\discovery.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "world.discovery.sample_features",
      "module": "world.discovery",
      "name": "sample_features",
      "type": "method",
      "lineno": 54,
      "source_file": "world\\discovery.py",
      "description": "Stub feature generator.",
      "docstring_full": "Stub feature generator.\n\n@ignore",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "self",
          "tile",
          "neighbors"
        ],
        "returns": null
      }
    },
    "links": [
      {
        "target": "world.discovery.sample_biome",
        "type": "calls"
      },
      {
        "target": "world.generation.sample_biome",
        "type": "calls"
      },
      {
        "target": "world.discovery.sample_elevation",
        "type": "calls"
      },
      {
        "target": "world.generation.sample_elevation",
        "type": "calls"
      },
      {
        "target": "world.discovery.sample_moisture",
        "type": "calls"
      },
      {
        "target": "world.generation.sample_moisture",
        "type": "calls"
      },
      {
        "target": "world.discovery.sample_features",
        "type": "calls"
      },
      {
        "target": "world.generation.sample_features",
        "type": "calls"
      }
    ],
    "called_by_fqns": [
      "world.discovery",
      "world.discovery.TileGenerator",
      "world.discovery.__init__",
      "world.discovery.generate_tile",
      "world.discovery.sample_biome",
      "world.discovery.sample_elevation",
      "world.discovery.sample_moisture",
      "world.discovery.sample_features",
      "world.generation",
      "world.generation.TileGenerator",
      "world.generation.__init__",
      "world.generation.generate_tile",
      "world.generation.sample_biome",
      "world.generation.sample_elevation",
      "world.generation.sample_moisture",
      "world.generation.sample_features"
    ],
    "calls_fqns": [
      "world.discovery.sample_biome",
      "world.discovery.sample_elevation",
      "world.discovery.sample_features",
      "world.discovery.sample_moisture",
      "world.generation.sample_biome",
      "world.generation.sample_elevation",
      "world.generation.sample_features",
      "world.generation.sample_moisture"
    ]
  },
  "world.generation": {
    "fqname": "world.generation",
    "type": "module",
    "description": "TileGenerator is responsible for instantiating HexTiles into full terrain and features.",
    "tags": [],
    "source_file": "world\\generation.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "world.generation",
      "module": "world.generation",
      "name": "world.generation",
      "type": "module",
      "lineno": 1,
      "source_file": "world\\generation.py",
      "description": "TileGenerator is responsible for instantiating HexTiles into full terrain and features.",
      "docstring_full": "TileGenerator is responsible for instantiating HexTiles into full terrain and features.",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {}
    },
    "links": [
      {
        "target": "world.discovery.sample_biome",
        "type": "calls"
      },
      {
        "target": "world.generation.sample_biome",
        "type": "calls"
      },
      {
        "target": "world.discovery.sample_elevation",
        "type": "calls"
      },
      {
        "target": "world.generation.sample_elevation",
        "type": "calls"
      },
      {
        "target": "world.discovery.sample_moisture",
        "type": "calls"
      },
      {
        "target": "world.generation.sample_moisture",
        "type": "calls"
      },
      {
        "target": "world.discovery.sample_features",
        "type": "calls"
      },
      {
        "target": "world.generation.sample_features",
        "type": "calls"
      }
    ],
    "called_by_fqns": [],
    "calls_fqns": [
      "world.discovery.sample_biome",
      "world.discovery.sample_elevation",
      "world.discovery.sample_features",
      "world.discovery.sample_moisture",
      "world.generation.sample_biome",
      "world.generation.sample_elevation",
      "world.generation.sample_features",
      "world.generation.sample_moisture"
    ]
  },
  "world.generation.TileGenerator": {
    "fqname": "world.generation.TileGenerator",
    "type": "class",
    "description": "",
    "tags": [],
    "source_file": "world\\generation.py",
    "test_coverage": false,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "world.generation.TileGenerator",
      "module": "world.generation",
      "name": "TileGenerator",
      "type": "class",
      "lineno": 7,
      "source_file": "world\\generation.py",
      "description": "",
      "docstring_full": "",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": false,
      "metadata": {}
    },
    "links": [
      {
        "target": "world.discovery.sample_biome",
        "type": "calls"
      },
      {
        "target": "world.generation.sample_biome",
        "type": "calls"
      },
      {
        "target": "world.discovery.sample_elevation",
        "type": "calls"
      },
      {
        "target": "world.generation.sample_elevation",
        "type": "calls"
      },
      {
        "target": "world.discovery.sample_moisture",
        "type": "calls"
      },
      {
        "target": "world.generation.sample_moisture",
        "type": "calls"
      },
      {
        "target": "world.discovery.sample_features",
        "type": "calls"
      },
      {
        "target": "world.generation.sample_features",
        "type": "calls"
      }
    ],
    "called_by_fqns": [],
    "calls_fqns": [
      "world.discovery.sample_biome",
      "world.discovery.sample_elevation",
      "world.discovery.sample_features",
      "world.discovery.sample_moisture",
      "world.generation.sample_biome",
      "world.generation.sample_elevation",
      "world.generation.sample_features",
      "world.generation.sample_moisture"
    ]
  },
  "world.generation.__init__": {
    "fqname": "world.generation.__init__",
    "type": "method",
    "description": "",
    "tags": [],
    "source_file": "world\\generation.py",
    "test_coverage": false,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "world.generation.__init__",
      "module": "world.generation",
      "name": "__init__",
      "type": "method",
      "lineno": 8,
      "source_file": "world\\generation.py",
      "description": "",
      "docstring_full": "",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": false,
      "metadata": {
        "args": [
          "self",
          "world_seed"
        ],
        "returns": null
      }
    },
    "links": [
      {
        "target": "world.discovery.sample_biome",
        "type": "calls"
      },
      {
        "target": "world.generation.sample_biome",
        "type": "calls"
      },
      {
        "target": "world.discovery.sample_elevation",
        "type": "calls"
      },
      {
        "target": "world.generation.sample_elevation",
        "type": "calls"
      },
      {
        "target": "world.discovery.sample_moisture",
        "type": "calls"
      },
      {
        "target": "world.generation.sample_moisture",
        "type": "calls"
      },
      {
        "target": "world.discovery.sample_features",
        "type": "calls"
      },
      {
        "target": "world.generation.sample_features",
        "type": "calls"
      }
    ],
    "called_by_fqns": [],
    "calls_fqns": [
      "world.discovery.sample_biome",
      "world.discovery.sample_elevation",
      "world.discovery.sample_features",
      "world.discovery.sample_moisture",
      "world.generation.sample_biome",
      "world.generation.sample_elevation",
      "world.generation.sample_features",
      "world.generation.sample_moisture"
    ]
  },
  "world.generation.generate_tile": {
    "fqname": "world.generation.generate_tile",
    "type": "method",
    "description": "",
    "tags": [],
    "source_file": "world\\generation.py",
    "test_coverage": false,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "world.generation.generate_tile",
      "module": "world.generation",
      "name": "generate_tile",
      "type": "method",
      "lineno": 11,
      "source_file": "world\\generation.py",
      "description": "",
      "docstring_full": "",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": false,
      "metadata": {
        "args": [
          "self",
          "tile",
          "neighbors"
        ],
        "returns": null
      }
    },
    "links": [
      {
        "target": "world.discovery.sample_biome",
        "type": "calls"
      },
      {
        "target": "world.generation.sample_biome",
        "type": "calls"
      },
      {
        "target": "world.discovery.sample_elevation",
        "type": "calls"
      },
      {
        "target": "world.generation.sample_elevation",
        "type": "calls"
      },
      {
        "target": "world.discovery.sample_moisture",
        "type": "calls"
      },
      {
        "target": "world.generation.sample_moisture",
        "type": "calls"
      },
      {
        "target": "world.discovery.sample_features",
        "type": "calls"
      },
      {
        "target": "world.generation.sample_features",
        "type": "calls"
      }
    ],
    "called_by_fqns": [],
    "calls_fqns": [
      "world.discovery.sample_biome",
      "world.discovery.sample_elevation",
      "world.discovery.sample_features",
      "world.discovery.sample_moisture",
      "world.generation.sample_biome",
      "world.generation.sample_elevation",
      "world.generation.sample_features",
      "world.generation.sample_moisture"
    ]
  },
  "world.generation.sample_biome": {
    "fqname": "world.generation.sample_biome",
    "type": "method",
    "description": "",
    "tags": [],
    "source_file": "world\\generation.py",
    "test_coverage": false,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "world.generation.sample_biome",
      "module": "world.generation",
      "name": "sample_biome",
      "type": "method",
      "lineno": 18,
      "source_file": "world\\generation.py",
      "description": "",
      "docstring_full": "",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": false,
      "metadata": {
        "args": [
          "self",
          "tile",
          "neighbors"
        ],
        "returns": null
      }
    },
    "links": [
      {
        "target": "world.discovery.sample_biome",
        "type": "calls"
      },
      {
        "target": "world.generation.sample_biome",
        "type": "calls"
      },
      {
        "target": "world.discovery.sample_elevation",
        "type": "calls"
      },
      {
        "target": "world.generation.sample_elevation",
        "type": "calls"
      },
      {
        "target": "world.discovery.sample_moisture",
        "type": "calls"
      },
      {
        "target": "world.generation.sample_moisture",
        "type": "calls"
      },
      {
        "target": "world.discovery.sample_features",
        "type": "calls"
      },
      {
        "target": "world.generation.sample_features",
        "type": "calls"
      }
    ],
    "called_by_fqns": [
      "world.discovery",
      "world.discovery.TileGenerator",
      "world.discovery.__init__",
      "world.discovery.generate_tile",
      "world.discovery.sample_biome",
      "world.discovery.sample_elevation",
      "world.discovery.sample_moisture",
      "world.discovery.sample_features",
      "world.generation",
      "world.generation.TileGenerator",
      "world.generation.__init__",
      "world.generation.generate_tile",
      "world.generation.sample_biome",
      "world.generation.sample_elevation",
      "world.generation.sample_moisture",
      "world.generation.sample_features"
    ],
    "calls_fqns": [
      "world.discovery.sample_biome",
      "world.discovery.sample_elevation",
      "world.discovery.sample_features",
      "world.discovery.sample_moisture",
      "world.generation.sample_biome",
      "world.generation.sample_elevation",
      "world.generation.sample_features",
      "world.generation.sample_moisture"
    ]
  },
  "world.generation.sample_elevation": {
    "fqname": "world.generation.sample_elevation",
    "type": "method",
    "description": "",
    "tags": [],
    "source_file": "world\\generation.py",
    "test_coverage": false,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "world.generation.sample_elevation",
      "module": "world.generation",
      "name": "sample_elevation",
      "type": "method",
      "lineno": 21,
      "source_file": "world\\generation.py",
      "description": "",
      "docstring_full": "",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": false,
      "metadata": {
        "args": [
          "self",
          "tile",
          "neighbors"
        ],
        "returns": null
      }
    },
    "links": [
      {
        "target": "world.discovery.sample_biome",
        "type": "calls"
      },
      {
        "target": "world.generation.sample_biome",
        "type": "calls"
      },
      {
        "target": "world.discovery.sample_elevation",
        "type": "calls"
      },
      {
        "target": "world.generation.sample_elevation",
        "type": "calls"
      },
      {
        "target": "world.discovery.sample_moisture",
        "type": "calls"
      },
      {
        "target": "world.generation.sample_moisture",
        "type": "calls"
      },
      {
        "target": "world.discovery.sample_features",
        "type": "calls"
      },
      {
        "target": "world.generation.sample_features",
        "type": "calls"
      }
    ],
    "called_by_fqns": [
      "world.discovery",
      "world.discovery.TileGenerator",
      "world.discovery.__init__",
      "world.discovery.generate_tile",
      "world.discovery.sample_biome",
      "world.discovery.sample_elevation",
      "world.discovery.sample_moisture",
      "world.discovery.sample_features",
      "world.generation",
      "world.generation.TileGenerator",
      "world.generation.__init__",
      "world.generation.generate_tile",
      "world.generation.sample_biome",
      "world.generation.sample_elevation",
      "world.generation.sample_moisture",
      "world.generation.sample_features"
    ],
    "calls_fqns": [
      "world.discovery.sample_biome",
      "world.discovery.sample_elevation",
      "world.discovery.sample_features",
      "world.discovery.sample_moisture",
      "world.generation.sample_biome",
      "world.generation.sample_elevation",
      "world.generation.sample_features",
      "world.generation.sample_moisture"
    ]
  },
  "world.generation.sample_moisture": {
    "fqname": "world.generation.sample_moisture",
    "type": "method",
    "description": "",
    "tags": [],
    "source_file": "world\\generation.py",
    "test_coverage": false,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "world.generation.sample_moisture",
      "module": "world.generation",
      "name": "sample_moisture",
      "type": "method",
      "lineno": 24,
      "source_file": "world\\generation.py",
      "description": "",
      "docstring_full": "",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": false,
      "metadata": {
        "args": [
          "self",
          "tile",
          "neighbors"
        ],
        "returns": null
      }
    },
    "links": [
      {
        "target": "world.discovery.sample_biome",
        "type": "calls"
      },
      {
        "target": "world.generation.sample_biome",
        "type": "calls"
      },
      {
        "target": "world.discovery.sample_elevation",
        "type": "calls"
      },
      {
        "target": "world.generation.sample_elevation",
        "type": "calls"
      },
      {
        "target": "world.discovery.sample_moisture",
        "type": "calls"
      },
      {
        "target": "world.generation.sample_moisture",
        "type": "calls"
      },
      {
        "target": "world.discovery.sample_features",
        "type": "calls"
      },
      {
        "target": "world.generation.sample_features",
        "type": "calls"
      }
    ],
    "called_by_fqns": [
      "world.discovery",
      "world.discovery.TileGenerator",
      "world.discovery.__init__",
      "world.discovery.generate_tile",
      "world.discovery.sample_biome",
      "world.discovery.sample_elevation",
      "world.discovery.sample_moisture",
      "world.discovery.sample_features",
      "world.generation",
      "world.generation.TileGenerator",
      "world.generation.__init__",
      "world.generation.generate_tile",
      "world.generation.sample_biome",
      "world.generation.sample_elevation",
      "world.generation.sample_moisture",
      "world.generation.sample_features"
    ],
    "calls_fqns": [
      "world.discovery.sample_biome",
      "world.discovery.sample_elevation",
      "world.discovery.sample_features",
      "world.discovery.sample_moisture",
      "world.generation.sample_biome",
      "world.generation.sample_elevation",
      "world.generation.sample_features",
      "world.generation.sample_moisture"
    ]
  },
  "world.generation.sample_features": {
    "fqname": "world.generation.sample_features",
    "type": "method",
    "description": "",
    "tags": [],
    "source_file": "world\\generation.py",
    "test_coverage": false,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "world.generation.sample_features",
      "module": "world.generation",
      "name": "sample_features",
      "type": "method",
      "lineno": 27,
      "source_file": "world\\generation.py",
      "description": "",
      "docstring_full": "",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": false,
      "metadata": {
        "args": [
          "self",
          "tile",
          "neighbors"
        ],
        "returns": null
      }
    },
    "links": [
      {
        "target": "world.discovery.sample_biome",
        "type": "calls"
      },
      {
        "target": "world.generation.sample_biome",
        "type": "calls"
      },
      {
        "target": "world.discovery.sample_elevation",
        "type": "calls"
      },
      {
        "target": "world.generation.sample_elevation",
        "type": "calls"
      },
      {
        "target": "world.discovery.sample_moisture",
        "type": "calls"
      },
      {
        "target": "world.generation.sample_moisture",
        "type": "calls"
      },
      {
        "target": "world.discovery.sample_features",
        "type": "calls"
      },
      {
        "target": "world.generation.sample_features",
        "type": "calls"
      }
    ],
    "called_by_fqns": [
      "world.discovery",
      "world.discovery.TileGenerator",
      "world.discovery.__init__",
      "world.discovery.generate_tile",
      "world.discovery.sample_biome",
      "world.discovery.sample_elevation",
      "world.discovery.sample_moisture",
      "world.discovery.sample_features",
      "world.generation",
      "world.generation.TileGenerator",
      "world.generation.__init__",
      "world.generation.generate_tile",
      "world.generation.sample_biome",
      "world.generation.sample_elevation",
      "world.generation.sample_moisture",
      "world.generation.sample_features"
    ],
    "calls_fqns": [
      "world.discovery.sample_biome",
      "world.discovery.sample_elevation",
      "world.discovery.sample_features",
      "world.discovery.sample_moisture",
      "world.generation.sample_biome",
      "world.generation.sample_elevation",
      "world.generation.sample_features",
      "world.generation.sample_moisture"
    ]
  },
  "world.hex": {
    "fqname": "world.hex",
    "type": "module",
    "description": "Handles HexTile definitions and lazy generation scaffolding.",
    "tags": [],
    "source_file": "world\\hex.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "world.hex",
      "module": "world.hex",
      "name": "world.hex",
      "type": "module",
      "lineno": 1,
      "source_file": "world\\hex.py",
      "description": "Handles HexTile definitions and lazy generation scaffolding.",
      "docstring_full": "Handles HexTile definitions and lazy generation scaffolding.",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {}
    },
    "links": [
      {
        "target": "world.hex.generate_seed",
        "type": "calls"
      }
    ],
    "called_by_fqns": [],
    "calls_fqns": [
      "world.hex.generate_seed"
    ]
  },
  "world.hex.HexTile": {
    "fqname": "world.hex.HexTile",
    "type": "class",
    "description": "Represents a single tile in the axial world coordinate system (q, r).",
    "tags": [],
    "source_file": "world\\hex.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "world.hex.HexTile",
      "module": "world.hex",
      "name": "HexTile",
      "type": "class",
      "lineno": 7,
      "source_file": "world\\hex.py",
      "description": "Represents a single tile in the axial world coordinate system (q, r).",
      "docstring_full": "Represents a single tile in the axial world coordinate system (q, r).\nIntended to serve as a foundational unit in overworld travel and terrain logic.\n\nFields:\n- q, r: axial coordinates\n- seed: tile-specific generation seed\n- biome_tag, elevation, moisture: terrain properties\n- terrain_tags: arbitrary feature tags\n- hinted_features: placeholder for future map features\n- location_stub: optional undiscovered structure reference\n- faction_influence_estimates: placeholder for strategic layer",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {}
    },
    "links": [
      {
        "target": "world.hex.generate_seed",
        "type": "calls"
      }
    ],
    "called_by_fqns": [],
    "calls_fqns": [
      "world.hex.generate_seed"
    ]
  },
  "world.hex.__init__": {
    "fqname": "world.hex.__init__",
    "type": "method",
    "description": "",
    "tags": [],
    "source_file": "world\\hex.py",
    "test_coverage": false,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "world.hex.__init__",
      "module": "world.hex",
      "name": "__init__",
      "type": "method",
      "lineno": 21,
      "source_file": "world\\hex.py",
      "description": "",
      "docstring_full": "",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": false,
      "metadata": {
        "args": [
          "self",
          "q",
          "r",
          "seed"
        ],
        "returns": null
      }
    },
    "links": [
      {
        "target": "world.hex.generate_seed",
        "type": "calls"
      }
    ],
    "called_by_fqns": [],
    "calls_fqns": [
      "world.hex.generate_seed"
    ]
  },
  "world.hex.generate_seed": {
    "fqname": "world.hex.generate_seed",
    "type": "method",
    "description": "Generate a unique integer seed based on tile coordinates.",
    "tags": [],
    "source_file": "world\\hex.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "world.hex.generate_seed",
      "module": "world.hex",
      "name": "generate_seed",
      "type": "method",
      "lineno": 33,
      "source_file": "world\\hex.py",
      "description": "Generate a unique integer seed based on tile coordinates.",
      "docstring_full": "Generate a unique integer seed based on tile coordinates.\n\nReturns:\n    int: reproducible seed based on (q, r)",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "self"
        ],
        "returns": null
      }
    },
    "links": [
      {
        "target": "world.hex.generate_seed",
        "type": "calls"
      }
    ],
    "called_by_fqns": [
      "world.hex",
      "world.hex.HexTile",
      "world.hex.__init__",
      "world.hex.generate_seed",
      "world.hex.coord"
    ],
    "calls_fqns": [
      "world.hex.generate_seed"
    ]
  },
  "world.hex.coord": {
    "fqname": "world.hex.coord",
    "type": "method",
    "description": "Return the axial coordinates of this tile.",
    "tags": [],
    "source_file": "world\\hex.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "world.hex.coord",
      "module": "world.hex",
      "name": "coord",
      "type": "method",
      "lineno": 42,
      "source_file": "world\\hex.py",
      "description": "Return the axial coordinates of this tile.",
      "docstring_full": "Return the axial coordinates of this tile.\n\nReturns:\n    tuple[int, int]: (q, r)",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "self"
        ],
        "returns": null
      }
    },
    "links": [
      {
        "target": "world.hex.generate_seed",
        "type": "calls"
      }
    ],
    "called_by_fqns": [],
    "calls_fqns": [
      "world.hex.generate_seed"
    ]
  }
}