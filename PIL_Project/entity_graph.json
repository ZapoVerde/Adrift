{
  "pipeline": {
    "fqname": "pipeline",
    "type": "module",
    "description": "",
    "tags": [],
    "source_file": "",
    "test_coverage": null,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "type": "module",
      "name": "pipeline",
      "fqname": "pipeline",
      "module": "pipeline",
      "lineno": 1,
      "doc": "Pipeline: Main Entry\n\nCoordinates full metadata graph construction and export from source code.\nThis module is the top-level orchestrator for the Project Intelligence Layer (PIL),\nresponsible for running a complete metadata pass using configuration in pilconfig.json.\n\nSteps:\n- Load config\n- Extract all code symbols in bulk (functions, methods, classes)\n- Normalize minimal graph fields for linkage\n- Build and enrich entity graph\n- Export graph to disk\n- Emit governance exception report"
    },
    "links": []
  },
  "pipeline.config": {
    "fqname": "pipeline.config",
    "type": "variable",
    "description": "",
    "tags": [],
    "source_file": "",
    "test_coverage": null,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "type": "variable",
      "name": "config",
      "fqname": "pipeline.config",
      "module": "pipeline",
      "lineno": 42,
      "doc": "ensure path is passed as string"
    },
    "links": []
  },
  "pipeline.run_pipeline": {
    "fqname": "pipeline.run_pipeline",
    "type": "function",
    "description": "",
    "tags": [],
    "source_file": "",
    "test_coverage": null,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "type": "function",
      "name": "run_pipeline",
      "fqname": "pipeline.run_pipeline",
      "module": "pipeline",
      "lineno": 32,
      "doc": "Execute full metadata extraction and export pipeline.\n\nThis is the entry point called by `scripts/rebuild_pil.py`. It uses\npaths from `pilconfig.json`, loads all top-level Python symbols,\nbuilds the graph, computes call linkages, and writes outputs."
    },
    "links": []
  },
  "entity_graph_builder": {
    "fqname": "entity_graph_builder",
    "type": "module",
    "description": "",
    "tags": [],
    "source_file": "",
    "test_coverage": null,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "type": "module",
      "name": "entity_graph_builder",
      "fqname": "entity_graph_builder",
      "module": "entity_graph_builder",
      "lineno": 1,
      "doc": "Wraps pre-enriched function records into graph nodes.\n\nThis builder assumes that the upstream loader (code_loader) has already\nattached all required metadata, including tags, docstring status, and test\ncoverage placeholders.\n\nOutput format conforms to the `entity_graph.json` specification."
    },
    "links": []
  },
  "entity_graph_builder.build_entity_graph": {
    "fqname": "entity_graph_builder.build_entity_graph",
    "type": "function",
    "description": "",
    "tags": [],
    "source_file": "",
    "test_coverage": null,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "type": "function",
      "name": "build_entity_graph",
      "fqname": "entity_graph_builder.build_entity_graph",
      "module": "entity_graph_builder",
      "lineno": 13,
      "doc": "Wrap each enriched entity into a compliant graph node.\n\nParameters:\n    entities (list[dict]): Raw or enriched entity records.\n\nReturns:\n    dict: fqname \u2192 wrapped graph node"
    },
    "links": []
  },
  "linkage_builder": {
    "fqname": "linkage_builder",
    "type": "module",
    "description": "",
    "tags": [],
    "source_file": "",
    "test_coverage": null,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "type": "module",
      "name": "linkage_builder",
      "fqname": "linkage_builder",
      "module": "linkage_builder",
      "lineno": 1,
      "doc": "Adds call relationships between entities in the graph.\n\nUses AST parsing to detect structural function calls, updates each node with:\n- calls_fqns\n- called_by_fqns\n- links: [ { target, type: \"calls\" } ]\n- is_orphaned (recomputed after linkage)"
    },
    "links": []
  },
  "linkage_builder.extract_called_functions": {
    "fqname": "linkage_builder.extract_called_functions",
    "type": "function",
    "description": "",
    "tags": [],
    "source_file": "",
    "test_coverage": null,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "type": "function",
      "name": "extract_called_functions",
      "fqname": "linkage_builder.extract_called_functions",
      "module": "linkage_builder",
      "lineno": 16,
      "doc": "Parses source code and extracts all function names that are called.\n\nParameters:\n    source (str): The raw source code of a .py file\n\nReturns:\n    list[str]: All direct call targets (unqualified names)"
    },
    "links": []
  },
  "linkage_builder.inject_call_links": {
    "fqname": "linkage_builder.inject_call_links",
    "type": "function",
    "description": "",
    "tags": [],
    "source_file": "",
    "test_coverage": null,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "type": "function",
      "name": "inject_call_links",
      "fqname": "linkage_builder.inject_call_links",
      "module": "linkage_builder",
      "lineno": 43,
      "doc": "Injects structural call links into the entity graph.\n\nParameters:\n    entity_graph (dict): Entity metadata keyed by fqname\n    project_root (str): Project root to re-open source files\n\nReturns:\n    dict: The enriched graph with linkage info"
    },
    "links": []
  },
  "tag_and_link_applier_builders": {
    "fqname": "tag_and_link_applier_builders",
    "type": "module",
    "description": "",
    "tags": [],
    "source_file": "",
    "test_coverage": null,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "type": "module",
      "name": "tag_and_link_applier_builders",
      "fqname": "tag_and_link_applier_builders",
      "module": "tag_and_link_applier_builders",
      "lineno": 1,
      "doc": "Graph Enrichment: Tags and Semantic Links (builders)\n\nPopulates known tags and journal links into the graph based on\nexplicit mappings (not heuristics or inference)."
    },
    "links": []
  },
  "tag_and_link_applier_builders.apply_tags_and_links": {
    "fqname": "tag_and_link_applier_builders.apply_tags_and_links",
    "type": "function",
    "description": "",
    "tags": [],
    "source_file": "",
    "test_coverage": null,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "type": "function",
      "name": "apply_tags_and_links",
      "fqname": "tag_and_link_applier_builders.apply_tags_and_links",
      "module": "tag_and_link_applier_builders",
      "lineno": 9,
      "doc": "Attach known tags and semantic links to specific nodes in the graph.\n\nParameters:\n    graph (dict): Entity graph keyed by fully qualified name (fqname)\n\nReturns:\n    dict: The enriched graph with added tags and semantic links"
    },
    "links": []
  },
  "usage_map_builder": {
    "fqname": "usage_map_builder",
    "type": "module",
    "description": "",
    "tags": [],
    "source_file": "",
    "test_coverage": null,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "type": "module",
      "name": "usage_map_builder",
      "fqname": "usage_map_builder",
      "module": "usage_map_builder",
      "lineno": 1,
      "doc": "Usage Map Builder (builders)\n\nConstructs a forward/reverse reference graph showing usage across the entity set.\nUseful for auditing call relationships beyond simple call trees."
    },
    "links": []
  },
  "usage_map_builder.build_usage_map": {
    "fqname": "usage_map_builder.build_usage_map",
    "type": "function",
    "description": "",
    "tags": [],
    "source_file": "",
    "test_coverage": null,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "type": "function",
      "name": "build_usage_map",
      "fqname": "usage_map_builder.build_usage_map",
      "module": "usage_map_builder",
      "lineno": 11,
      "doc": "Create bidirectional usage summaries for each FQ name.\n\nParameters:\n    graph (dict): Full graph with calls_fqns available on each node\n\nReturns:\n    dict: { fqname: { used_by: [...], uses: [...] } }"
    },
    "links": []
  },
  "variable_usage_builder": {
    "fqname": "variable_usage_builder",
    "type": "module",
    "description": "",
    "tags": [],
    "source_file": "",
    "test_coverage": null,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "type": "module",
      "name": "variable_usage_builder",
      "fqname": "variable_usage_builder",
      "module": "variable_usage_builder",
      "lineno": 1,
      "doc": "Variable Usage Map Builder (builders)\n\nFinds all variables (top-level assignments) used in more than one module,\nand records which modules use them."
    },
    "links": []
  },
  "variable_usage_builder.build_variable_usage_map": {
    "fqname": "variable_usage_builder.build_variable_usage_map",
    "type": "function",
    "description": "",
    "tags": [],
    "source_file": "",
    "test_coverage": null,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "type": "function",
      "name": "build_variable_usage_map",
      "fqname": "variable_usage_builder.build_variable_usage_map",
      "module": "variable_usage_builder",
      "lineno": 12,
      "doc": "For each variable, scan all other modules for references by name.\n\nParameters:\n    variables (list): List of variable nodes (from loader, type=='variable')\n    all_source_files (list): List of all source Path objects\n    root_path (Path): Project root for relative paths\n\nReturns:\n    dict: fqname -> list of modules (relative paths) where used"
    },
    "links": []
  },
  "json_exporter": {
    "fqname": "json_exporter",
    "type": "module",
    "description": "",
    "tags": [],
    "source_file": "",
    "test_coverage": null,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "type": "module",
      "name": "json_exporter",
      "fqname": "json_exporter",
      "module": "json_exporter",
      "lineno": 1,
      "doc": "Export the full entity graph to a structured JSON file.\n\nPart of the PIL output pipeline. This module writes the final metadata graph\nproduced by `entity_graph_builder.py` to disk in a machine-readable format.\n\nOutputs:\n  - entity_graph.json \u2192 Complete node metadata and semantic linkages\n\nConforms to the PIL metadata strategy:\n  - Includes docstrings, tags, governance flags, and semantic edges\n  - Supports downstream validation, journal linkage, and vault export"
    },
    "links": []
  },
  "json_exporter.export_entity_graph": {
    "fqname": "json_exporter.export_entity_graph",
    "type": "function",
    "description": "",
    "tags": [],
    "source_file": "",
    "test_coverage": null,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "type": "function",
      "name": "export_entity_graph",
      "fqname": "json_exporter.export_entity_graph",
      "module": "json_exporter",
      "lineno": 20,
      "doc": "Write the in-memory entity graph to `entity_graph.json`.\n\nParameters:\n    graph (dict): The keyed graph structure, e.g., { fqname: { ... } }\n    output_dir (str): Directory to emit the file into (relative or absolute)\n\nNotes:\n    - Output path is `${output_dir}/entity_graph.json`\n    - Will create the directory if it does not exist\n    - File is formatted with 2-space indentation"
    },
    "links": []
  },
  "markdown_vault_exporter": {
    "fqname": "markdown_vault_exporter",
    "type": "module",
    "description": "",
    "tags": [],
    "source_file": "",
    "test_coverage": null,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "type": "module",
      "name": "markdown_vault_exporter",
      "fqname": "markdown_vault_exporter",
      "module": "markdown_vault_exporter",
      "lineno": 1,
      "doc": "Markdown Vault Exporter (exporters)\n\nExports the PIL entity graph as Markdown/Obsidian-compatible files for each symbol,\nusing human-friendly names for navigation but always showing the real fqname."
    },
    "links": []
  },
  "markdown_vault_exporter.tags": {
    "fqname": "markdown_vault_exporter.tags",
    "type": "variable",
    "description": "",
    "tags": [],
    "source_file": "",
    "test_coverage": null,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "type": "variable",
      "name": "tags",
      "fqname": "markdown_vault_exporter.tags",
      "module": "markdown_vault_exporter",
      "lineno": 58,
      "doc": "{t.replace(' ', '_')}\" for t in node.get(\"tags\", []))"
    },
    "links": []
  },
  "markdown_vault_exporter.md": {
    "fqname": "markdown_vault_exporter.md",
    "type": "variable",
    "description": "",
    "tags": [],
    "source_file": "",
    "test_coverage": null,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "type": "variable",
      "name": "md",
      "fqname": "markdown_vault_exporter.md",
      "module": "markdown_vault_exporter",
      "lineno": 69,
      "doc": "{friendly}"
    },
    "links": []
  },
  "markdown_vault_exporter.friendly_name": {
    "fqname": "markdown_vault_exporter.friendly_name",
    "type": "function",
    "description": "",
    "tags": [],
    "source_file": "",
    "test_coverage": null,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "type": "function",
      "name": "friendly_name",
      "fqname": "markdown_vault_exporter.friendly_name",
      "module": "markdown_vault_exporter",
      "lineno": 12,
      "doc": "Returns a human-friendly display name for vault navigation,\nwhile preserving real fqname in note metadata."
    },
    "links": []
  },
  "markdown_vault_exporter._sanitize_filename": {
    "fqname": "markdown_vault_exporter._sanitize_filename",
    "type": "function",
    "description": "",
    "tags": [],
    "source_file": "",
    "test_coverage": null,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "type": "function",
      "name": "_sanitize_filename",
      "fqname": "markdown_vault_exporter._sanitize_filename",
      "module": "markdown_vault_exporter",
      "lineno": 34,
      "doc": "Replace slashes and other problematic chars for filesystem safety."
    },
    "links": []
  },
  "markdown_vault_exporter.export_markdown_vault": {
    "fqname": "markdown_vault_exporter.export_markdown_vault",
    "type": "function",
    "description": "",
    "tags": [],
    "source_file": "",
    "test_coverage": null,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "type": "function",
      "name": "export_markdown_vault",
      "fqname": "markdown_vault_exporter.export_markdown_vault",
      "module": "markdown_vault_exporter",
      "lineno": 38,
      "doc": "Export the entity graph as a Markdown vault: one file per node, with friendly names, tags, and links.\n\nParameters:\n    graph (dict): Entity graph keyed by fqname\n    output_dir (str): Output directory for the Markdown vault"
    },
    "links": []
  },
  "md_exporter": {
    "fqname": "md_exporter",
    "type": "module",
    "description": "",
    "tags": [],
    "source_file": "",
    "test_coverage": null,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "type": "module",
      "name": "md_exporter",
      "fqname": "md_exporter",
      "module": "md_exporter",
      "lineno": 1,
      "doc": ""
    },
    "links": []
  },
  "md_exporter.export_entity_markdown": {
    "fqname": "md_exporter.export_entity_markdown",
    "type": "function",
    "description": "",
    "tags": [],
    "source_file": "",
    "test_coverage": null,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "type": "function",
      "name": "export_entity_markdown",
      "fqname": "md_exporter.export_entity_markdown",
      "module": "md_exporter",
      "lineno": 3,
      "doc": "Export a single entity as a Markdown file with metadata and Obsidian links.\n\nArgs:\n    entity (dict): Entity metadata dictionary, e.g. {\n        \"fqname\": \"module.func\",\n        \"type\": \"function\",\n        \"doc\": \"...\",\n        \"tags\": [\"combat\", \"stateful\"],\n        ...\n    }\n    output_dir (str): Directory to write markdown file."
    },
    "links": []
  },
  "variable_usage_report_exporter": {
    "fqname": "variable_usage_report_exporter",
    "type": "module",
    "description": "",
    "tags": [],
    "source_file": "",
    "test_coverage": null,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "type": "module",
      "name": "variable_usage_report_exporter",
      "fqname": "variable_usage_report_exporter",
      "module": "variable_usage_report_exporter",
      "lineno": 1,
      "doc": "Variable Usage Markdown Exporter (exporters)\n\nExports a summary report of variables/lists/constants used in more than one module,\nfor vault, governance, or architectural review."
    },
    "links": []
  },
  "variable_usage_report_exporter.export_variable_usage_markdown": {
    "fqname": "variable_usage_report_exporter.export_variable_usage_markdown",
    "type": "function",
    "description": "",
    "tags": [],
    "source_file": "",
    "test_coverage": null,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "type": "function",
      "name": "export_variable_usage_markdown",
      "fqname": "variable_usage_report_exporter.export_variable_usage_markdown",
      "module": "variable_usage_report_exporter",
      "lineno": 11,
      "doc": "Writes a Markdown summary listing each variable used in multiple modules.\n\nParameters:\n    usage_map (dict): fqname -> list of modules where variable is used\n    output_path (str): Path to output .md file"
    },
    "links": []
  },
  "vault_index_exporter": {
    "fqname": "vault_index_exporter",
    "type": "module",
    "description": "",
    "tags": [],
    "source_file": "",
    "test_coverage": null,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "type": "module",
      "name": "vault_index_exporter",
      "fqname": "vault_index_exporter",
      "module": "vault_index_exporter",
      "lineno": 1,
      "doc": "Vault Index Exporter (exporters)\n\nGenerates an Obsidian-friendly index.md for your code vault,\ngrouped by type, with live Dataview sections and usage links."
    },
    "links": []
  },
  "vault_index_exporter.export_vault_index": {
    "fqname": "vault_index_exporter.export_vault_index",
    "type": "function",
    "description": "",
    "tags": [],
    "source_file": "",
    "test_coverage": null,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "type": "function",
      "name": "export_vault_index",
      "fqname": "vault_index_exporter.export_vault_index",
      "module": "vault_index_exporter",
      "lineno": 12,
      "doc": "Writes an index.md in output_dir listing all code entities grouped by type,\nwith Obsidian links and Dataview live dashboards."
    },
    "links": []
  },
  "code_loader": {
    "fqname": "code_loader",
    "type": "module",
    "description": "",
    "tags": [],
    "source_file": "",
    "test_coverage": null,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "type": "module",
      "name": "code_loader",
      "fqname": "code_loader",
      "module": "code_loader",
      "lineno": 1,
      "doc": "Extract all symbols (function, class, method, variable, module) from a single Python source file."
    },
    "links": []
  },
  "code_loader.if \"": {
    "fqname": "code_loader.if \"",
    "type": "variable",
    "description": "",
    "tags": [],
    "source_file": "",
    "test_coverage": null,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "type": "variable",
      "name": "if \"",
      "fqname": "code_loader.if \"",
      "module": "code_loader",
      "lineno": 40,
      "doc": "\" in line:"
    },
    "links": []
  },
  "code_loader.parts": {
    "fqname": "code_loader.parts",
    "type": "variable",
    "description": "",
    "tags": [],
    "source_file": "",
    "test_coverage": null,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "type": "variable",
      "name": "parts",
      "fqname": "code_loader.parts",
      "module": "code_loader",
      "lineno": 42,
      "doc": "\", 1)"
    },
    "links": []
  },
  "code_loader.load_code_symbols": {
    "fqname": "code_loader.load_code_symbols",
    "type": "function",
    "description": "",
    "tags": [],
    "source_file": "",
    "test_coverage": null,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "type": "function",
      "name": "load_code_symbols",
      "fqname": "code_loader.load_code_symbols",
      "module": "code_loader",
      "lineno": 9,
      "doc": "Parse a single Python file and return a list of symbols with metadata.\n\nArgs:\n    pyfile_path (str): Path to .py file.\n\nReturns:\n    list of dicts: Each with type, name, fqname, module, lineno, doc."
    },
    "links": []
  },
  "config_loader": {
    "fqname": "config_loader",
    "type": "module",
    "description": "",
    "tags": [],
    "source_file": "",
    "test_coverage": null,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "type": "module",
      "name": "config_loader",
      "fqname": "config_loader",
      "module": "config_loader",
      "lineno": 1,
      "doc": "Load and validate the pilconfig.json file."
    },
    "links": []
  },
  "config_loader.load_config": {
    "fqname": "config_loader.load_config",
    "type": "function",
    "description": "",
    "tags": [],
    "source_file": "",
    "test_coverage": null,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "type": "function",
      "name": "load_config",
      "fqname": "config_loader.load_config",
      "module": "config_loader",
      "lineno": 6,
      "doc": ""
    },
    "links": []
  },
  "markdown_loader": {
    "fqname": "markdown_loader",
    "type": "module",
    "description": "",
    "tags": [],
    "source_file": "",
    "test_coverage": null,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "type": "module",
      "name": "markdown_loader",
      "fqname": "markdown_loader",
      "module": "markdown_loader",
      "lineno": 1,
      "doc": "Load design journal or markdown documentation for potential linkages.\nExpected output: list of entries with headers, tags, body text."
    },
    "links": []
  },
  "markdown_loader.load_markdown_entries": {
    "fqname": "markdown_loader.load_markdown_entries",
    "type": "function",
    "description": "",
    "tags": [],
    "source_file": "",
    "test_coverage": null,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "type": "function",
      "name": "load_markdown_entries",
      "fqname": "markdown_loader.load_markdown_entries",
      "module": "markdown_loader",
      "lineno": 7,
      "doc": ""
    },
    "links": []
  },
  "docstring_utils": {
    "fqname": "docstring_utils",
    "type": "module",
    "description": "",
    "tags": [],
    "source_file": "",
    "test_coverage": null,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "type": "module",
      "name": "docstring_utils",
      "fqname": "docstring_utils",
      "module": "docstring_utils",
      "lineno": 1,
      "doc": "Docstring Utilities (utils)\n\nHouses reusable docstring validation logic shared across pipeline components.\nAlso supports docstring extraction and structured annotation parsing."
    },
    "links": []
  },
  "docstring_utils.check_docstring_signature_match": {
    "fqname": "docstring_utils.check_docstring_signature_match",
    "type": "function",
    "description": "",
    "tags": [],
    "source_file": "",
    "test_coverage": null,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "type": "function",
      "name": "check_docstring_signature_match",
      "fqname": "docstring_utils.check_docstring_signature_match",
      "module": "docstring_utils",
      "lineno": 13,
      "doc": "Checks if the function docstring references the function name and its parameters.\n\nParameters:\n    node (dict): Metadata dictionary for a function or method.\n\nReturns:\n    bool: True if name and all params appear in the first line of the docstring"
    },
    "links": []
  },
  "docstring_utils.extract_docstring_metadata": {
    "fqname": "docstring_utils.extract_docstring_metadata",
    "type": "function",
    "description": "",
    "tags": [],
    "source_file": "",
    "test_coverage": null,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "type": "function",
      "name": "extract_docstring_metadata",
      "fqname": "docstring_utils.extract_docstring_metadata",
      "module": "docstring_utils",
      "lineno": 32,
      "doc": "Extracts structured metadata from a docstring.\n\nParameters:\n    docstring (str): Full function/class/module docstring\n\nReturns:\n    dict: Contains 'description', 'docstring_full', 'tags', 'journal', 'deprecated', plus optional future fields.\n\nSupports:\n    - @tags: [\"tag1\", \"tag2\"]\n    - @journal: \"linked entry\"\n    - @deprecated\n    - @status: \"draft\"\n    - @visibility: \"internal\""
    },
    "links": []
  },
  "exceptions_reporter_utils": {
    "fqname": "exceptions_reporter_utils",
    "type": "module",
    "description": "",
    "tags": [],
    "source_file": "",
    "test_coverage": null,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "type": "module",
      "name": "exceptions_reporter_utils",
      "fqname": "exceptions_reporter_utils",
      "module": "exceptions_reporter_utils",
      "lineno": 1,
      "doc": "Project health analysis and governance exception reporting.\n\nDelegates validation and enrichment to dedicated modules. Coordinates:\n- Governance rule execution\n- Usage graph export\n- Summary reporting\n\nGovernance logic lives in governance_validator.py\nUsage mapping lives in usage_map_builder.py"
    },
    "links": []
  },
  "exceptions_reporter_utils.generate_exception_report": {
    "fqname": "exceptions_reporter_utils.generate_exception_report",
    "type": "function",
    "description": "",
    "tags": [],
    "source_file": "",
    "test_coverage": null,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "type": "function",
      "name": "generate_exception_report",
      "fqname": "exceptions_reporter_utils.generate_exception_report",
      "module": "exceptions_reporter_utils",
      "lineno": 21,
      "doc": "Extracts and exports metadata violations and usage mappings to a governance-style report.\n\nParameters:\n    graph (dict): Full entity graph keyed by fqname\n    output_path (str): Path to write the exceptions report\n\nReturns:\n    dict: Summary counts of major issue types for downstream printing"
    },
    "links": []
  },
  "graph_utils": {
    "fqname": "graph_utils",
    "type": "module",
    "description": "",
    "tags": [],
    "source_file": "",
    "test_coverage": null,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "type": "module",
      "name": "graph_utils",
      "fqname": "graph_utils",
      "module": "graph_utils",
      "lineno": 1,
      "doc": "Reusable graph logic, e.g. flatten, walk, summarize."
    },
    "links": []
  },
  "graph_utils.walk_graph": {
    "fqname": "graph_utils.walk_graph",
    "type": "function",
    "description": "",
    "tags": [],
    "source_file": "",
    "test_coverage": null,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "type": "function",
      "name": "walk_graph",
      "fqname": "graph_utils.walk_graph",
      "module": "graph_utils",
      "lineno": 5,
      "doc": ""
    },
    "links": []
  },
  "path_utils": {
    "fqname": "path_utils",
    "type": "module",
    "description": "",
    "tags": [],
    "source_file": "",
    "test_coverage": null,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "type": "module",
      "name": "path_utils",
      "fqname": "path_utils",
      "module": "path_utils",
      "lineno": 1,
      "doc": "Normalize and validate file system paths."
    },
    "links": []
  },
  "path_utils.resolve_path": {
    "fqname": "path_utils.resolve_path",
    "type": "function",
    "description": "",
    "tags": [],
    "source_file": "",
    "test_coverage": null,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "type": "function",
      "name": "resolve_path",
      "fqname": "path_utils.resolve_path",
      "module": "path_utils",
      "lineno": 5,
      "doc": ""
    },
    "links": []
  },
  "test_coverage_utils": {
    "fqname": "test_coverage_utils",
    "type": "module",
    "description": "",
    "tags": [],
    "source_file": "",
    "test_coverage": null,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "type": "module",
      "name": "test_coverage_utils",
      "fqname": "test_coverage_utils",
      "module": "test_coverage_utils",
      "lineno": 1,
      "doc": "Test Coverage Utilities (utils)\n\nProvides functions to estimate static test coverage by scanning test files\nand matching function/method/class names to code symbols."
    },
    "links": []
  },
  "test_coverage_utils.estimate_test_coverage": {
    "fqname": "test_coverage_utils.estimate_test_coverage",
    "type": "function",
    "description": "",
    "tags": [],
    "source_file": "",
    "test_coverage": null,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "type": "function",
      "name": "estimate_test_coverage",
      "fqname": "test_coverage_utils.estimate_test_coverage",
      "module": "test_coverage_utils",
      "lineno": 13,
      "doc": "Updates the 'test_coverage' field for each symbol based on whether\nits function/class/method name appears in any test file.\n\nParameters:\n    symbols (list[dict]): List of code symbol metadata dicts.\n    test_dir (str): Directory containing test files.\n\nReturns:\n    list[dict]: The same list, with 'test_coverage' set for each symbol."
    },
    "links": []
  },
  "governance_validator": {
    "fqname": "governance_validator",
    "type": "module",
    "description": "",
    "tags": [],
    "source_file": "",
    "test_coverage": null,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "type": "module",
      "name": "governance_validator",
      "fqname": "governance_validator",
      "module": "governance_validator",
      "lineno": 1,
      "doc": "Validation Rules (validators)\n\nApplies all governance rules to the entity graph.\nIncludes docstring checks, test coverage, orphan detection, etc."
    },
    "links": []
  },
  "governance_validator.validate_governance_rules": {
    "fqname": "governance_validator.validate_governance_rules",
    "type": "function",
    "description": "",
    "tags": [],
    "source_file": "",
    "test_coverage": null,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "type": "function",
      "name": "validate_governance_rules",
      "fqname": "governance_validator.validate_governance_rules",
      "module": "governance_validator",
      "lineno": 13,
      "doc": "Run all rule checks over the graph.\n\nParameters:\n    graph (dict): Entity graph keyed by fqname\n\nReturns:\n    tuple: (violations dict, issue counter)"
    },
    "links": []
  }
}