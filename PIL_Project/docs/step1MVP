
‚ö° MVP GOAL: Emit Valid entity_graph.json
‚úÖ Extract function symbols via AST

‚úÖ Add name, fqname, file, lineno, docstring, and basic tags

‚ùå Skip advanced metadata (links, test coverage, governance) for now

‚úÖ Wire through pipeline.py ‚Üí rebuild_pil.py

üî® Implementation Plan: Fast Path
1. Implement code_loader.py
Extract top-level functions using AST

Copy existing logic from generate_function_map.py

Emit List[Dict] with:

fqname

function

module

lineno

doc

subsystems (from path + @subsystem)

ignore, deprecated

2. Implement entity_graph_builder.py
Wrap each function dict in a node with:

json
Copy
Edit
{
  "fqname": "module.function",
  "type": "function",
  "metadata": { ... }
}
No links yet

Output = Dict[fqname, node_dict]

3. Implement json_exporter.py
Dump graph dict to exports/entity_graph.json

4. Wire pipeline.py and CLI
Make scripts/rebuild_pil.py callable

Target the PIL project itself in pilconfig.json

üöÄ Result
After 1 run of:

bash
Copy
Edit
python scripts/rebuild_pil.py
You get:

bash
Copy
Edit
exports/entity_graph.json ‚Üí function graph of PIL itself
You can then:

Parse it

Visualize it

Expand it

Use it for immediate dev feedback (e.g. missing docs, dead code)

‚úÖ Confirm: Would you like me to now:

Migrate the logic from generate_function_map.py into code_loader.py

Build the minimal entity_graph_builder.py

Wire it up and test that it outputs something real?

Estimated time to working prototype: ~2 minutes.







