{
  "pil_meta.pipeline": {
    "fqname": "pil_meta.pipeline",
    "type": "module",
    "description": "Pipeline: Main Entry",
    "tags": [],
    "source_file": "pil_meta\\pipeline.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "pil_meta.pipeline",
      "module": "pil_meta.pipeline",
      "function": null,
      "type": "module",
      "lineno": 1,
      "source_file": "pil_meta\\pipeline.py",
      "description": "Pipeline: Main Entry",
      "docstring_full": "Pipeline: Main Entry\n\nCoordinates full metadata graph construction and export from source code.\nThis module is the top-level orchestrator for the Project Intelligence Layer (PIL),\nresponsible for running a complete metadata pass using configuration in pilconfig.json.\n\nSteps:\n- Load config\n- Extract all code symbols in bulk (functions, methods, classes)\n- Normalize minimal graph fields for linkage\n- Build and enrich entity graph\n- Export graph to disk\n- Emit governance exception report",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {},
      "test_coverage": false,
      "is_orphaned": true,
      "links": [],
      "called_by_fqns": [],
      "calls_fqns": []
    },
    "links": [
      {
        "target": "pil_meta.loaders.config_loader.load_config",
        "type": "calls"
      },
      {
        "target": "pil_meta.loaders.code_loader.load_code_symbols",
        "type": "calls"
      },
      {
        "target": "pil_meta.utils.test_coverage_utils.estimate_test_coverage",
        "type": "calls"
      },
      {
        "target": "pil_meta.builders.entity_graph_builder.build_entity_graph",
        "type": "calls"
      },
      {
        "target": "pil_meta.builders.linkage_builder.inject_call_links",
        "type": "calls"
      },
      {
        "target": "pil_meta.builders.tag_and_link_applier_builders.apply_tags_and_links",
        "type": "calls"
      },
      {
        "target": "pil_meta.exporters.json_exporter.export_entity_graph",
        "type": "calls"
      },
      {
        "target": "pil_meta.exporters.markdown_vault_exporter.export_markdown_vault",
        "type": "calls"
      },
      {
        "target": "pil_meta.exporters.vault_index_exporter.export_vault_index",
        "type": "calls"
      },
      {
        "target": "pil_meta.utils.exceptions_reporter_utils.generate_exception_report",
        "type": "calls"
      }
    ],
    "calls_fqns": [
      "pil_meta.builders.entity_graph_builder.build_entity_graph",
      "pil_meta.builders.linkage_builder.inject_call_links",
      "pil_meta.builders.tag_and_link_applier_builders.apply_tags_and_links",
      "pil_meta.exporters.json_exporter.export_entity_graph",
      "pil_meta.exporters.markdown_vault_exporter.export_markdown_vault",
      "pil_meta.exporters.vault_index_exporter.export_vault_index",
      "pil_meta.loaders.code_loader.load_code_symbols",
      "pil_meta.loaders.config_loader.load_config",
      "pil_meta.utils.exceptions_reporter_utils.generate_exception_report",
      "pil_meta.utils.test_coverage_utils.estimate_test_coverage"
    ]
  },
  "pil_meta.pipeline.run_pipeline": {
    "fqname": "pil_meta.pipeline.run_pipeline",
    "type": "function",
    "description": "Execute full metadata extraction and export pipeline.",
    "tags": [
      "pipeline",
      "entrypoint"
    ],
    "source_file": "pil_meta\\pipeline.py",
    "test_coverage": true,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "pil_meta.pipeline.run_pipeline",
      "module": "pil_meta.pipeline",
      "function": "run_pipeline",
      "type": "function",
      "lineno": 32,
      "source_file": "pil_meta\\pipeline.py",
      "description": "Execute full metadata extraction and export pipeline.",
      "docstring_full": "Execute full metadata extraction and export pipeline.\n\nThis is the entry point called by `scripts/rebuild_pil.py`. It uses\npaths from `pilconfig.json`, loads all top-level Python symbols,\nbuilds the graph, computes call linkages, and writes outputs.",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [],
        "returns": null
      },
      "test_coverage": true,
      "is_orphaned": true,
      "links": [],
      "called_by_fqns": [],
      "calls_fqns": []
    },
    "links": [
      {
        "target": "pil_meta.loaders.config_loader.load_config",
        "type": "calls"
      },
      {
        "target": "pil_meta.loaders.code_loader.load_code_symbols",
        "type": "calls"
      },
      {
        "target": "pil_meta.utils.test_coverage_utils.estimate_test_coverage",
        "type": "calls"
      },
      {
        "target": "pil_meta.builders.entity_graph_builder.build_entity_graph",
        "type": "calls"
      },
      {
        "target": "pil_meta.builders.linkage_builder.inject_call_links",
        "type": "calls"
      },
      {
        "target": "pil_meta.builders.tag_and_link_applier_builders.apply_tags_and_links",
        "type": "calls"
      },
      {
        "target": "pil_meta.exporters.json_exporter.export_entity_graph",
        "type": "calls"
      },
      {
        "target": "pil_meta.exporters.markdown_vault_exporter.export_markdown_vault",
        "type": "calls"
      },
      {
        "target": "pil_meta.exporters.vault_index_exporter.export_vault_index",
        "type": "calls"
      },
      {
        "target": "pil_meta.utils.exceptions_reporter_utils.generate_exception_report",
        "type": "calls"
      },
      {
        "target": "PIL Metadata Strategy",
        "type": "inferred_journal_link",
        "confidence": 1.0
      }
    ],
    "calls_fqns": [
      "pil_meta.builders.entity_graph_builder.build_entity_graph",
      "pil_meta.builders.linkage_builder.inject_call_links",
      "pil_meta.builders.tag_and_link_applier_builders.apply_tags_and_links",
      "pil_meta.exporters.json_exporter.export_entity_graph",
      "pil_meta.exporters.markdown_vault_exporter.export_markdown_vault",
      "pil_meta.exporters.vault_index_exporter.export_vault_index",
      "pil_meta.loaders.code_loader.load_code_symbols",
      "pil_meta.loaders.config_loader.load_config",
      "pil_meta.utils.exceptions_reporter_utils.generate_exception_report",
      "pil_meta.utils.test_coverage_utils.estimate_test_coverage"
    ],
    "called_by_fqns": [
      "scripts.rebuild_pil",
      "tests.test_pipeline",
      "tests.test_pipeline.test_pipeline_generates_valid_entity_graph"
    ]
  },
  "scripts.rebuild_pil": {
    "fqname": "scripts.rebuild_pil",
    "type": "module",
    "description": "CLI entry point to trigger full PIL metadata pipeline.",
    "tags": [],
    "source_file": "scripts\\rebuild_pil.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "scripts.rebuild_pil",
      "module": "scripts.rebuild_pil",
      "function": null,
      "type": "module",
      "lineno": 1,
      "source_file": "scripts\\rebuild_pil.py",
      "description": "CLI entry point to trigger full PIL metadata pipeline.",
      "docstring_full": "CLI entry point to trigger full PIL metadata pipeline.\n\nUsage:\n    python scripts/rebuild_pil.py\n\nReads from pilconfig.json and emits entity_graph.json and other metadata exports.",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {},
      "test_coverage": false,
      "is_orphaned": true,
      "links": [],
      "called_by_fqns": [],
      "calls_fqns": []
    },
    "links": [
      {
        "target": "pil_meta.pipeline.run_pipeline",
        "type": "calls"
      }
    ],
    "calls_fqns": [
      "pil_meta.pipeline.run_pipeline"
    ]
  },
  "tests.test_pipeline": {
    "fqname": "tests.test_pipeline",
    "type": "module",
    "description": "Smoke test for the Project Intelligence Layer (PIL) pipeline.",
    "tags": [],
    "source_file": "tests\\test_pipeline.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "tests.test_pipeline",
      "module": "tests.test_pipeline",
      "function": null,
      "type": "module",
      "lineno": 1,
      "source_file": "tests\\test_pipeline.py",
      "description": "Smoke test for the Project Intelligence Layer (PIL) pipeline.",
      "docstring_full": "Smoke test for the Project Intelligence Layer (PIL) pipeline.\n\nValidates that:\n- The pipeline executes without error\n- `entity_graph.json` is created\n- At least one function node is present\n- Required metadata fields exist on a sample node\n\nThis test does not validate semantic links or coverage logic \u2014 those are handled in their own modules.",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {},
      "test_coverage": false,
      "is_orphaned": true,
      "links": [],
      "called_by_fqns": [],
      "calls_fqns": []
    },
    "links": [
      {
        "target": "pil_meta.pipeline.run_pipeline",
        "type": "calls"
      }
    ],
    "calls_fqns": [
      "pil_meta.pipeline.run_pipeline"
    ]
  },
  "tests.test_pipeline.test_pipeline_generates_valid_entity_graph": {
    "fqname": "tests.test_pipeline.test_pipeline_generates_valid_entity_graph",
    "type": "function",
    "description": "End-to-end test of the PIL pipeline on real source code.",
    "tags": [],
    "source_file": "tests\\test_pipeline.py",
    "test_coverage": true,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "tests.test_pipeline.test_pipeline_generates_valid_entity_graph",
      "module": "tests.test_pipeline",
      "function": "test_pipeline_generates_valid_entity_graph",
      "type": "function",
      "lineno": 26,
      "source_file": "tests\\test_pipeline.py",
      "description": "End-to-end test of the PIL pipeline on real source code.",
      "docstring_full": "End-to-end test of the PIL pipeline on real source code.",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [],
        "returns": null
      },
      "test_coverage": true,
      "is_orphaned": true,
      "links": [],
      "called_by_fqns": [],
      "calls_fqns": []
    },
    "links": [
      {
        "target": "pil_meta.pipeline.run_pipeline",
        "type": "calls"
      }
    ],
    "calls_fqns": [
      "pil_meta.pipeline.run_pipeline"
    ]
  },
  "pil_meta.builders.entity_graph_builder": {
    "fqname": "pil_meta.builders.entity_graph_builder",
    "type": "module",
    "description": "Wraps pre-enriched function records into graph nodes.",
    "tags": [],
    "source_file": "pil_meta\\builders\\entity_graph_builder.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "pil_meta.builders.entity_graph_builder",
      "module": "pil_meta.builders.entity_graph_builder",
      "function": null,
      "type": "module",
      "lineno": 1,
      "source_file": "pil_meta\\builders\\entity_graph_builder.py",
      "description": "Wraps pre-enriched function records into graph nodes.",
      "docstring_full": "Wraps pre-enriched function records into graph nodes.\n\nThis builder assumes that the upstream loader (code_loader) has already\nattached all required metadata, including tags, docstring status, and test\ncoverage placeholders.\n\nOutput format conforms to the `entity_graph.json` specification.",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {},
      "test_coverage": false,
      "is_orphaned": true,
      "links": [],
      "called_by_fqns": [],
      "calls_fqns": []
    },
    "links": [],
    "calls_fqns": []
  },
  "pil_meta.builders.entity_graph_builder.build_entity_graph": {
    "fqname": "pil_meta.builders.entity_graph_builder.build_entity_graph",
    "type": "function",
    "description": "Wrap each enriched entity into a compliant graph node.",
    "tags": [
      "builder",
      "graph"
    ],
    "source_file": "pil_meta\\builders\\entity_graph_builder.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "pil_meta.builders.entity_graph_builder.build_entity_graph",
      "module": "pil_meta.builders.entity_graph_builder",
      "function": "build_entity_graph",
      "type": "function",
      "lineno": 13,
      "source_file": "pil_meta\\builders\\entity_graph_builder.py",
      "description": "Wrap each enriched entity into a compliant graph node.",
      "docstring_full": "Wrap each enriched entity into a compliant graph node.\n\nParameters:\n    entities (list[dict]): Raw or enriched entity records.\n\nReturns:\n    dict: fqname \u2192 wrapped graph node",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "entities"
        ],
        "returns": null
      },
      "test_coverage": false,
      "is_orphaned": true,
      "links": [],
      "called_by_fqns": [],
      "calls_fqns": []
    },
    "links": [],
    "called_by_fqns": [
      "pil_meta.pipeline",
      "pil_meta.pipeline.run_pipeline"
    ],
    "calls_fqns": []
  },
  "pil_meta.builders.linkage_builder": {
    "fqname": "pil_meta.builders.linkage_builder",
    "type": "module",
    "description": "Adds call relationships between entities in the graph.",
    "tags": [],
    "source_file": "pil_meta\\builders\\linkage_builder.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "pil_meta.builders.linkage_builder",
      "module": "pil_meta.builders.linkage_builder",
      "function": null,
      "type": "module",
      "lineno": 1,
      "source_file": "pil_meta\\builders\\linkage_builder.py",
      "description": "Adds call relationships between entities in the graph.",
      "docstring_full": "Adds call relationships between entities in the graph.\n\nUses AST parsing to detect structural function calls, updates each node with:\n- calls_fqns\n- called_by_fqns\n- links: [ { target, type: \"calls\" } ]\n- is_orphaned (recomputed after linkage)",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {},
      "test_coverage": false,
      "is_orphaned": true,
      "links": [],
      "called_by_fqns": [],
      "calls_fqns": []
    },
    "links": [
      {
        "target": "pil_meta.builders.linkage_builder.extract_called_functions",
        "type": "calls"
      }
    ],
    "calls_fqns": [
      "pil_meta.builders.linkage_builder.extract_called_functions"
    ]
  },
  "pil_meta.builders.linkage_builder.extract_called_functions": {
    "fqname": "pil_meta.builders.linkage_builder.extract_called_functions",
    "type": "function",
    "description": "Parses source code and extracts all function names that are called.",
    "tags": [],
    "source_file": "pil_meta\\builders\\linkage_builder.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "pil_meta.builders.linkage_builder.extract_called_functions",
      "module": "pil_meta.builders.linkage_builder",
      "function": "extract_called_functions",
      "type": "function",
      "lineno": 16,
      "source_file": "pil_meta\\builders\\linkage_builder.py",
      "description": "Parses source code and extracts all function names that are called.",
      "docstring_full": "Parses source code and extracts all function names that are called.\n\nParameters:\n    source (str): The raw source code of a .py file\n\nReturns:\n    list[str]: All direct call targets (unqualified names)",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "source"
        ],
        "returns": null
      },
      "test_coverage": false,
      "is_orphaned": true,
      "links": [],
      "called_by_fqns": [],
      "calls_fqns": []
    },
    "links": [
      {
        "target": "pil_meta.builders.linkage_builder.extract_called_functions",
        "type": "calls"
      }
    ],
    "called_by_fqns": [
      "pil_meta.builders.linkage_builder",
      "pil_meta.builders.linkage_builder.extract_called_functions",
      "pil_meta.builders.linkage_builder.inject_call_links"
    ],
    "calls_fqns": [
      "pil_meta.builders.linkage_builder.extract_called_functions"
    ]
  },
  "pil_meta.builders.linkage_builder.inject_call_links": {
    "fqname": "pil_meta.builders.linkage_builder.inject_call_links",
    "type": "function",
    "description": "Injects structural call links into the entity graph.",
    "tags": [
      "builder",
      "linkage"
    ],
    "source_file": "pil_meta\\builders\\linkage_builder.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "pil_meta.builders.linkage_builder.inject_call_links",
      "module": "pil_meta.builders.linkage_builder",
      "function": "inject_call_links",
      "type": "function",
      "lineno": 43,
      "source_file": "pil_meta\\builders\\linkage_builder.py",
      "description": "Injects structural call links into the entity graph.",
      "docstring_full": "Injects structural call links into the entity graph.\n\nParameters:\n    entity_graph (dict): Entity metadata keyed by fqname\n    project_root (str): Project root to re-open source files\n\nReturns:\n    dict: The enriched graph with linkage info",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "entity_graph",
          "project_root"
        ],
        "returns": null
      },
      "test_coverage": false,
      "is_orphaned": true,
      "links": [],
      "called_by_fqns": [],
      "calls_fqns": []
    },
    "links": [
      {
        "target": "pil_meta.builders.linkage_builder.extract_called_functions",
        "type": "calls"
      }
    ],
    "called_by_fqns": [
      "pil_meta.pipeline",
      "pil_meta.pipeline.run_pipeline"
    ],
    "calls_fqns": [
      "pil_meta.builders.linkage_builder.extract_called_functions"
    ]
  },
  "pil_meta.builders.tag_and_link_applier_builders": {
    "fqname": "pil_meta.builders.tag_and_link_applier_builders",
    "type": "module",
    "description": "Graph Enrichment: Tags and Semantic Links (builders)",
    "tags": [],
    "source_file": "pil_meta\\builders\\tag_and_link_applier_builders.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "pil_meta.builders.tag_and_link_applier_builders",
      "module": "pil_meta.builders.tag_and_link_applier_builders",
      "function": null,
      "type": "module",
      "lineno": 1,
      "source_file": "pil_meta\\builders\\tag_and_link_applier_builders.py",
      "description": "Graph Enrichment: Tags and Semantic Links (builders)",
      "docstring_full": "Graph Enrichment: Tags and Semantic Links (builders)\n\nPopulates known tags and journal links into the graph based on\nexplicit mappings (not heuristics or inference).",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {},
      "test_coverage": false,
      "is_orphaned": true,
      "links": [],
      "called_by_fqns": [],
      "calls_fqns": []
    },
    "links": [],
    "calls_fqns": []
  },
  "pil_meta.builders.tag_and_link_applier_builders.apply_tags_and_links": {
    "fqname": "pil_meta.builders.tag_and_link_applier_builders.apply_tags_and_links",
    "type": "function",
    "description": "Attach known tags and semantic links to specific nodes in the graph.",
    "tags": [],
    "source_file": "pil_meta\\builders\\tag_and_link_applier_builders.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "pil_meta.builders.tag_and_link_applier_builders.apply_tags_and_links",
      "module": "pil_meta.builders.tag_and_link_applier_builders",
      "function": "apply_tags_and_links",
      "type": "function",
      "lineno": 9,
      "source_file": "pil_meta\\builders\\tag_and_link_applier_builders.py",
      "description": "Attach known tags and semantic links to specific nodes in the graph.",
      "docstring_full": "Attach known tags and semantic links to specific nodes in the graph.\n\nParameters:\n    graph (dict): Entity graph keyed by fully qualified name (fqname)\n\nReturns:\n    dict: The enriched graph with added tags and semantic links",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "graph"
        ],
        "returns": null
      },
      "test_coverage": false,
      "is_orphaned": true,
      "links": [],
      "called_by_fqns": [],
      "calls_fqns": []
    },
    "links": [],
    "called_by_fqns": [
      "pil_meta.pipeline",
      "pil_meta.pipeline.run_pipeline"
    ],
    "calls_fqns": []
  },
  "pil_meta.builders.usage_map_builder": {
    "fqname": "pil_meta.builders.usage_map_builder",
    "type": "module",
    "description": "Usage Map Builder (builders)",
    "tags": [],
    "source_file": "pil_meta\\builders\\usage_map_builder.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "pil_meta.builders.usage_map_builder",
      "module": "pil_meta.builders.usage_map_builder",
      "function": null,
      "type": "module",
      "lineno": 1,
      "source_file": "pil_meta\\builders\\usage_map_builder.py",
      "description": "Usage Map Builder (builders)",
      "docstring_full": "Usage Map Builder (builders)\n\nConstructs a forward/reverse reference graph showing usage across the entity set.\nUseful for auditing call relationships beyond simple call trees.",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {},
      "test_coverage": false,
      "is_orphaned": true,
      "links": [],
      "called_by_fqns": [],
      "calls_fqns": []
    },
    "links": [],
    "calls_fqns": []
  },
  "pil_meta.builders.usage_map_builder.build_usage_map": {
    "fqname": "pil_meta.builders.usage_map_builder.build_usage_map",
    "type": "function",
    "description": "Create bidirectional usage summaries for each FQ name.",
    "tags": [],
    "source_file": "pil_meta\\builders\\usage_map_builder.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "pil_meta.builders.usage_map_builder.build_usage_map",
      "module": "pil_meta.builders.usage_map_builder",
      "function": "build_usage_map",
      "type": "function",
      "lineno": 11,
      "source_file": "pil_meta\\builders\\usage_map_builder.py",
      "description": "Create bidirectional usage summaries for each FQ name.",
      "docstring_full": "Create bidirectional usage summaries for each FQ name.\n\nParameters:\n    graph (dict): Full graph with calls_fqns available on each node\n\nReturns:\n    dict: { fqname: { used_by: [...], uses: [...] } }",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "graph"
        ],
        "returns": null
      },
      "test_coverage": false,
      "is_orphaned": true,
      "links": [],
      "called_by_fqns": [],
      "calls_fqns": []
    },
    "links": [],
    "calls_fqns": [],
    "called_by_fqns": [
      "pil_meta.utils.exceptions_reporter_utils",
      "pil_meta.utils.exceptions_reporter_utils.generate_exception_report"
    ]
  },
  "pil_meta.builders.variable_usage_builder": {
    "fqname": "pil_meta.builders.variable_usage_builder",
    "type": "module",
    "description": "Variable Usage Map Builder (builders)",
    "tags": [],
    "source_file": "pil_meta\\builders\\variable_usage_builder.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "pil_meta.builders.variable_usage_builder",
      "module": "pil_meta.builders.variable_usage_builder",
      "function": null,
      "type": "module",
      "lineno": 1,
      "source_file": "pil_meta\\builders\\variable_usage_builder.py",
      "description": "Variable Usage Map Builder (builders)",
      "docstring_full": "Variable Usage Map Builder (builders)\n\nFinds all variables (top-level assignments) used in more than one module,\nand records which modules use them.",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {},
      "test_coverage": false,
      "is_orphaned": true,
      "links": [],
      "called_by_fqns": [],
      "calls_fqns": []
    },
    "links": [],
    "calls_fqns": []
  },
  "pil_meta.builders.variable_usage_builder.build_variable_usage_map": {
    "fqname": "pil_meta.builders.variable_usage_builder.build_variable_usage_map",
    "type": "function",
    "description": "For each variable, scan all other modules for references by name.",
    "tags": [],
    "source_file": "pil_meta\\builders\\variable_usage_builder.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "pil_meta.builders.variable_usage_builder.build_variable_usage_map",
      "module": "pil_meta.builders.variable_usage_builder",
      "function": "build_variable_usage_map",
      "type": "function",
      "lineno": 12,
      "source_file": "pil_meta\\builders\\variable_usage_builder.py",
      "description": "For each variable, scan all other modules for references by name.",
      "docstring_full": "For each variable, scan all other modules for references by name.\n\nParameters:\n    variables (list): List of variable nodes (from loader, type=='variable')\n    all_source_files (list): List of all source Path objects\n    root_path (Path): Project root for relative paths\n\nReturns:\n    dict: fqname -> list of modules (relative paths) where used",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "variables",
          "all_source_files",
          "root_path"
        ],
        "returns": null
      },
      "test_coverage": false,
      "is_orphaned": true,
      "links": [],
      "called_by_fqns": [],
      "calls_fqns": []
    },
    "links": [],
    "calls_fqns": []
  },
  "pil_meta.exporters.json_exporter": {
    "fqname": "pil_meta.exporters.json_exporter",
    "type": "module",
    "description": "Export the full entity graph to a structured JSON file.",
    "tags": [],
    "source_file": "pil_meta\\exporters\\json_exporter.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "pil_meta.exporters.json_exporter",
      "module": "pil_meta.exporters.json_exporter",
      "function": null,
      "type": "module",
      "lineno": 1,
      "source_file": "pil_meta\\exporters\\json_exporter.py",
      "description": "Export the full entity graph to a structured JSON file.",
      "docstring_full": "Export the full entity graph to a structured JSON file.\n\nPart of the PIL output pipeline. This module writes the final metadata graph\nproduced by `entity_graph_builder.py` to disk in a machine-readable format.\n\nOutputs:\n  - entity_graph.json \u2192 Complete node metadata and semantic linkages\n\nConforms to the PIL metadata strategy:\n  - Includes docstrings, tags, governance flags, and semantic edges\n  - Supports downstream validation, journal linkage, and vault export",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {},
      "test_coverage": false,
      "is_orphaned": true,
      "links": [],
      "called_by_fqns": [],
      "calls_fqns": []
    },
    "links": [],
    "calls_fqns": []
  },
  "pil_meta.exporters.json_exporter.export_entity_graph": {
    "fqname": "pil_meta.exporters.json_exporter.export_entity_graph",
    "type": "function",
    "description": "Write the in-memory entity graph to `entity_graph.json`.",
    "tags": [
      "exporter",
      "json"
    ],
    "source_file": "pil_meta\\exporters\\json_exporter.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "pil_meta.exporters.json_exporter.export_entity_graph",
      "module": "pil_meta.exporters.json_exporter",
      "function": "export_entity_graph",
      "type": "function",
      "lineno": 20,
      "source_file": "pil_meta\\exporters\\json_exporter.py",
      "description": "Write the in-memory entity graph to `entity_graph.json`.",
      "docstring_full": "Write the in-memory entity graph to `entity_graph.json`.\n\nParameters:\n    graph (dict): The keyed graph structure, e.g., { fqname: { ... } }\n    output_dir (str): Directory to emit the file into (relative or absolute)\n\nNotes:\n    - Output path is `${output_dir}/entity_graph.json`\n    - Will create the directory if it does not exist\n    - File is formatted with 2-space indentation",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "graph",
          "output_dir"
        ],
        "returns": null
      },
      "test_coverage": false,
      "is_orphaned": true,
      "links": [],
      "called_by_fqns": [],
      "calls_fqns": []
    },
    "links": [],
    "called_by_fqns": [
      "pil_meta.pipeline",
      "pil_meta.pipeline.run_pipeline"
    ],
    "calls_fqns": []
  },
  "pil_meta.exporters.markdown_vault_exporter": {
    "fqname": "pil_meta.exporters.markdown_vault_exporter",
    "type": "module",
    "description": "Markdown Vault Exporter (exporters)",
    "tags": [],
    "source_file": "pil_meta\\exporters\\markdown_vault_exporter.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "pil_meta.exporters.markdown_vault_exporter",
      "module": "pil_meta.exporters.markdown_vault_exporter",
      "function": null,
      "type": "module",
      "lineno": 1,
      "source_file": "pil_meta\\exporters\\markdown_vault_exporter.py",
      "description": "Markdown Vault Exporter (exporters)",
      "docstring_full": "Markdown Vault Exporter (exporters)\n\nExports the PIL entity graph as Markdown/Obsidian-compatible files for each symbol,\nusing human-friendly names for navigation but always showing the real fqname.",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {},
      "test_coverage": false,
      "is_orphaned": true,
      "links": [],
      "called_by_fqns": [],
      "calls_fqns": []
    },
    "links": [
      {
        "target": "pil_meta.exporters.markdown_vault_exporter.friendly_name",
        "type": "calls"
      },
      {
        "target": "pil_meta.exporters.markdown_vault_exporter._sanitize_filename",
        "type": "calls"
      }
    ],
    "calls_fqns": [
      "pil_meta.exporters.markdown_vault_exporter._sanitize_filename",
      "pil_meta.exporters.markdown_vault_exporter.friendly_name"
    ]
  },
  "pil_meta.exporters.markdown_vault_exporter.friendly_name": {
    "fqname": "pil_meta.exporters.markdown_vault_exporter.friendly_name",
    "type": "function",
    "description": "Returns a human-friendly display name for vault navigation,",
    "tags": [],
    "source_file": "pil_meta\\exporters\\markdown_vault_exporter.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "pil_meta.exporters.markdown_vault_exporter.friendly_name",
      "module": "pil_meta.exporters.markdown_vault_exporter",
      "function": "friendly_name",
      "type": "function",
      "lineno": 12,
      "source_file": "pil_meta\\exporters\\markdown_vault_exporter.py",
      "description": "Returns a human-friendly display name for vault navigation,",
      "docstring_full": "Returns a human-friendly display name for vault navigation,\nwhile preserving real fqname in note metadata.",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "node"
        ],
        "returns": null
      },
      "test_coverage": false,
      "is_orphaned": true,
      "links": [],
      "called_by_fqns": [],
      "calls_fqns": []
    },
    "links": [
      {
        "target": "pil_meta.exporters.markdown_vault_exporter.friendly_name",
        "type": "calls"
      },
      {
        "target": "pil_meta.exporters.markdown_vault_exporter._sanitize_filename",
        "type": "calls"
      }
    ],
    "called_by_fqns": [
      "pil_meta.exporters.markdown_vault_exporter",
      "pil_meta.exporters.markdown_vault_exporter.friendly_name",
      "pil_meta.exporters.markdown_vault_exporter._sanitize_filename",
      "pil_meta.exporters.markdown_vault_exporter.export_markdown_vault"
    ],
    "calls_fqns": [
      "pil_meta.exporters.markdown_vault_exporter._sanitize_filename",
      "pil_meta.exporters.markdown_vault_exporter.friendly_name"
    ]
  },
  "pil_meta.exporters.markdown_vault_exporter._sanitize_filename": {
    "fqname": "pil_meta.exporters.markdown_vault_exporter._sanitize_filename",
    "type": "function",
    "description": "Replace slashes and other problematic chars for filesystem safety.",
    "tags": [],
    "source_file": "pil_meta\\exporters\\markdown_vault_exporter.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "pil_meta.exporters.markdown_vault_exporter._sanitize_filename",
      "module": "pil_meta.exporters.markdown_vault_exporter",
      "function": "_sanitize_filename",
      "type": "function",
      "lineno": 34,
      "source_file": "pil_meta\\exporters\\markdown_vault_exporter.py",
      "description": "Replace slashes and other problematic chars for filesystem safety.",
      "docstring_full": "Replace slashes and other problematic chars for filesystem safety.",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "name"
        ],
        "returns": null
      },
      "test_coverage": false,
      "is_orphaned": true,
      "links": [],
      "called_by_fqns": [],
      "calls_fqns": []
    },
    "links": [
      {
        "target": "pil_meta.exporters.markdown_vault_exporter.friendly_name",
        "type": "calls"
      },
      {
        "target": "pil_meta.exporters.markdown_vault_exporter._sanitize_filename",
        "type": "calls"
      }
    ],
    "called_by_fqns": [
      "pil_meta.exporters.markdown_vault_exporter",
      "pil_meta.exporters.markdown_vault_exporter.friendly_name",
      "pil_meta.exporters.markdown_vault_exporter._sanitize_filename",
      "pil_meta.exporters.markdown_vault_exporter.export_markdown_vault"
    ],
    "calls_fqns": [
      "pil_meta.exporters.markdown_vault_exporter._sanitize_filename",
      "pil_meta.exporters.markdown_vault_exporter.friendly_name"
    ]
  },
  "pil_meta.exporters.markdown_vault_exporter.export_markdown_vault": {
    "fqname": "pil_meta.exporters.markdown_vault_exporter.export_markdown_vault",
    "type": "function",
    "description": "Export the entity graph as a Markdown vault: one file per node, with friendly names, tags, and links.",
    "tags": [],
    "source_file": "pil_meta\\exporters\\markdown_vault_exporter.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "pil_meta.exporters.markdown_vault_exporter.export_markdown_vault",
      "module": "pil_meta.exporters.markdown_vault_exporter",
      "function": "export_markdown_vault",
      "type": "function",
      "lineno": 38,
      "source_file": "pil_meta\\exporters\\markdown_vault_exporter.py",
      "description": "Export the entity graph as a Markdown vault: one file per node, with friendly names, tags, and links.",
      "docstring_full": "Export the entity graph as a Markdown vault: one file per node, with friendly names, tags, and links.\n\nParameters:\n    graph (dict): Entity graph keyed by fqname\n    output_dir (str): Output directory for the Markdown vault",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "graph",
          "output_dir"
        ],
        "returns": null
      },
      "test_coverage": false,
      "is_orphaned": true,
      "links": [],
      "called_by_fqns": [],
      "calls_fqns": []
    },
    "links": [
      {
        "target": "pil_meta.exporters.markdown_vault_exporter.friendly_name",
        "type": "calls"
      },
      {
        "target": "pil_meta.exporters.markdown_vault_exporter._sanitize_filename",
        "type": "calls"
      }
    ],
    "called_by_fqns": [
      "pil_meta.pipeline",
      "pil_meta.pipeline.run_pipeline"
    ],
    "calls_fqns": [
      "pil_meta.exporters.markdown_vault_exporter._sanitize_filename",
      "pil_meta.exporters.markdown_vault_exporter.friendly_name"
    ]
  },
  "pil_meta.exporters.md_exporter": {
    "fqname": "pil_meta.exporters.md_exporter",
    "type": "module",
    "description": "Optional: export vault-compatible Markdown summary from graph.",
    "tags": [],
    "source_file": "pil_meta\\exporters\\md_exporter.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "pil_meta.exporters.md_exporter",
      "module": "pil_meta.exporters.md_exporter",
      "function": null,
      "type": "module",
      "lineno": 1,
      "source_file": "pil_meta\\exporters\\md_exporter.py",
      "description": "Optional: export vault-compatible Markdown summary from graph.",
      "docstring_full": "Optional: export vault-compatible Markdown summary from graph.",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {},
      "test_coverage": false,
      "is_orphaned": true,
      "links": [],
      "called_by_fqns": [],
      "calls_fqns": []
    },
    "links": [],
    "calls_fqns": []
  },
  "pil_meta.exporters.md_exporter.export_to_markdown": {
    "fqname": "pil_meta.exporters.md_exporter.export_to_markdown",
    "type": "function",
    "description": "",
    "tags": [],
    "source_file": "pil_meta\\exporters\\md_exporter.py",
    "test_coverage": false,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "pil_meta.exporters.md_exporter.export_to_markdown",
      "module": "pil_meta.exporters.md_exporter",
      "function": "export_to_markdown",
      "type": "function",
      "lineno": 5,
      "source_file": "pil_meta\\exporters\\md_exporter.py",
      "description": "",
      "docstring_full": "",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": false,
      "metadata": {
        "args": [
          "graph",
          "output_dir"
        ],
        "returns": null
      },
      "test_coverage": false,
      "is_orphaned": true,
      "links": [],
      "called_by_fqns": [],
      "calls_fqns": []
    },
    "links": [],
    "calls_fqns": []
  },
  "pil_meta.exporters.variable_usage_report_exporter": {
    "fqname": "pil_meta.exporters.variable_usage_report_exporter",
    "type": "module",
    "description": "Variable Usage Markdown Exporter (exporters)",
    "tags": [],
    "source_file": "pil_meta\\exporters\\variable_usage_report_exporter.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "pil_meta.exporters.variable_usage_report_exporter",
      "module": "pil_meta.exporters.variable_usage_report_exporter",
      "function": null,
      "type": "module",
      "lineno": 1,
      "source_file": "pil_meta\\exporters\\variable_usage_report_exporter.py",
      "description": "Variable Usage Markdown Exporter (exporters)",
      "docstring_full": "Variable Usage Markdown Exporter (exporters)\n\nExports a summary report of variables/lists/constants used in more than one module,\nfor vault, governance, or architectural review.",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {},
      "test_coverage": false,
      "is_orphaned": true,
      "links": [],
      "called_by_fqns": [],
      "calls_fqns": []
    },
    "links": [],
    "calls_fqns": []
  },
  "pil_meta.exporters.variable_usage_report_exporter.export_variable_usage_markdown": {
    "fqname": "pil_meta.exporters.variable_usage_report_exporter.export_variable_usage_markdown",
    "type": "function",
    "description": "Writes a Markdown summary listing each variable used in multiple modules.",
    "tags": [],
    "source_file": "pil_meta\\exporters\\variable_usage_report_exporter.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "pil_meta.exporters.variable_usage_report_exporter.export_variable_usage_markdown",
      "module": "pil_meta.exporters.variable_usage_report_exporter",
      "function": "export_variable_usage_markdown",
      "type": "function",
      "lineno": 11,
      "source_file": "pil_meta\\exporters\\variable_usage_report_exporter.py",
      "description": "Writes a Markdown summary listing each variable used in multiple modules.",
      "docstring_full": "Writes a Markdown summary listing each variable used in multiple modules.\n\nParameters:\n    usage_map (dict): fqname -> list of modules where variable is used\n    output_path (str): Path to output .md file",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "usage_map",
          "output_path"
        ],
        "returns": null
      },
      "test_coverage": false,
      "is_orphaned": true,
      "links": [],
      "called_by_fqns": [],
      "calls_fqns": []
    },
    "links": [],
    "calls_fqns": []
  },
  "pil_meta.exporters.vault_index_exporter": {
    "fqname": "pil_meta.exporters.vault_index_exporter",
    "type": "module",
    "description": "Vault Index Exporter (exporters)",
    "tags": [],
    "source_file": "pil_meta\\exporters\\vault_index_exporter.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "pil_meta.exporters.vault_index_exporter",
      "module": "pil_meta.exporters.vault_index_exporter",
      "function": null,
      "type": "module",
      "lineno": 1,
      "source_file": "pil_meta\\exporters\\vault_index_exporter.py",
      "description": "Vault Index Exporter (exporters)",
      "docstring_full": "Vault Index Exporter (exporters)\n\nGenerates an Obsidian-friendly index.md for your code vault,\ngrouped by type, with live Dataview sections and usage links.",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {},
      "test_coverage": false,
      "is_orphaned": true,
      "links": [],
      "called_by_fqns": [],
      "calls_fqns": []
    },
    "links": [],
    "calls_fqns": []
  },
  "pil_meta.exporters.vault_index_exporter.export_vault_index": {
    "fqname": "pil_meta.exporters.vault_index_exporter.export_vault_index",
    "type": "function",
    "description": "Writes an index.md in output_dir listing all code entities grouped by type,",
    "tags": [],
    "source_file": "pil_meta\\exporters\\vault_index_exporter.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "pil_meta.exporters.vault_index_exporter.export_vault_index",
      "module": "pil_meta.exporters.vault_index_exporter",
      "function": "export_vault_index",
      "type": "function",
      "lineno": 12,
      "source_file": "pil_meta\\exporters\\vault_index_exporter.py",
      "description": "Writes an index.md in output_dir listing all code entities grouped by type,",
      "docstring_full": "Writes an index.md in output_dir listing all code entities grouped by type,\nwith Obsidian links and Dataview live dashboards.",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "graph",
          "output_dir"
        ],
        "returns": null
      },
      "test_coverage": false,
      "is_orphaned": true,
      "links": [],
      "called_by_fqns": [],
      "calls_fqns": []
    },
    "links": [],
    "called_by_fqns": [
      "pil_meta.pipeline",
      "pil_meta.pipeline.run_pipeline"
    ],
    "calls_fqns": []
  },
  "pil_meta.loaders.code_loader": {
    "fqname": "pil_meta.loaders.code_loader",
    "type": "module",
    "description": "Code Loader (loaders)",
    "tags": [],
    "source_file": "pil_meta\\loaders\\code_loader.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "pil_meta.loaders.code_loader",
      "module": "pil_meta.loaders.code_loader",
      "function": null,
      "type": "module",
      "lineno": 1,
      "source_file": "pil_meta\\loaders\\code_loader.py",
      "description": "Code Loader (loaders)",
      "docstring_full": "Code Loader (loaders)\n\nWalks the source tree and extracts all top-level symbols:\n- Modules (one per file)\n- Classes\n- Functions and methods\n- Variables (top-level assignments, including lists/constants)\n\nFor variables, parses preceding comment blocks as their docstring\n(using structured annotation standards).\n\nAll nodes are enriched with docstring metadata via extract_docstring_metadata.",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {},
      "test_coverage": false,
      "is_orphaned": true,
      "links": [],
      "called_by_fqns": [],
      "calls_fqns": []
    },
    "links": [
      {
        "target": "pil_meta.loaders.code_loader.module_name",
        "type": "calls"
      },
      {
        "target": "pil_meta.utils.docstring_utils.extract_docstring_metadata",
        "type": "calls"
      },
      {
        "target": "pil_meta.utils.docstring_utils.extract_docstring_metadata",
        "type": "calls"
      },
      {
        "target": "pil_meta.loaders.code_loader.visit",
        "type": "calls"
      },
      {
        "target": "pil_meta.loaders.code_loader.extract_nodes_from_ast",
        "type": "calls"
      },
      {
        "target": "pil_meta.utils.docstring_utils.extract_docstring_metadata",
        "type": "calls"
      },
      {
        "target": "pil_meta.utils.docstring_utils.extract_docstring_metadata",
        "type": "calls"
      },
      {
        "target": "pil_meta.loaders.code_loader.visit",
        "type": "calls"
      },
      {
        "target": "pil_meta.loaders.code_loader.ParentNodeVisitor",
        "type": "calls"
      }
    ],
    "calls_fqns": [
      "pil_meta.loaders.code_loader.ParentNodeVisitor",
      "pil_meta.loaders.code_loader.extract_nodes_from_ast",
      "pil_meta.loaders.code_loader.module_name",
      "pil_meta.loaders.code_loader.visit",
      "pil_meta.utils.docstring_utils.extract_docstring_metadata"
    ]
  },
  "pil_meta.loaders.code_loader.extract_nodes_from_ast": {
    "fqname": "pil_meta.loaders.code_loader.extract_nodes_from_ast",
    "type": "function",
    "description": "Extracts modules, classes, functions, methods, and variables from an AST.",
    "tags": [],
    "source_file": "pil_meta\\loaders\\code_loader.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "pil_meta.loaders.code_loader.extract_nodes_from_ast",
      "module": "pil_meta.loaders.code_loader",
      "function": "extract_nodes_from_ast",
      "type": "function",
      "lineno": 23,
      "source_file": "pil_meta\\loaders\\code_loader.py",
      "description": "Extracts modules, classes, functions, methods, and variables from an AST.",
      "docstring_full": "Extracts modules, classes, functions, methods, and variables from an AST.\n\n- For modules, captures file-level docstrings.\n- For classes, captures class docstrings.\n- For functions and methods, uses parent assignment to distinguish type.\n- For variables (assignments), captures immediately preceding comments as a docstring.\n\nEach node is enriched with:\n- description: First line of docstring/comment\n- docstring_full: Full body\n- tags, linked_journal_entry, deprecated, status, visibility: Parsed from docstring/comment if present\n- docstring_present: True if a description is present\n\nParameters:\n    tree (ast.AST): Parsed AST of a Python file\n    source_file (Path): Path to the Python file\n    root_path (Path): Project root (for relative module calculation)\n\nReturns:\n    List[Dict[str, Any]]: List of symbol metadata dicts",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "tree",
          "source_file",
          "root_path"
        ],
        "returns": null
      },
      "test_coverage": false,
      "is_orphaned": true,
      "links": [],
      "called_by_fqns": [],
      "calls_fqns": []
    },
    "links": [
      {
        "target": "pil_meta.loaders.code_loader.module_name",
        "type": "calls"
      },
      {
        "target": "pil_meta.utils.docstring_utils.extract_docstring_metadata",
        "type": "calls"
      },
      {
        "target": "pil_meta.utils.docstring_utils.extract_docstring_metadata",
        "type": "calls"
      },
      {
        "target": "pil_meta.loaders.code_loader.visit",
        "type": "calls"
      },
      {
        "target": "pil_meta.loaders.code_loader.extract_nodes_from_ast",
        "type": "calls"
      },
      {
        "target": "pil_meta.utils.docstring_utils.extract_docstring_metadata",
        "type": "calls"
      },
      {
        "target": "pil_meta.utils.docstring_utils.extract_docstring_metadata",
        "type": "calls"
      },
      {
        "target": "pil_meta.loaders.code_loader.visit",
        "type": "calls"
      },
      {
        "target": "pil_meta.loaders.code_loader.ParentNodeVisitor",
        "type": "calls"
      }
    ],
    "called_by_fqns": [
      "pil_meta.loaders.code_loader",
      "pil_meta.loaders.code_loader.extract_nodes_from_ast",
      "pil_meta.loaders.code_loader.load_code_symbols",
      "pil_meta.loaders.code_loader.module_name",
      "pil_meta.loaders.code_loader.ParentNodeVisitor",
      "pil_meta.loaders.code_loader.visit"
    ],
    "calls_fqns": [
      "pil_meta.loaders.code_loader.ParentNodeVisitor",
      "pil_meta.loaders.code_loader.extract_nodes_from_ast",
      "pil_meta.loaders.code_loader.module_name",
      "pil_meta.loaders.code_loader.visit",
      "pil_meta.utils.docstring_utils.extract_docstring_metadata"
    ]
  },
  "pil_meta.loaders.code_loader.load_code_symbols": {
    "fqname": "pil_meta.loaders.code_loader.load_code_symbols",
    "type": "function",
    "description": "Loads and parses all Python source files in the project root configured in pilconfig.json,",
    "tags": [
      "loader",
      "code"
    ],
    "source_file": "pil_meta\\loaders\\code_loader.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "pil_meta.loaders.code_loader.load_code_symbols",
      "module": "pil_meta.loaders.code_loader",
      "function": "load_code_symbols",
      "type": "function",
      "lineno": 169,
      "source_file": "pil_meta\\loaders\\code_loader.py",
      "description": "Loads and parses all Python source files in the project root configured in pilconfig.json,",
      "docstring_full": "Loads and parses all Python source files in the project root configured in pilconfig.json,\nextracting modules, classes, functions, methods, and variables with full metadata.\n\nParameters:\n    config_path (str): Path to the pilconfig.json configuration file.\n\nReturns:\n    List[Dict[str, Any]]: List of enriched symbol dictionaries.",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "config_path"
        ],
        "returns": null
      },
      "test_coverage": false,
      "is_orphaned": true,
      "links": [],
      "called_by_fqns": [],
      "calls_fqns": []
    },
    "links": [
      {
        "target": "pil_meta.loaders.code_loader.module_name",
        "type": "calls"
      },
      {
        "target": "pil_meta.utils.docstring_utils.extract_docstring_metadata",
        "type": "calls"
      },
      {
        "target": "pil_meta.utils.docstring_utils.extract_docstring_metadata",
        "type": "calls"
      },
      {
        "target": "pil_meta.loaders.code_loader.visit",
        "type": "calls"
      },
      {
        "target": "pil_meta.loaders.code_loader.extract_nodes_from_ast",
        "type": "calls"
      },
      {
        "target": "pil_meta.utils.docstring_utils.extract_docstring_metadata",
        "type": "calls"
      },
      {
        "target": "pil_meta.utils.docstring_utils.extract_docstring_metadata",
        "type": "calls"
      },
      {
        "target": "pil_meta.loaders.code_loader.visit",
        "type": "calls"
      },
      {
        "target": "pil_meta.loaders.code_loader.ParentNodeVisitor",
        "type": "calls"
      }
    ],
    "called_by_fqns": [
      "pil_meta.pipeline",
      "pil_meta.pipeline.run_pipeline"
    ],
    "calls_fqns": [
      "pil_meta.loaders.code_loader.ParentNodeVisitor",
      "pil_meta.loaders.code_loader.extract_nodes_from_ast",
      "pil_meta.loaders.code_loader.module_name",
      "pil_meta.loaders.code_loader.visit",
      "pil_meta.utils.docstring_utils.extract_docstring_metadata"
    ]
  },
  "pil_meta.loaders.code_loader.module_name": {
    "fqname": "pil_meta.loaders.code_loader.module_name",
    "type": "function",
    "description": "",
    "tags": [],
    "source_file": "pil_meta\\loaders\\code_loader.py",
    "test_coverage": false,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "pil_meta.loaders.code_loader.module_name",
      "module": "pil_meta.loaders.code_loader",
      "function": "module_name",
      "type": "function",
      "lineno": 48,
      "source_file": "pil_meta\\loaders\\code_loader.py",
      "description": "",
      "docstring_full": "",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": false,
      "metadata": {
        "args": [
          "path"
        ],
        "returns": null
      },
      "test_coverage": false,
      "is_orphaned": true,
      "links": [],
      "called_by_fqns": [],
      "calls_fqns": []
    },
    "links": [
      {
        "target": "pil_meta.loaders.code_loader.module_name",
        "type": "calls"
      },
      {
        "target": "pil_meta.utils.docstring_utils.extract_docstring_metadata",
        "type": "calls"
      },
      {
        "target": "pil_meta.utils.docstring_utils.extract_docstring_metadata",
        "type": "calls"
      },
      {
        "target": "pil_meta.loaders.code_loader.visit",
        "type": "calls"
      },
      {
        "target": "pil_meta.loaders.code_loader.extract_nodes_from_ast",
        "type": "calls"
      },
      {
        "target": "pil_meta.utils.docstring_utils.extract_docstring_metadata",
        "type": "calls"
      },
      {
        "target": "pil_meta.utils.docstring_utils.extract_docstring_metadata",
        "type": "calls"
      },
      {
        "target": "pil_meta.loaders.code_loader.visit",
        "type": "calls"
      },
      {
        "target": "pil_meta.loaders.code_loader.ParentNodeVisitor",
        "type": "calls"
      }
    ],
    "called_by_fqns": [
      "pil_meta.loaders.code_loader",
      "pil_meta.loaders.code_loader.extract_nodes_from_ast",
      "pil_meta.loaders.code_loader.load_code_symbols",
      "pil_meta.loaders.code_loader.module_name",
      "pil_meta.loaders.code_loader.ParentNodeVisitor",
      "pil_meta.loaders.code_loader.visit"
    ],
    "calls_fqns": [
      "pil_meta.loaders.code_loader.ParentNodeVisitor",
      "pil_meta.loaders.code_loader.extract_nodes_from_ast",
      "pil_meta.loaders.code_loader.module_name",
      "pil_meta.loaders.code_loader.visit",
      "pil_meta.utils.docstring_utils.extract_docstring_metadata"
    ]
  },
  "pil_meta.loaders.code_loader.ParentNodeVisitor": {
    "fqname": "pil_meta.loaders.code_loader.ParentNodeVisitor",
    "type": "class",
    "description": "Assigns parent references to all AST nodes for accurate method detection.",
    "tags": [],
    "source_file": "pil_meta\\loaders\\code_loader.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "pil_meta.loaders.code_loader.ParentNodeVisitor",
      "module": "pil_meta.loaders.code_loader",
      "function": "ParentNodeVisitor",
      "type": "class",
      "lineno": 188,
      "source_file": "pil_meta\\loaders\\code_loader.py",
      "description": "Assigns parent references to all AST nodes for accurate method detection.",
      "docstring_full": "Assigns parent references to all AST nodes for accurate method detection.",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {},
      "test_coverage": false,
      "is_orphaned": true,
      "links": [],
      "called_by_fqns": [],
      "calls_fqns": []
    },
    "links": [
      {
        "target": "pil_meta.loaders.code_loader.module_name",
        "type": "calls"
      },
      {
        "target": "pil_meta.utils.docstring_utils.extract_docstring_metadata",
        "type": "calls"
      },
      {
        "target": "pil_meta.utils.docstring_utils.extract_docstring_metadata",
        "type": "calls"
      },
      {
        "target": "pil_meta.loaders.code_loader.visit",
        "type": "calls"
      },
      {
        "target": "pil_meta.loaders.code_loader.extract_nodes_from_ast",
        "type": "calls"
      },
      {
        "target": "pil_meta.utils.docstring_utils.extract_docstring_metadata",
        "type": "calls"
      },
      {
        "target": "pil_meta.utils.docstring_utils.extract_docstring_metadata",
        "type": "calls"
      },
      {
        "target": "pil_meta.loaders.code_loader.visit",
        "type": "calls"
      },
      {
        "target": "pil_meta.loaders.code_loader.ParentNodeVisitor",
        "type": "calls"
      }
    ],
    "called_by_fqns": [
      "pil_meta.loaders.code_loader",
      "pil_meta.loaders.code_loader.extract_nodes_from_ast",
      "pil_meta.loaders.code_loader.load_code_symbols",
      "pil_meta.loaders.code_loader.module_name",
      "pil_meta.loaders.code_loader.ParentNodeVisitor",
      "pil_meta.loaders.code_loader.visit"
    ],
    "calls_fqns": [
      "pil_meta.loaders.code_loader.ParentNodeVisitor",
      "pil_meta.loaders.code_loader.extract_nodes_from_ast",
      "pil_meta.loaders.code_loader.module_name",
      "pil_meta.loaders.code_loader.visit",
      "pil_meta.utils.docstring_utils.extract_docstring_metadata"
    ]
  },
  "pil_meta.loaders.code_loader.visit": {
    "fqname": "pil_meta.loaders.code_loader.visit",
    "type": "method",
    "description": "",
    "tags": [],
    "source_file": "pil_meta\\loaders\\code_loader.py",
    "test_coverage": false,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "pil_meta.loaders.code_loader.visit",
      "module": "pil_meta.loaders.code_loader",
      "function": "visit",
      "type": "method",
      "lineno": 192,
      "source_file": "pil_meta\\loaders\\code_loader.py",
      "description": "",
      "docstring_full": "",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": false,
      "metadata": {
        "args": [
          "self",
          "node"
        ],
        "returns": null
      },
      "test_coverage": false,
      "is_orphaned": true,
      "links": [],
      "called_by_fqns": [],
      "calls_fqns": []
    },
    "links": [
      {
        "target": "pil_meta.loaders.code_loader.module_name",
        "type": "calls"
      },
      {
        "target": "pil_meta.utils.docstring_utils.extract_docstring_metadata",
        "type": "calls"
      },
      {
        "target": "pil_meta.utils.docstring_utils.extract_docstring_metadata",
        "type": "calls"
      },
      {
        "target": "pil_meta.loaders.code_loader.visit",
        "type": "calls"
      },
      {
        "target": "pil_meta.loaders.code_loader.extract_nodes_from_ast",
        "type": "calls"
      },
      {
        "target": "pil_meta.utils.docstring_utils.extract_docstring_metadata",
        "type": "calls"
      },
      {
        "target": "pil_meta.utils.docstring_utils.extract_docstring_metadata",
        "type": "calls"
      },
      {
        "target": "pil_meta.loaders.code_loader.visit",
        "type": "calls"
      },
      {
        "target": "pil_meta.loaders.code_loader.ParentNodeVisitor",
        "type": "calls"
      }
    ],
    "called_by_fqns": [
      "pil_meta.loaders.code_loader",
      "pil_meta.loaders.code_loader",
      "pil_meta.loaders.code_loader.extract_nodes_from_ast",
      "pil_meta.loaders.code_loader.extract_nodes_from_ast",
      "pil_meta.loaders.code_loader.load_code_symbols",
      "pil_meta.loaders.code_loader.load_code_symbols",
      "pil_meta.loaders.code_loader.module_name",
      "pil_meta.loaders.code_loader.module_name",
      "pil_meta.loaders.code_loader.ParentNodeVisitor",
      "pil_meta.loaders.code_loader.ParentNodeVisitor",
      "pil_meta.loaders.code_loader.visit",
      "pil_meta.loaders.code_loader.visit"
    ],
    "calls_fqns": [
      "pil_meta.loaders.code_loader.ParentNodeVisitor",
      "pil_meta.loaders.code_loader.extract_nodes_from_ast",
      "pil_meta.loaders.code_loader.module_name",
      "pil_meta.loaders.code_loader.visit",
      "pil_meta.utils.docstring_utils.extract_docstring_metadata"
    ]
  },
  "pil_meta.loaders.config_loader": {
    "fqname": "pil_meta.loaders.config_loader",
    "type": "module",
    "description": "Load and validate the pilconfig.json file.",
    "tags": [],
    "source_file": "pil_meta\\loaders\\config_loader.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "pil_meta.loaders.config_loader",
      "module": "pil_meta.loaders.config_loader",
      "function": null,
      "type": "module",
      "lineno": 1,
      "source_file": "pil_meta\\loaders\\config_loader.py",
      "description": "Load and validate the pilconfig.json file.",
      "docstring_full": "Load and validate the pilconfig.json file.",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {},
      "test_coverage": false,
      "is_orphaned": true,
      "links": [],
      "called_by_fqns": [],
      "calls_fqns": []
    },
    "links": [],
    "calls_fqns": []
  },
  "pil_meta.loaders.config_loader.load_config": {
    "fqname": "pil_meta.loaders.config_loader.load_config",
    "type": "function",
    "description": "",
    "tags": [],
    "source_file": "pil_meta\\loaders\\config_loader.py",
    "test_coverage": false,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "pil_meta.loaders.config_loader.load_config",
      "module": "pil_meta.loaders.config_loader",
      "function": "load_config",
      "type": "function",
      "lineno": 6,
      "source_file": "pil_meta\\loaders\\config_loader.py",
      "description": "",
      "docstring_full": "",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": false,
      "metadata": {
        "args": [
          "path"
        ],
        "returns": null
      },
      "test_coverage": false,
      "is_orphaned": true,
      "links": [],
      "called_by_fqns": [],
      "calls_fqns": []
    },
    "links": [],
    "called_by_fqns": [
      "pil_meta.pipeline",
      "pil_meta.pipeline.run_pipeline"
    ],
    "calls_fqns": []
  },
  "pil_meta.loaders.markdown_loader": {
    "fqname": "pil_meta.loaders.markdown_loader",
    "type": "module",
    "description": "Load design journal or markdown documentation for potential linkages.",
    "tags": [],
    "source_file": "pil_meta\\loaders\\markdown_loader.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "pil_meta.loaders.markdown_loader",
      "module": "pil_meta.loaders.markdown_loader",
      "function": null,
      "type": "module",
      "lineno": 1,
      "source_file": "pil_meta\\loaders\\markdown_loader.py",
      "description": "Load design journal or markdown documentation for potential linkages.",
      "docstring_full": "Load design journal or markdown documentation for potential linkages.\nExpected output: list of entries with headers, tags, body text.",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {},
      "test_coverage": false,
      "is_orphaned": true,
      "links": [],
      "called_by_fqns": [],
      "calls_fqns": []
    },
    "links": [],
    "calls_fqns": []
  },
  "pil_meta.loaders.markdown_loader.load_markdown_entries": {
    "fqname": "pil_meta.loaders.markdown_loader.load_markdown_entries",
    "type": "function",
    "description": "",
    "tags": [],
    "source_file": "pil_meta\\loaders\\markdown_loader.py",
    "test_coverage": false,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "pil_meta.loaders.markdown_loader.load_markdown_entries",
      "module": "pil_meta.loaders.markdown_loader",
      "function": "load_markdown_entries",
      "type": "function",
      "lineno": 7,
      "source_file": "pil_meta\\loaders\\markdown_loader.py",
      "description": "",
      "docstring_full": "",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": false,
      "metadata": {
        "args": [
          "journal_path"
        ],
        "returns": null
      },
      "test_coverage": false,
      "is_orphaned": true,
      "links": [],
      "called_by_fqns": [],
      "calls_fqns": []
    },
    "links": [],
    "calls_fqns": []
  },
  "pil_meta.utils.docstring_utils": {
    "fqname": "pil_meta.utils.docstring_utils",
    "type": "module",
    "description": "Docstring Utilities (utils)",
    "tags": [],
    "source_file": "pil_meta\\utils\\docstring_utils.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "pil_meta.utils.docstring_utils",
      "module": "pil_meta.utils.docstring_utils",
      "function": null,
      "type": "module",
      "lineno": 1,
      "source_file": "pil_meta\\utils\\docstring_utils.py",
      "description": "Docstring Utilities (utils)",
      "docstring_full": "Docstring Utilities (utils)\n\nHouses reusable docstring validation logic shared across pipeline components.\nAlso supports docstring extraction and structured annotation parsing.",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {},
      "test_coverage": false,
      "is_orphaned": true,
      "links": [],
      "called_by_fqns": [],
      "calls_fqns": []
    },
    "links": [],
    "calls_fqns": []
  },
  "pil_meta.utils.docstring_utils.check_docstring_signature_match": {
    "fqname": "pil_meta.utils.docstring_utils.check_docstring_signature_match",
    "type": "function",
    "description": "Checks if the function docstring references the function name and its parameters.",
    "tags": [],
    "source_file": "pil_meta\\utils\\docstring_utils.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "pil_meta.utils.docstring_utils.check_docstring_signature_match",
      "module": "pil_meta.utils.docstring_utils",
      "function": "check_docstring_signature_match",
      "type": "function",
      "lineno": 13,
      "source_file": "pil_meta\\utils\\docstring_utils.py",
      "description": "Checks if the function docstring references the function name and its parameters.",
      "docstring_full": "Checks if the function docstring references the function name and its parameters.\n\nParameters:\n    node (dict): Metadata dictionary for a function or method.\n\nReturns:\n    bool: True if name and all params appear in the first line of the docstring",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "node"
        ],
        "returns": null
      },
      "test_coverage": false,
      "is_orphaned": true,
      "links": [],
      "called_by_fqns": [],
      "calls_fqns": []
    },
    "links": [],
    "calls_fqns": [],
    "called_by_fqns": [
      "pil_meta.validators.governance_validator",
      "pil_meta.validators.governance_validator.validate_governance_rules"
    ]
  },
  "pil_meta.utils.docstring_utils.extract_docstring_metadata": {
    "fqname": "pil_meta.utils.docstring_utils.extract_docstring_metadata",
    "type": "function",
    "description": "Extracts structured metadata from a docstring.",
    "tags": [
      "tag1",
      "tag2"
    ],
    "source_file": "pil_meta\\utils\\docstring_utils.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": "linked entry",
    "is_orphaned": false,
    "metadata": {
      "fqname": "pil_meta.utils.docstring_utils.extract_docstring_metadata",
      "module": "pil_meta.utils.docstring_utils",
      "function": "extract_docstring_metadata",
      "type": "function",
      "lineno": 32,
      "source_file": "pil_meta\\utils\\docstring_utils.py",
      "description": "Extracts structured metadata from a docstring.",
      "docstring_full": "Extracts structured metadata from a docstring.\n\nParameters:\n    docstring (str): Full function/class/module docstring\n\nReturns:\n    dict: Contains 'description', 'docstring_full', 'tags', 'journal', 'deprecated', plus optional future fields.\n\nSupports:\n    - @tags: [\"tag1\", \"tag2\"]\n    - @journal: \"linked entry\"\n    - @deprecated\n    - @status: \"draft\"\n    - @visibility: \"internal\"",
      "tags": [
        "tag1",
        "tag2"
      ],
      "linked_journal_entry": "linked entry",
      "deprecated": true,
      "status": "draft",
      "visibility": "internal",
      "docstring_present": true,
      "metadata": {
        "args": [
          "docstring"
        ],
        "returns": null
      },
      "test_coverage": false,
      "is_orphaned": true,
      "links": [],
      "called_by_fqns": [],
      "calls_fqns": []
    },
    "links": [],
    "called_by_fqns": [
      "pil_meta.loaders.code_loader",
      "pil_meta.loaders.code_loader",
      "pil_meta.loaders.code_loader",
      "pil_meta.loaders.code_loader",
      "pil_meta.loaders.code_loader.extract_nodes_from_ast",
      "pil_meta.loaders.code_loader.extract_nodes_from_ast",
      "pil_meta.loaders.code_loader.extract_nodes_from_ast",
      "pil_meta.loaders.code_loader.extract_nodes_from_ast",
      "pil_meta.loaders.code_loader.load_code_symbols",
      "pil_meta.loaders.code_loader.load_code_symbols",
      "pil_meta.loaders.code_loader.load_code_symbols",
      "pil_meta.loaders.code_loader.load_code_symbols",
      "pil_meta.loaders.code_loader.module_name",
      "pil_meta.loaders.code_loader.module_name",
      "pil_meta.loaders.code_loader.module_name",
      "pil_meta.loaders.code_loader.module_name",
      "pil_meta.loaders.code_loader.ParentNodeVisitor",
      "pil_meta.loaders.code_loader.ParentNodeVisitor",
      "pil_meta.loaders.code_loader.ParentNodeVisitor",
      "pil_meta.loaders.code_loader.ParentNodeVisitor",
      "pil_meta.loaders.code_loader.visit",
      "pil_meta.loaders.code_loader.visit",
      "pil_meta.loaders.code_loader.visit",
      "pil_meta.loaders.code_loader.visit"
    ],
    "calls_fqns": []
  },
  "pil_meta.utils.exceptions_reporter_utils": {
    "fqname": "pil_meta.utils.exceptions_reporter_utils",
    "type": "module",
    "description": "Project health analysis and governance exception reporting.",
    "tags": [],
    "source_file": "pil_meta\\utils\\exceptions_reporter_utils.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "pil_meta.utils.exceptions_reporter_utils",
      "module": "pil_meta.utils.exceptions_reporter_utils",
      "function": null,
      "type": "module",
      "lineno": 1,
      "source_file": "pil_meta\\utils\\exceptions_reporter_utils.py",
      "description": "Project health analysis and governance exception reporting.",
      "docstring_full": "Project health analysis and governance exception reporting.\n\nDelegates validation and enrichment to dedicated modules. Coordinates:\n- Governance rule execution\n- Usage graph export\n- Summary reporting\n\nGovernance logic lives in governance_validator.py\nUsage mapping lives in usage_map_builder.py",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {},
      "test_coverage": false,
      "is_orphaned": true,
      "links": [],
      "called_by_fqns": [],
      "calls_fqns": []
    },
    "links": [
      {
        "target": "pil_meta.validators.governance_validator.validate_governance_rules",
        "type": "calls"
      },
      {
        "target": "pil_meta.builders.usage_map_builder.build_usage_map",
        "type": "calls"
      }
    ],
    "calls_fqns": [
      "pil_meta.builders.usage_map_builder.build_usage_map",
      "pil_meta.validators.governance_validator.validate_governance_rules"
    ]
  },
  "pil_meta.utils.exceptions_reporter_utils.generate_exception_report": {
    "fqname": "pil_meta.utils.exceptions_reporter_utils.generate_exception_report",
    "type": "function",
    "description": "Extracts and exports metadata violations and usage mappings to a governance-style report.",
    "tags": [],
    "source_file": "pil_meta\\utils\\exceptions_reporter_utils.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "pil_meta.utils.exceptions_reporter_utils.generate_exception_report",
      "module": "pil_meta.utils.exceptions_reporter_utils",
      "function": "generate_exception_report",
      "type": "function",
      "lineno": 21,
      "source_file": "pil_meta\\utils\\exceptions_reporter_utils.py",
      "description": "Extracts and exports metadata violations and usage mappings to a governance-style report.",
      "docstring_full": "Extracts and exports metadata violations and usage mappings to a governance-style report.\n\nParameters:\n    graph (dict): Full entity graph keyed by fqname\n    output_path (str): Path to write the exceptions report\n\nReturns:\n    dict: Summary counts of major issue types for downstream printing",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "graph",
          "output_path"
        ],
        "returns": null
      },
      "test_coverage": false,
      "is_orphaned": true,
      "links": [],
      "called_by_fqns": [],
      "calls_fqns": []
    },
    "links": [
      {
        "target": "pil_meta.validators.governance_validator.validate_governance_rules",
        "type": "calls"
      },
      {
        "target": "pil_meta.builders.usage_map_builder.build_usage_map",
        "type": "calls"
      }
    ],
    "called_by_fqns": [
      "pil_meta.pipeline",
      "pil_meta.pipeline.run_pipeline"
    ],
    "calls_fqns": [
      "pil_meta.builders.usage_map_builder.build_usage_map",
      "pil_meta.validators.governance_validator.validate_governance_rules"
    ]
  },
  "pil_meta.utils.graph_utils": {
    "fqname": "pil_meta.utils.graph_utils",
    "type": "module",
    "description": "Reusable graph logic, e.g. flatten, walk, summarize.",
    "tags": [],
    "source_file": "pil_meta\\utils\\graph_utils.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "pil_meta.utils.graph_utils",
      "module": "pil_meta.utils.graph_utils",
      "function": null,
      "type": "module",
      "lineno": 1,
      "source_file": "pil_meta\\utils\\graph_utils.py",
      "description": "Reusable graph logic, e.g. flatten, walk, summarize.",
      "docstring_full": "Reusable graph logic, e.g. flatten, walk, summarize.",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {},
      "test_coverage": false,
      "is_orphaned": true,
      "links": [],
      "called_by_fqns": [],
      "calls_fqns": []
    },
    "links": [],
    "calls_fqns": []
  },
  "pil_meta.utils.graph_utils.walk_graph": {
    "fqname": "pil_meta.utils.graph_utils.walk_graph",
    "type": "function",
    "description": "",
    "tags": [],
    "source_file": "pil_meta\\utils\\graph_utils.py",
    "test_coverage": false,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "pil_meta.utils.graph_utils.walk_graph",
      "module": "pil_meta.utils.graph_utils",
      "function": "walk_graph",
      "type": "function",
      "lineno": 5,
      "source_file": "pil_meta\\utils\\graph_utils.py",
      "description": "",
      "docstring_full": "",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": false,
      "metadata": {
        "args": [
          "graph"
        ],
        "returns": null
      },
      "test_coverage": false,
      "is_orphaned": true,
      "links": [],
      "called_by_fqns": [],
      "calls_fqns": []
    },
    "links": [],
    "calls_fqns": []
  },
  "pil_meta.utils.path_utils": {
    "fqname": "pil_meta.utils.path_utils",
    "type": "module",
    "description": "Normalize and validate file system paths.",
    "tags": [],
    "source_file": "pil_meta\\utils\\path_utils.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "pil_meta.utils.path_utils",
      "module": "pil_meta.utils.path_utils",
      "function": null,
      "type": "module",
      "lineno": 1,
      "source_file": "pil_meta\\utils\\path_utils.py",
      "description": "Normalize and validate file system paths.",
      "docstring_full": "Normalize and validate file system paths.",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {},
      "test_coverage": false,
      "is_orphaned": true,
      "links": [],
      "called_by_fqns": [],
      "calls_fqns": []
    },
    "links": [],
    "calls_fqns": []
  },
  "pil_meta.utils.path_utils.resolve_path": {
    "fqname": "pil_meta.utils.path_utils.resolve_path",
    "type": "function",
    "description": "",
    "tags": [],
    "source_file": "pil_meta\\utils\\path_utils.py",
    "test_coverage": false,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "pil_meta.utils.path_utils.resolve_path",
      "module": "pil_meta.utils.path_utils",
      "function": "resolve_path",
      "type": "function",
      "lineno": 5,
      "source_file": "pil_meta\\utils\\path_utils.py",
      "description": "",
      "docstring_full": "",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": false,
      "metadata": {
        "args": [
          "path"
        ],
        "returns": null
      },
      "test_coverage": false,
      "is_orphaned": true,
      "links": [],
      "called_by_fqns": [],
      "calls_fqns": []
    },
    "links": [],
    "calls_fqns": []
  },
  "pil_meta.utils.test_coverage_utils": {
    "fqname": "pil_meta.utils.test_coverage_utils",
    "type": "module",
    "description": "Test Coverage Utilities (utils)",
    "tags": [],
    "source_file": "pil_meta\\utils\\test_coverage_utils.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "pil_meta.utils.test_coverage_utils",
      "module": "pil_meta.utils.test_coverage_utils",
      "function": null,
      "type": "module",
      "lineno": 1,
      "source_file": "pil_meta\\utils\\test_coverage_utils.py",
      "description": "Test Coverage Utilities (utils)",
      "docstring_full": "Test Coverage Utilities (utils)\n\nProvides functions to estimate static test coverage by scanning test files\nand matching function/method/class names to code symbols.",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {},
      "test_coverage": false,
      "is_orphaned": true,
      "links": [],
      "called_by_fqns": [],
      "calls_fqns": []
    },
    "links": [],
    "calls_fqns": []
  },
  "pil_meta.utils.test_coverage_utils.estimate_test_coverage": {
    "fqname": "pil_meta.utils.test_coverage_utils.estimate_test_coverage",
    "type": "function",
    "description": "Updates the 'test_coverage' field for each symbol based on whether",
    "tags": [],
    "source_file": "pil_meta\\utils\\test_coverage_utils.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "pil_meta.utils.test_coverage_utils.estimate_test_coverage",
      "module": "pil_meta.utils.test_coverage_utils",
      "function": "estimate_test_coverage",
      "type": "function",
      "lineno": 13,
      "source_file": "pil_meta\\utils\\test_coverage_utils.py",
      "description": "Updates the 'test_coverage' field for each symbol based on whether",
      "docstring_full": "Updates the 'test_coverage' field for each symbol based on whether\nits function/class/method name appears in any test file.\n\nParameters:\n    symbols (list[dict]): List of code symbol metadata dicts.\n    test_dir (str): Directory containing test files.\n\nReturns:\n    list[dict]: The same list, with 'test_coverage' set for each symbol.",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "symbols",
          "test_dir"
        ],
        "returns": null
      },
      "test_coverage": false,
      "is_orphaned": true,
      "links": [],
      "called_by_fqns": [],
      "calls_fqns": []
    },
    "links": [],
    "called_by_fqns": [
      "pil_meta.pipeline",
      "pil_meta.pipeline.run_pipeline"
    ],
    "calls_fqns": []
  },
  "pil_meta.validators.governance_validator": {
    "fqname": "pil_meta.validators.governance_validator",
    "type": "module",
    "description": "Validation Rules (validators)",
    "tags": [],
    "source_file": "pil_meta\\validators\\governance_validator.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "pil_meta.validators.governance_validator",
      "module": "pil_meta.validators.governance_validator",
      "function": null,
      "type": "module",
      "lineno": 1,
      "source_file": "pil_meta\\validators\\governance_validator.py",
      "description": "Validation Rules (validators)",
      "docstring_full": "Validation Rules (validators)\n\nApplies all governance rules to the entity graph.\nIncludes docstring checks, test coverage, orphan detection, etc.",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {},
      "test_coverage": false,
      "is_orphaned": true,
      "links": [],
      "called_by_fqns": [],
      "calls_fqns": []
    },
    "links": [
      {
        "target": "pil_meta.utils.docstring_utils.check_docstring_signature_match",
        "type": "calls"
      }
    ],
    "calls_fqns": [
      "pil_meta.utils.docstring_utils.check_docstring_signature_match"
    ]
  },
  "pil_meta.validators.governance_validator.validate_governance_rules": {
    "fqname": "pil_meta.validators.governance_validator.validate_governance_rules",
    "type": "function",
    "description": "Run all rule checks over the graph.",
    "tags": [],
    "source_file": "pil_meta\\validators\\governance_validator.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "pil_meta.validators.governance_validator.validate_governance_rules",
      "module": "pil_meta.validators.governance_validator",
      "function": "validate_governance_rules",
      "type": "function",
      "lineno": 13,
      "source_file": "pil_meta\\validators\\governance_validator.py",
      "description": "Run all rule checks over the graph.",
      "docstring_full": "Run all rule checks over the graph.\n\nParameters:\n    graph (dict): Entity graph keyed by fqname\n\nReturns:\n    tuple: (violations dict, issue counter)",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "graph"
        ],
        "returns": null
      },
      "test_coverage": false,
      "is_orphaned": true,
      "links": [],
      "called_by_fqns": [],
      "calls_fqns": []
    },
    "links": [
      {
        "target": "pil_meta.utils.docstring_utils.check_docstring_signature_match",
        "type": "calls"
      }
    ],
    "called_by_fqns": [
      "pil_meta.utils.exceptions_reporter_utils",
      "pil_meta.utils.exceptions_reporter_utils.generate_exception_report"
    ],
    "calls_fqns": [
      "pil_meta.utils.docstring_utils.check_docstring_signature_match"
    ]
  }
}