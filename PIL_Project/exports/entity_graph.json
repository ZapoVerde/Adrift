{
  "pipeline": {
    "fqname": "pipeline",
    "type": "module",
    "description": "Main orchestration pipeline for the PIL meta-engine.",
    "tags": [],
    "source_file": "pipeline.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "pipeline",
      "module": "pipeline",
      "name": "pipeline",
      "type": "module",
      "lineno": 1,
      "source_file": "pipeline.py",
      "description": "Main orchestration pipeline for the PIL meta-engine.",
      "docstring_full": "Main orchestration pipeline for the PIL meta-engine.\nHandles config loading, symbol extraction, entity graph building, linkage injection,\ntag/link application, export, and governance reporting.",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {}
    },
    "links": [
      {
        "target": "pipeline.run_pipeline",
        "type": "calls"
      },
      {
        "target": "loaders.config_loader.load_config",
        "type": "calls"
      },
      {
        "target": "loaders.asset_loader.load_asset_symbols",
        "type": "calls"
      },
      {
        "target": "builders.entity_graph_builder.build_entity_graph",
        "type": "calls"
      },
      {
        "target": "builders.linkage_builder.inject_call_links",
        "type": "calls"
      },
      {
        "target": "exporters.json_exporter.export_entity_graph",
        "type": "calls"
      },
      {
        "target": "builders.usage_map_builder.build_usage_map",
        "type": "calls"
      },
      {
        "target": "exporters.usage_map_exporter.export_usage_map",
        "type": "calls"
      },
      {
        "target": "exporters.markdown_vault_exporter.export_markdown_vault",
        "type": "calls"
      },
      {
        "target": "exporters.vault_index_exporter.export_vault_index",
        "type": "calls"
      },
      {
        "target": "exporters.variable_usage_report_exporter.export_variable_usage_markdown",
        "type": "calls"
      },
      {
        "target": "utils.exceptions_reporter_utils.generate_exception_report",
        "type": "calls"
      },
      {
        "target": "loaders.markdown_loader.load_markdown_entries",
        "type": "calls"
      },
      {
        "target": "utils.snapshot_utils.take_project_snapshot",
        "type": "calls"
      },
      {
        "target": "loaders.code_loader.load_code_symbols",
        "type": "calls"
      }
    ],
    "called_by_fqns": [],
    "calls_fqns": [
      "builders.entity_graph_builder.build_entity_graph",
      "builders.linkage_builder.inject_call_links",
      "builders.usage_map_builder.build_usage_map",
      "exporters.json_exporter.export_entity_graph",
      "exporters.markdown_vault_exporter.export_markdown_vault",
      "exporters.usage_map_exporter.export_usage_map",
      "exporters.variable_usage_report_exporter.export_variable_usage_markdown",
      "exporters.vault_index_exporter.export_vault_index",
      "loaders.asset_loader.load_asset_symbols",
      "loaders.code_loader.load_code_symbols",
      "loaders.config_loader.load_config",
      "loaders.markdown_loader.load_markdown_entries",
      "pipeline.run_pipeline",
      "utils.exceptions_reporter_utils.generate_exception_report",
      "utils.snapshot_utils.take_project_snapshot"
    ]
  },
  "pipeline.run_pipeline": {
    "fqname": "pipeline.run_pipeline",
    "type": "function",
    "description": "Main entry point for running the PIL meta pipeline.",
    "tags": [],
    "source_file": "pipeline.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "pipeline.run_pipeline",
      "module": "pipeline",
      "name": "run_pipeline",
      "type": "function",
      "lineno": 31,
      "source_file": "pipeline.py",
      "description": "Main entry point for running the PIL meta pipeline.",
      "docstring_full": "Main entry point for running the PIL meta pipeline.\nLoads config, runs all stages, and writes outputs using bulletproof absolute pathing.",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "config_path"
        ],
        "returns": null
      }
    },
    "links": [
      {
        "target": "pipeline.run_pipeline",
        "type": "calls"
      },
      {
        "target": "loaders.config_loader.load_config",
        "type": "calls"
      },
      {
        "target": "loaders.asset_loader.load_asset_symbols",
        "type": "calls"
      },
      {
        "target": "builders.entity_graph_builder.build_entity_graph",
        "type": "calls"
      },
      {
        "target": "builders.linkage_builder.inject_call_links",
        "type": "calls"
      },
      {
        "target": "exporters.json_exporter.export_entity_graph",
        "type": "calls"
      },
      {
        "target": "builders.usage_map_builder.build_usage_map",
        "type": "calls"
      },
      {
        "target": "exporters.usage_map_exporter.export_usage_map",
        "type": "calls"
      },
      {
        "target": "exporters.markdown_vault_exporter.export_markdown_vault",
        "type": "calls"
      },
      {
        "target": "exporters.vault_index_exporter.export_vault_index",
        "type": "calls"
      },
      {
        "target": "exporters.variable_usage_report_exporter.export_variable_usage_markdown",
        "type": "calls"
      },
      {
        "target": "utils.exceptions_reporter_utils.generate_exception_report",
        "type": "calls"
      },
      {
        "target": "loaders.markdown_loader.load_markdown_entries",
        "type": "calls"
      },
      {
        "target": "utils.snapshot_utils.take_project_snapshot",
        "type": "calls"
      },
      {
        "target": "loaders.code_loader.load_code_symbols",
        "type": "calls"
      }
    ],
    "called_by_fqns": [
      "pipeline",
      "pipeline.run_pipeline"
    ],
    "calls_fqns": [
      "builders.entity_graph_builder.build_entity_graph",
      "builders.linkage_builder.inject_call_links",
      "builders.usage_map_builder.build_usage_map",
      "exporters.json_exporter.export_entity_graph",
      "exporters.markdown_vault_exporter.export_markdown_vault",
      "exporters.usage_map_exporter.export_usage_map",
      "exporters.variable_usage_report_exporter.export_variable_usage_markdown",
      "exporters.vault_index_exporter.export_vault_index",
      "loaders.asset_loader.load_asset_symbols",
      "loaders.code_loader.load_code_symbols",
      "loaders.config_loader.load_config",
      "loaders.markdown_loader.load_markdown_entries",
      "pipeline.run_pipeline",
      "utils.exceptions_reporter_utils.generate_exception_report",
      "utils.snapshot_utils.take_project_snapshot"
    ]
  },
  "builders.linkage_builder": {
    "fqname": "builders.linkage_builder",
    "type": "module",
    "description": "Adds call relationships between entities in the graph.",
    "tags": [],
    "source_file": "builders/linkage_builder.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "builders.linkage_builder",
      "module": "builders.linkage_builder",
      "name": "builders.linkage_builder",
      "type": "module",
      "lineno": 1,
      "source_file": "builders/linkage_builder.py",
      "description": "Adds call relationships between entities in the graph.",
      "docstring_full": "Adds call relationships between entities in the graph.\n\nUses AST parsing to detect structural function calls, updates each node with:\n- calls_fqns\n- called_by_fqns\n- links: [ { target, type: \"calls\" } ]\n- is_orphaned (recomputed after linkage)",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {}
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "builders.linkage_builder.extract_called_functions": {
    "fqname": "builders.linkage_builder.extract_called_functions",
    "type": "function",
    "description": "Parses source code and extracts all function names that are called.",
    "tags": [],
    "source_file": "builders/linkage_builder.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "builders.linkage_builder.extract_called_functions",
      "module": "builders.linkage_builder",
      "name": "extract_called_functions",
      "type": "function",
      "lineno": 16,
      "source_file": "builders/linkage_builder.py",
      "description": "Parses source code and extracts all function names that are called.",
      "docstring_full": "Parses source code and extracts all function names that are called.\n\nParameters:\n    source (str): The raw source code of a .py file\n\nReturns:\n    list[str]: All direct call targets (unqualified names)",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "source"
        ],
        "returns": null
      }
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "builders.linkage_builder.inject_call_links": {
    "fqname": "builders.linkage_builder.inject_call_links",
    "type": "function",
    "description": "Injects structural call links into the entity graph.",
    "tags": [],
    "source_file": "builders/linkage_builder.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "builders.linkage_builder.inject_call_links",
      "module": "builders.linkage_builder",
      "name": "inject_call_links",
      "type": "function",
      "lineno": 43,
      "source_file": "builders/linkage_builder.py",
      "description": "Injects structural call links into the entity graph.",
      "docstring_full": "Injects structural call links into the entity graph.\n\nParameters:\n    entity_graph (dict): Entity metadata keyed by fqname\n    project_root (str): Project root to re-open source files\n\nReturns:\n    dict: The enriched graph with linkage info",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "entity_graph",
          "project_root"
        ],
        "returns": null
      }
    },
    "links": [],
    "called_by_fqns": [
      "pipeline",
      "pipeline.run_pipeline"
    ],
    "calls_fqns": []
  },
  "builders.entity_graph_builder": {
    "fqname": "builders.entity_graph_builder",
    "type": "module",
    "description": "Wraps pre-enriched code entities into graph nodes for the entity graph.",
    "tags": [],
    "source_file": "builders/entity_graph_builder.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "builders.entity_graph_builder",
      "module": "builders.entity_graph_builder",
      "name": "builders.entity_graph_builder",
      "type": "module",
      "lineno": 1,
      "source_file": "builders/entity_graph_builder.py",
      "description": "Wraps pre-enriched code entities into graph nodes for the entity graph.",
      "docstring_full": "Wraps pre-enriched code entities into graph nodes for the entity graph.\n\nAssumes upstream loader (code_loader) has already attached all required metadata,\nincluding tags, docstring status, and test coverage placeholders.\n\nOutput format conforms to the `entity_graph.json` specification.",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {}
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "builders.entity_graph_builder.build_entity_graph": {
    "fqname": "builders.entity_graph_builder.build_entity_graph",
    "type": "function",
    "description": "Wrap each enriched entity into a compliant graph node.",
    "tags": [],
    "source_file": "builders/entity_graph_builder.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "builders.entity_graph_builder.build_entity_graph",
      "module": "builders.entity_graph_builder",
      "name": "build_entity_graph",
      "type": "function",
      "lineno": 11,
      "source_file": "builders/entity_graph_builder.py",
      "description": "Wrap each enriched entity into a compliant graph node.",
      "docstring_full": "Wrap each enriched entity into a compliant graph node.\n\nParameters:\n    entities (list[dict]): Raw or enriched entity records.\n\nReturns:\n    dict: fqname → wrapped graph node",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "entities"
        ],
        "returns": null
      }
    },
    "links": [],
    "called_by_fqns": [
      "pipeline",
      "pipeline.run_pipeline"
    ],
    "calls_fqns": []
  },
  "builders.usage_map_builder": {
    "fqname": "builders.usage_map_builder",
    "type": "module",
    "description": "Usage Map Builder (builders)",
    "tags": [],
    "source_file": "builders/usage_map_builder.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "builders.usage_map_builder",
      "module": "builders.usage_map_builder",
      "name": "builders.usage_map_builder",
      "type": "module",
      "lineno": 1,
      "source_file": "builders/usage_map_builder.py",
      "description": "Usage Map Builder (builders)",
      "docstring_full": "Usage Map Builder (builders)\n\nConstructs a forward/reverse reference graph showing usage across the entity set.\nUseful for auditing call relationships beyond simple call trees.",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {}
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "builders.usage_map_builder.build_usage_map": {
    "fqname": "builders.usage_map_builder.build_usage_map",
    "type": "function",
    "description": "Create bidirectional usage summaries for each FQ name.",
    "tags": [],
    "source_file": "builders/usage_map_builder.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "builders.usage_map_builder.build_usage_map",
      "module": "builders.usage_map_builder",
      "name": "build_usage_map",
      "type": "function",
      "lineno": 11,
      "source_file": "builders/usage_map_builder.py",
      "description": "Create bidirectional usage summaries for each FQ name.",
      "docstring_full": "Create bidirectional usage summaries for each FQ name.\n\nParameters:\n    graph (dict): Full graph with calls_fqns available on each node\n\nReturns:\n    dict: { fqname: { used_by: [...], uses: [...] } }",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "graph"
        ],
        "returns": null
      }
    },
    "links": [],
    "called_by_fqns": [
      "pipeline",
      "pipeline.run_pipeline"
    ],
    "calls_fqns": []
  },
  "builders.variable_usage_builder": {
    "fqname": "builders.variable_usage_builder",
    "type": "module",
    "description": "Variable Usage Map Builder (builders)",
    "tags": [],
    "source_file": "builders/variable_usage_builder.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "builders.variable_usage_builder",
      "module": "builders.variable_usage_builder",
      "name": "builders.variable_usage_builder",
      "type": "module",
      "lineno": 1,
      "source_file": "builders/variable_usage_builder.py",
      "description": "Variable Usage Map Builder (builders)",
      "docstring_full": "Variable Usage Map Builder (builders)\n\nFinds all variables (top-level assignments) used in more than one module,\nand records which modules use them.",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {}
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "builders.variable_usage_builder.build_variable_usage_map": {
    "fqname": "builders.variable_usage_builder.build_variable_usage_map",
    "type": "function",
    "description": "For each variable, scan all other modules for references by name.",
    "tags": [],
    "source_file": "builders/variable_usage_builder.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "builders.variable_usage_builder.build_variable_usage_map",
      "module": "builders.variable_usage_builder",
      "name": "build_variable_usage_map",
      "type": "function",
      "lineno": 12,
      "source_file": "builders/variable_usage_builder.py",
      "description": "For each variable, scan all other modules for references by name.",
      "docstring_full": "For each variable, scan all other modules for references by name.\n\nParameters:\n    variables (list): List of variable nodes (from loader, type=='variable')\n    all_source_files (list): List of all source Path objects\n    root_path (Path): Project root for relative paths\n\nReturns:\n    dict: fqname -> list of modules (relative paths) where used",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "variables",
          "all_source_files",
          "root_path"
        ],
        "returns": null
      }
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "exporters.json_exporter": {
    "fqname": "exporters.json_exporter",
    "type": "module",
    "description": "Export the full entity graph to a structured JSON file.",
    "tags": [],
    "source_file": "exporters/json_exporter.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "exporters.json_exporter",
      "module": "exporters.json_exporter",
      "name": "exporters.json_exporter",
      "type": "module",
      "lineno": 1,
      "source_file": "exporters/json_exporter.py",
      "description": "Export the full entity graph to a structured JSON file.",
      "docstring_full": "Export the full entity graph to a structured JSON file.\n\nPart of the PIL output pipeline. This module writes the final metadata graph\nproduced by `entity_graph_builder.py` to disk in a machine-readable format.\n\nOutputs:\n  - entity_graph.json → Complete node metadata and semantic linkages\n\nConforms to the PIL metadata strategy:\n  - Includes docstrings, tags, governance flags, and semantic edges\n  - Supports downstream validation, journal linkage, and vault export",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {}
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "exporters.json_exporter.export_entity_graph": {
    "fqname": "exporters.json_exporter.export_entity_graph",
    "type": "function",
    "description": "Write the in-memory entity graph to `entity_graph.json`.",
    "tags": [],
    "source_file": "exporters/json_exporter.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "exporters.json_exporter.export_entity_graph",
      "module": "exporters.json_exporter",
      "name": "export_entity_graph",
      "type": "function",
      "lineno": 20,
      "source_file": "exporters/json_exporter.py",
      "description": "Write the in-memory entity graph to `entity_graph.json`.",
      "docstring_full": "Write the in-memory entity graph to `entity_graph.json`.\n\nParameters:\n    graph (dict): The keyed graph structure, e.g., { fqname: { ... } }\n    output_dir (str): Directory to emit the file into (relative or absolute)\n\nNotes:\n    - Output path is `${output_dir}/entity_graph.json`\n    - Will create the directory if it does not exist\n    - File is formatted with 2-space indentation",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "graph",
          "output_dir"
        ],
        "returns": null
      }
    },
    "links": [],
    "called_by_fqns": [
      "pipeline",
      "pipeline.run_pipeline"
    ],
    "calls_fqns": []
  },
  "exporters.markdown_vault_exporter": {
    "fqname": "exporters.markdown_vault_exporter",
    "type": "module",
    "description": "Markdown Vault Exporter (exporters)",
    "tags": [],
    "source_file": "exporters/markdown_vault_exporter.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "exporters.markdown_vault_exporter",
      "module": "exporters.markdown_vault_exporter",
      "name": "exporters.markdown_vault_exporter",
      "type": "module",
      "lineno": 1,
      "source_file": "exporters/markdown_vault_exporter.py",
      "description": "Markdown Vault Exporter (exporters)",
      "docstring_full": "Markdown Vault Exporter (exporters)\n\nExports the PIL entity graph as Markdown/Obsidian-compatible files for each symbol,\nusing human-friendly names for navigation but always showing the real fqname.",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {}
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "exporters.markdown_vault_exporter.friendly_name": {
    "fqname": "exporters.markdown_vault_exporter.friendly_name",
    "type": "function",
    "description": "Returns a human-friendly display name for vault navigation,",
    "tags": [],
    "source_file": "exporters/markdown_vault_exporter.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "exporters.markdown_vault_exporter.friendly_name",
      "module": "exporters.markdown_vault_exporter",
      "name": "friendly_name",
      "type": "function",
      "lineno": 12,
      "source_file": "exporters/markdown_vault_exporter.py",
      "description": "Returns a human-friendly display name for vault navigation,",
      "docstring_full": "Returns a human-friendly display name for vault navigation,\nwhile preserving real fqname in note metadata.",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "node"
        ],
        "returns": null
      }
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "exporters.markdown_vault_exporter._sanitize_filename": {
    "fqname": "exporters.markdown_vault_exporter._sanitize_filename",
    "type": "function",
    "description": "Replace slashes, quotes, and other problematic chars for filesystem safety.",
    "tags": [],
    "source_file": "exporters/markdown_vault_exporter.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "exporters.markdown_vault_exporter._sanitize_filename",
      "module": "exporters.markdown_vault_exporter",
      "name": "_sanitize_filename",
      "type": "function",
      "lineno": 42,
      "source_file": "exporters/markdown_vault_exporter.py",
      "description": "Replace slashes, quotes, and other problematic chars for filesystem safety.",
      "docstring_full": "Replace slashes, quotes, and other problematic chars for filesystem safety.",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "name"
        ],
        "returns": null
      }
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "exporters.markdown_vault_exporter.export_markdown_vault": {
    "fqname": "exporters.markdown_vault_exporter.export_markdown_vault",
    "type": "function",
    "description": "Export the entity graph as a Markdown vault: one file per node, with friendly names, tags, and links.",
    "tags": [],
    "source_file": "exporters/markdown_vault_exporter.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "exporters.markdown_vault_exporter.export_markdown_vault",
      "module": "exporters.markdown_vault_exporter",
      "name": "export_markdown_vault",
      "type": "function",
      "lineno": 58,
      "source_file": "exporters/markdown_vault_exporter.py",
      "description": "Export the entity graph as a Markdown vault: one file per node, with friendly names, tags, and links.",
      "docstring_full": "Export the entity graph as a Markdown vault: one file per node, with friendly names, tags, and links.\n\nParameters:\n    graph (dict): Entity graph keyed by fqname\n    output_dir (str): Output directory for the Markdown vault",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "graph",
          "output_dir"
        ],
        "returns": null
      }
    },
    "links": [],
    "called_by_fqns": [
      "pipeline",
      "pipeline.run_pipeline"
    ],
    "calls_fqns": []
  },
  "exporters.md_exporter": {
    "fqname": "exporters.md_exporter",
    "type": "module",
    "description": "Markdown Exporter (exporters)",
    "tags": [],
    "source_file": "exporters/md_exporter.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "exporters.md_exporter",
      "module": "exporters.md_exporter",
      "name": "exporters.md_exporter",
      "type": "module",
      "lineno": 1,
      "source_file": "exporters/md_exporter.py",
      "description": "Markdown Exporter (exporters)",
      "docstring_full": "Markdown Exporter (exporters)\n\nExports a single code entity as a Markdown file with metadata and Obsidian links.\nIntended for use in manual or fine-grained exports, not for bulk vault building.",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {}
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "exporters.md_exporter.export_entity_markdown": {
    "fqname": "exporters.md_exporter.export_entity_markdown",
    "type": "function",
    "description": "Export a single entity as a Markdown file with metadata and Obsidian links.",
    "tags": [],
    "source_file": "exporters/md_exporter.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "exporters.md_exporter.export_entity_markdown",
      "module": "exporters.md_exporter",
      "name": "export_entity_markdown",
      "type": "function",
      "lineno": 12,
      "source_file": "exporters/md_exporter.py",
      "description": "Export a single entity as a Markdown file with metadata and Obsidian links.",
      "docstring_full": "Export a single entity as a Markdown file with metadata and Obsidian links.\n\nArgs:\n    entity (dict): Entity metadata dictionary, e.g.\n        {\n            \"fqname\": \"module.func\",\n            \"type\": \"function\",\n            \"description\": \"...\",\n            \"tags\": [\"combat\", \"stateful\"],\n            ...\n        }\n    output_dir (str): Directory to write markdown file.",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "entity",
          "output_dir"
        ],
        "returns": null
      }
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "exporters.usage_map_exporter": {
    "fqname": "exporters.usage_map_exporter",
    "type": "module",
    "description": "",
    "tags": [],
    "source_file": "exporters/usage_map_exporter.py",
    "test_coverage": false,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "exporters.usage_map_exporter",
      "module": "exporters.usage_map_exporter",
      "name": "exporters.usage_map_exporter",
      "type": "module",
      "lineno": 1,
      "source_file": "exporters/usage_map_exporter.py",
      "description": "",
      "docstring_full": "",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": false,
      "metadata": {}
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "exporters.usage_map_exporter.export_usage_map": {
    "fqname": "exporters.usage_map_exporter.export_usage_map",
    "type": "function",
    "description": "Export the usage map as usage_map.json.",
    "tags": [],
    "source_file": "exporters/usage_map_exporter.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "exporters.usage_map_exporter.export_usage_map",
      "module": "exporters.usage_map_exporter",
      "name": "export_usage_map",
      "type": "function",
      "lineno": 6,
      "source_file": "exporters/usage_map_exporter.py",
      "description": "Export the usage map as usage_map.json.",
      "docstring_full": "Export the usage map as usage_map.json.\n\nArgs:\n    usage_map (dict): Usage summary dictionary (see build_usage_map).\n    output_dir (str): Directory to write the JSON file into.",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "usage_map",
          "output_dir"
        ],
        "returns": null
      }
    },
    "links": [],
    "called_by_fqns": [
      "pipeline",
      "pipeline.run_pipeline"
    ],
    "calls_fqns": []
  },
  "exporters.variable_usage_report_exporter": {
    "fqname": "exporters.variable_usage_report_exporter",
    "type": "module",
    "description": "Variable Usage Markdown Exporter (exporters)",
    "tags": [],
    "source_file": "exporters/variable_usage_report_exporter.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "exporters.variable_usage_report_exporter",
      "module": "exporters.variable_usage_report_exporter",
      "name": "exporters.variable_usage_report_exporter",
      "type": "module",
      "lineno": 1,
      "source_file": "exporters/variable_usage_report_exporter.py",
      "description": "Variable Usage Markdown Exporter (exporters)",
      "docstring_full": "Variable Usage Markdown Exporter (exporters)\n\nExports a summary report of variables/lists/constants used in more than one module,\nfor vault, governance, or architectural review.",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {}
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "exporters.variable_usage_report_exporter.export_variable_usage_markdown": {
    "fqname": "exporters.variable_usage_report_exporter.export_variable_usage_markdown",
    "type": "function",
    "description": "Writes a Markdown summary listing each variable used in multiple modules.",
    "tags": [],
    "source_file": "exporters/variable_usage_report_exporter.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "exporters.variable_usage_report_exporter.export_variable_usage_markdown",
      "module": "exporters.variable_usage_report_exporter",
      "name": "export_variable_usage_markdown",
      "type": "function",
      "lineno": 11,
      "source_file": "exporters/variable_usage_report_exporter.py",
      "description": "Writes a Markdown summary listing each variable used in multiple modules.",
      "docstring_full": "Writes a Markdown summary listing each variable used in multiple modules.\n\nParameters:\n    usage_map (dict): fqname -> list of modules where variable is used\n    output_path (str): Path to output .md file",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "usage_map",
          "output_path"
        ],
        "returns": null
      }
    },
    "links": [],
    "called_by_fqns": [
      "pipeline",
      "pipeline.run_pipeline"
    ],
    "calls_fqns": []
  },
  "exporters.vault_index_exporter": {
    "fqname": "exporters.vault_index_exporter",
    "type": "module",
    "description": "Vault Index Exporter (exporters)",
    "tags": [],
    "source_file": "exporters/vault_index_exporter.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "exporters.vault_index_exporter",
      "module": "exporters.vault_index_exporter",
      "name": "exporters.vault_index_exporter",
      "type": "module",
      "lineno": 1,
      "source_file": "exporters/vault_index_exporter.py",
      "description": "Vault Index Exporter (exporters)",
      "docstring_full": "Vault Index Exporter (exporters)\n\nGenerates an Obsidian-friendly index.md for your code vault,\ngrouped by type, with live Dataview sections and usage links.",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {}
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "exporters.vault_index_exporter.export_vault_index": {
    "fqname": "exporters.vault_index_exporter.export_vault_index",
    "type": "function",
    "description": "Writes an index.md in output_dir listing all code entities grouped by type,",
    "tags": [],
    "source_file": "exporters/vault_index_exporter.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "exporters.vault_index_exporter.export_vault_index",
      "module": "exporters.vault_index_exporter",
      "name": "export_vault_index",
      "type": "function",
      "lineno": 12,
      "source_file": "exporters/vault_index_exporter.py",
      "description": "Writes an index.md in output_dir listing all code entities grouped by type,",
      "docstring_full": "Writes an index.md in output_dir listing all code entities grouped by type,\nwith Obsidian links and Dataview live dashboards.",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "graph",
          "output_dir"
        ],
        "returns": null
      }
    },
    "links": [],
    "called_by_fqns": [
      "pipeline",
      "pipeline.run_pipeline"
    ],
    "calls_fqns": []
  },
  "loaders.config_loader": {
    "fqname": "loaders.config_loader",
    "type": "module",
    "description": "Config Loader (loaders)",
    "tags": [],
    "source_file": "loaders/config_loader.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "loaders.config_loader",
      "module": "loaders.config_loader",
      "name": "loaders.config_loader",
      "type": "module",
      "lineno": 1,
      "source_file": "loaders/config_loader.py",
      "description": "Config Loader (loaders)",
      "docstring_full": "Config Loader (loaders)\n\nLoads and validates the pilconfig.json configuration file for the PIL project.\nAll relevant paths are resolved as absolute, relative to the config file location.",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {}
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "loaders.config_loader.load_config": {
    "fqname": "loaders.config_loader.load_config",
    "type": "function",
    "description": "Load the PIL project configuration from pilconfig.json and resolve all important paths.",
    "tags": [],
    "source_file": "loaders/config_loader.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "loaders.config_loader.load_config",
      "module": "loaders.config_loader",
      "name": "load_config",
      "type": "function",
      "lineno": 12,
      "source_file": "loaders/config_loader.py",
      "description": "Load the PIL project configuration from pilconfig.json and resolve all important paths.",
      "docstring_full": "Load the PIL project configuration from pilconfig.json and resolve all important paths.\n\nArgs:\n    config_path (str): Path to pilconfig.json file (absolute or relative)\n\nReturns:\n    dict: Configuration fields as a dictionary, all relevant paths absolute.",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "config_path"
        ],
        "returns": null
      }
    },
    "links": [],
    "called_by_fqns": [
      "pipeline",
      "pipeline.run_pipeline"
    ],
    "calls_fqns": []
  },
  "loaders.markdown_loader": {
    "fqname": "loaders.markdown_loader",
    "type": "module",
    "description": "Markdown Loader",
    "tags": [],
    "source_file": "loaders/markdown_loader.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "loaders.markdown_loader",
      "module": "loaders.markdown_loader",
      "name": "loaders.markdown_loader",
      "type": "module",
      "lineno": 1,
      "source_file": "loaders/markdown_loader.py",
      "description": "Markdown Loader",
      "docstring_full": "Markdown Loader\n\nLoads and parses all Markdown (.md) files from a documentation or journal directory.\nExtracts frontmatter, tags, and optional code crosslinks for later graph integration.",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {}
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "loaders.markdown_loader.FRONTMATTER_RE": {
    "fqname": "loaders.markdown_loader.FRONTMATTER_RE",
    "type": "variable",
    "description": "",
    "tags": [],
    "source_file": "loaders/markdown_loader.py",
    "test_coverage": false,
    "docstring_present": false,
    "linked_journal_entry": "",
    "is_orphaned": true,
    "metadata": {
      "fqname": "loaders.markdown_loader.FRONTMATTER_RE",
      "module": "loaders.markdown_loader",
      "name": "FRONTMATTER_RE",
      "type": "variable",
      "lineno": 14,
      "source_file": "loaders/markdown_loader.py",
      "description": "",
      "docstring_full": "",
      "tags": [],
      "linked_journal_entry": "",
      "deprecated": false,
      "status": "",
      "visibility": "",
      "docstring_present": false,
      "metadata": {}
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "loaders.markdown_loader.parse_frontmatter": {
    "fqname": "loaders.markdown_loader.parse_frontmatter",
    "type": "function",
    "description": "Extract YAML frontmatter as a dict, if present.",
    "tags": [],
    "source_file": "loaders/markdown_loader.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "loaders.markdown_loader.parse_frontmatter",
      "module": "loaders.markdown_loader",
      "name": "parse_frontmatter",
      "type": "function",
      "lineno": 16,
      "source_file": "loaders/markdown_loader.py",
      "description": "Extract YAML frontmatter as a dict, if present.",
      "docstring_full": "Extract YAML frontmatter as a dict, if present.\n\nArgs:\n    md_content (str): Raw contents of a markdown file.\n\nReturns:\n    dict: Parsed frontmatter, or empty dict if none present.",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "md_content"
        ],
        "returns": null
      }
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "loaders.markdown_loader.load_markdown_entries": {
    "fqname": "loaders.markdown_loader.load_markdown_entries",
    "type": "function",
    "description": "Load all .md files from a directory and extract metadata for each.",
    "tags": [],
    "source_file": "loaders/markdown_loader.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "loaders.markdown_loader.load_markdown_entries",
      "module": "loaders.markdown_loader",
      "name": "load_markdown_entries",
      "type": "function",
      "lineno": 38,
      "source_file": "loaders/markdown_loader.py",
      "description": "Load all .md files from a directory and extract metadata for each.",
      "docstring_full": "Load all .md files from a directory and extract metadata for each.\n\nArgs:\n    journal_dir (str): Path to the journal or docs directory (absolute or relative)\n\nReturns:\n    List[dict]: Each with filename, frontmatter, content, tags",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "journal_dir"
        ],
        "returns": null
      }
    },
    "links": [],
    "called_by_fqns": [
      "pipeline",
      "pipeline.run_pipeline"
    ],
    "calls_fqns": []
  },
  "loaders.asset_loader": {
    "fqname": "loaders.asset_loader",
    "type": "module",
    "description": "Extract asset metadata from tracked folders for non-code files.",
    "tags": [],
    "source_file": "loaders/asset_loader.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "loaders.asset_loader",
      "module": "loaders.asset_loader",
      "name": "loaders.asset_loader",
      "type": "module",
      "lineno": 1,
      "source_file": "loaders/asset_loader.py",
      "description": "Extract asset metadata from tracked folders for non-code files.",
      "docstring_full": "Extract asset metadata from tracked folders for non-code files.\n\nScans all configured asset directories (from `tracked_assets` in `pilconfig.json`)\nand returns standardized metadata records for each valid asset. These are merged into\nthe main entity graph alongside code functions and modules.\n\nSupports extensions like `.png`, `.tmx`, `.glb`, `.sh`, `.json`, etc.",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {}
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "loaders.asset_loader.SUPPORTED_EXTENSIONS": {
    "fqname": "loaders.asset_loader.SUPPORTED_EXTENSIONS",
    "type": "variable",
    "description": "",
    "tags": [],
    "source_file": "loaders/asset_loader.py",
    "test_coverage": false,
    "docstring_present": false,
    "linked_journal_entry": "",
    "is_orphaned": true,
    "metadata": {
      "fqname": "loaders.asset_loader.SUPPORTED_EXTENSIONS",
      "module": "loaders.asset_loader",
      "name": "SUPPORTED_EXTENSIONS",
      "type": "variable",
      "lineno": 15,
      "source_file": "loaders/asset_loader.py",
      "description": "",
      "docstring_full": "",
      "tags": [],
      "linked_journal_entry": "",
      "deprecated": false,
      "status": "",
      "visibility": "",
      "docstring_present": false,
      "metadata": {}
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "loaders.asset_loader.infer_tags_from_path": {
    "fqname": "loaders.asset_loader.infer_tags_from_path",
    "type": "function",
    "description": "Infer semantic tags from the file path and extension.",
    "tags": [],
    "source_file": "loaders/asset_loader.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "loaders.asset_loader.infer_tags_from_path",
      "module": "loaders.asset_loader",
      "name": "infer_tags_from_path",
      "type": "function",
      "lineno": 21,
      "source_file": "loaders/asset_loader.py",
      "description": "Infer semantic tags from the file path and extension.",
      "docstring_full": "Infer semantic tags from the file path and extension.\n\nParameters:\n    filepath (Path): Relative or absolute path to the asset file\n\nReturns:\n    list[str]: Sorted tag list (e.g. [\"assets\", \"maps\", \"tmx\"])",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "filepath"
        ],
        "returns": null
      }
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "loaders.asset_loader.export_path_list": {
    "fqname": "loaders.asset_loader.export_path_list",
    "type": "function",
    "description": "Ensures all paths in the list are absolute, resolving relative paths from config file's directory.",
    "tags": [],
    "source_file": "loaders/asset_loader.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "loaders.asset_loader.export_path_list",
      "module": "loaders.asset_loader",
      "name": "export_path_list",
      "type": "function",
      "lineno": 42,
      "source_file": "loaders/asset_loader.py",
      "description": "Ensures all paths in the list are absolute, resolving relative paths from config file's directory.",
      "docstring_full": "Ensures all paths in the list are absolute, resolving relative paths from config file's directory.",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "paths",
          "config_base_dir"
        ],
        "returns": null
      }
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "loaders.asset_loader.load_asset_symbols": {
    "fqname": "loaders.asset_loader.load_asset_symbols",
    "type": "function",
    "description": "Scan the entire project_root recursively and extract metadata",
    "tags": [],
    "source_file": "loaders/asset_loader.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "loaders.asset_loader.load_asset_symbols",
      "module": "loaders.asset_loader",
      "name": "load_asset_symbols",
      "type": "function",
      "lineno": 56,
      "source_file": "loaders/asset_loader.py",
      "description": "Scan the entire project_root recursively and extract metadata",
      "docstring_full": "Scan the entire project_root recursively and extract metadata\nfor asset files matching supported extensions.\n\nUses config[\"asset_extensions\"] and config[\"ignored_folders\"].",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "config"
        ],
        "returns": null
      }
    },
    "links": [],
    "called_by_fqns": [
      "pipeline",
      "pipeline.run_pipeline"
    ],
    "calls_fqns": []
  },
  "loaders.code_loader": {
    "fqname": "loaders.code_loader",
    "type": "module",
    "description": "Code Loader (loaders)",
    "tags": [],
    "source_file": "loaders/code_loader.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "loaders.code_loader",
      "module": "loaders.code_loader",
      "name": "loaders.code_loader",
      "type": "module",
      "lineno": 1,
      "source_file": "loaders/code_loader.py",
      "description": "Code Loader (loaders)",
      "docstring_full": "Code Loader (loaders)\n\nWalks the source tree and extracts all top-level symbols (functions, classes, methods, variables, modules).\nEnriches each symbol with structured docstring metadata in bulk for efficient processing.",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {}
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "loaders.code_loader.extract_nodes_from_ast": {
    "fqname": "loaders.code_loader.extract_nodes_from_ast",
    "type": "function",
    "description": "Extract all classes, functions, methods, variables, and modules from the AST of a source file.",
    "tags": [],
    "source_file": "loaders/code_loader.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "loaders.code_loader.extract_nodes_from_ast",
      "module": "loaders.code_loader",
      "name": "extract_nodes_from_ast",
      "type": "function",
      "lineno": 16,
      "source_file": "loaders/code_loader.py",
      "description": "Extract all classes, functions, methods, variables, and modules from the AST of a source file.",
      "docstring_full": "Extract all classes, functions, methods, variables, and modules from the AST of a source file.\n\nArgs:\n    tree (ast.AST): The parsed AST of the source file.\n    source_file (Path): The full path to the source file.\n    root_path (Path): The project root path to calculate relative paths.\n\nReturns:\n    List[Dict[str, Any]]: A list of enriched symbol dictionaries.",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "tree",
          "source_file",
          "root_path"
        ],
        "returns": null
      }
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "loaders.code_loader.load_code_symbols": {
    "fqname": "loaders.code_loader.load_code_symbols",
    "type": "function",
    "description": "Parse a single Python file and return a list of symbols with metadata.",
    "tags": [],
    "source_file": "loaders/code_loader.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "loaders.code_loader.load_code_symbols",
      "module": "loaders.code_loader",
      "name": "load_code_symbols",
      "type": "function",
      "lineno": 184,
      "source_file": "loaders/code_loader.py",
      "description": "Parse a single Python file and return a list of symbols with metadata.",
      "docstring_full": "Parse a single Python file and return a list of symbols with metadata.\n\nArgs:\n    pyfile_path (str): Path to .py file.\n    project_root (str): Project root directory (absolute).\n\nReturns:\n    list of dicts: Each with type, name, fqname, module, lineno, doc.",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "pyfile_path",
          "project_root"
        ],
        "returns": null
      }
    },
    "links": [],
    "called_by_fqns": [
      "pipeline",
      "pipeline.run_pipeline"
    ],
    "calls_fqns": []
  },
  "loaders.code_loader.ParentNodeVisitor": {
    "fqname": "loaders.code_loader.ParentNodeVisitor",
    "type": "class",
    "description": "",
    "tags": [],
    "source_file": "loaders/code_loader.py",
    "test_coverage": false,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "loaders.code_loader.ParentNodeVisitor",
      "module": "loaders.code_loader",
      "name": "ParentNodeVisitor",
      "type": "class",
      "lineno": 39,
      "source_file": "loaders/code_loader.py",
      "description": "",
      "docstring_full": "",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": false,
      "metadata": {}
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "loaders.code_loader.visit": {
    "fqname": "loaders.code_loader.visit",
    "type": "method",
    "description": "",
    "tags": [],
    "source_file": "loaders/code_loader.py",
    "test_coverage": false,
    "docstring_present": false,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "loaders.code_loader.visit",
      "module": "loaders.code_loader",
      "name": "visit",
      "type": "method",
      "lineno": 41,
      "source_file": "loaders/code_loader.py",
      "description": "",
      "docstring_full": "",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": false,
      "metadata": {
        "args": [
          "self",
          "node"
        ],
        "returns": null
      }
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "utils.docstring_utils": {
    "fqname": "utils.docstring_utils",
    "type": "module",
    "description": "Docstring Utilities (utils)",
    "tags": [],
    "source_file": "utils/docstring_utils.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "utils.docstring_utils",
      "module": "utils.docstring_utils",
      "name": "utils.docstring_utils",
      "type": "module",
      "lineno": 1,
      "source_file": "utils/docstring_utils.py",
      "description": "Docstring Utilities (utils)",
      "docstring_full": "Docstring Utilities (utils)\n\nHouses reusable docstring validation logic shared across pipeline components.\nAlso supports docstring extraction and structured annotation parsing.",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {}
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "utils.docstring_utils.check_docstring_signature_match": {
    "fqname": "utils.docstring_utils.check_docstring_signature_match",
    "type": "function",
    "description": "Checks if the function docstring references the function name and its parameters.",
    "tags": [],
    "source_file": "utils/docstring_utils.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "utils.docstring_utils.check_docstring_signature_match",
      "module": "utils.docstring_utils",
      "name": "check_docstring_signature_match",
      "type": "function",
      "lineno": 13,
      "source_file": "utils/docstring_utils.py",
      "description": "Checks if the function docstring references the function name and its parameters.",
      "docstring_full": "Checks if the function docstring references the function name and its parameters.\n\nParameters:\n    node (dict): Metadata dictionary for a function or method.\n\nReturns:\n    bool: True if name and all params appear in the first line of the docstring",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "node"
        ],
        "returns": null
      }
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "utils.docstring_utils.extract_docstring_metadata": {
    "fqname": "utils.docstring_utils.extract_docstring_metadata",
    "type": "function",
    "description": "Extracts structured metadata from a docstring.",
    "tags": [
      "tag1",
      "tag2"
    ],
    "source_file": "utils/docstring_utils.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": "linked entry",
    "is_orphaned": true,
    "metadata": {
      "fqname": "utils.docstring_utils.extract_docstring_metadata",
      "module": "utils.docstring_utils",
      "name": "extract_docstring_metadata",
      "type": "function",
      "lineno": 32,
      "source_file": "utils/docstring_utils.py",
      "description": "Extracts structured metadata from a docstring.",
      "docstring_full": "Extracts structured metadata from a docstring.\n\nParameters:\n    docstring (str): Full function/class/module docstring\n\nReturns:\n    dict: Contains 'description', 'docstring_full', 'tags', 'journal', 'deprecated', plus optional future fields.\n\nSupports:\n    - @tags: [\"tag1\", \"tag2\"]\n    - @journal: \"linked entry\"\n    - @deprecated\n    - @status: \"draft\"\n    - @visibility: \"internal\"",
      "tags": [
        "tag1",
        "tag2"
      ],
      "linked_journal_entry": "linked entry",
      "deprecated": true,
      "status": "draft",
      "visibility": "internal",
      "docstring_present": true,
      "metadata": {
        "args": [
          "docstring"
        ],
        "returns": null
      }
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "utils.exceptions_reporter_utils": {
    "fqname": "utils.exceptions_reporter_utils",
    "type": "module",
    "description": "Project health analysis and governance exception reporting.",
    "tags": [],
    "source_file": "utils/exceptions_reporter_utils.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "utils.exceptions_reporter_utils",
      "module": "utils.exceptions_reporter_utils",
      "name": "utils.exceptions_reporter_utils",
      "type": "module",
      "lineno": 1,
      "source_file": "utils/exceptions_reporter_utils.py",
      "description": "Project health analysis and governance exception reporting.",
      "docstring_full": "Project health analysis and governance exception reporting.\n\nDelegates validation and enrichment to dedicated modules. Coordinates:\n- Governance rule execution\n- Usage graph export\n- Summary reporting\n\nGovernance logic lives in governance_validator.py\nUsage mapping lives in usage_map_builder.py",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {}
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "utils.exceptions_reporter_utils.generate_exception_report": {
    "fqname": "utils.exceptions_reporter_utils.generate_exception_report",
    "type": "function",
    "description": "Extracts and exports metadata violations and usage mappings to a governance-style report.",
    "tags": [],
    "source_file": "utils/exceptions_reporter_utils.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "utils.exceptions_reporter_utils.generate_exception_report",
      "module": "utils.exceptions_reporter_utils",
      "name": "generate_exception_report",
      "type": "function",
      "lineno": 21,
      "source_file": "utils/exceptions_reporter_utils.py",
      "description": "Extracts and exports metadata violations and usage mappings to a governance-style report.",
      "docstring_full": "Extracts and exports metadata violations and usage mappings to a governance-style report.\n\nParameters:\n    graph (dict): Full entity graph keyed by fqname\n    output_path (str): Path to write the exceptions report\n\nReturns:\n    dict: Summary counts of major issue types for downstream printing",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "graph",
          "output_path"
        ],
        "returns": null
      }
    },
    "links": [],
    "called_by_fqns": [
      "pipeline",
      "pipeline.run_pipeline"
    ],
    "calls_fqns": []
  },
  "utils.graph_utils": {
    "fqname": "utils.graph_utils",
    "type": "module",
    "description": "Graph Utilities",
    "tags": [],
    "source_file": "utils/graph_utils.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "utils.graph_utils",
      "module": "utils.graph_utils",
      "name": "utils.graph_utils",
      "type": "module",
      "lineno": 1,
      "source_file": "utils/graph_utils.py",
      "description": "Graph Utilities",
      "docstring_full": "Graph Utilities\n\nCommon functions for working with the code entity graph: walking nodes, traversing edges, etc.",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {}
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "utils.graph_utils.walk_graph": {
    "fqname": "utils.graph_utils.walk_graph",
    "type": "function",
    "description": "Walk the entity graph, applying a visitor function to each node.",
    "tags": [],
    "source_file": "utils/graph_utils.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "utils.graph_utils.walk_graph",
      "module": "utils.graph_utils",
      "name": "walk_graph",
      "type": "function",
      "lineno": 9,
      "source_file": "utils/graph_utils.py",
      "description": "Walk the entity graph, applying a visitor function to each node.",
      "docstring_full": "Walk the entity graph, applying a visitor function to each node.\nOptionally start at a subset of nodes; otherwise walk all.\n\nArgs:\n    graph (dict): { fqname: node dict }\n    visit (callable): function(fqname, node)\n    start_nodes (set): Subset of fqn names to start from (optional)",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "graph",
          "visit",
          "start_nodes"
        ],
        "returns": null
      }
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "utils.path_utils": {
    "fqname": "utils.path_utils",
    "type": "module",
    "description": "Path Utilities",
    "tags": [],
    "source_file": "utils/path_utils.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "utils.path_utils",
      "module": "utils.path_utils",
      "name": "utils.path_utils",
      "type": "module",
      "lineno": 1,
      "source_file": "utils/path_utils.py",
      "description": "Path Utilities",
      "docstring_full": "Path Utilities\n\nFunctions for resolving and normalizing paths across PIL modules.",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {}
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "utils.path_utils.resolve_path": {
    "fqname": "utils.path_utils.resolve_path",
    "type": "function",
    "description": "Resolve a given path (relative or absolute) to an absolute, normalized string.",
    "tags": [],
    "source_file": "utils/path_utils.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "utils.path_utils.resolve_path",
      "module": "utils.path_utils",
      "name": "resolve_path",
      "type": "function",
      "lineno": 11,
      "source_file": "utils/path_utils.py",
      "description": "Resolve a given path (relative or absolute) to an absolute, normalized string.",
      "docstring_full": "Resolve a given path (relative or absolute) to an absolute, normalized string.\n\nArgs:\n    path (str): File or directory path (can be relative)\n    base (str, optional): Base directory to resolve from (if given)\n\nReturns:\n    str: Absolute, normalized path",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "path",
          "base"
        ],
        "returns": null
      }
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "utils.test_coverage_utils": {
    "fqname": "utils.test_coverage_utils",
    "type": "module",
    "description": "Test Coverage Utilities (utils)",
    "tags": [],
    "source_file": "utils/test_coverage_utils.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "utils.test_coverage_utils",
      "module": "utils.test_coverage_utils",
      "name": "utils.test_coverage_utils",
      "type": "module",
      "lineno": 1,
      "source_file": "utils/test_coverage_utils.py",
      "description": "Test Coverage Utilities (utils)",
      "docstring_full": "Test Coverage Utilities (utils)\n\nProvides functions to estimate static test coverage by scanning test files\nand matching function/method/class names to code symbols.",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {}
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "utils.test_coverage_utils.estimate_test_coverage": {
    "fqname": "utils.test_coverage_utils.estimate_test_coverage",
    "type": "function",
    "description": "Updates the 'test_coverage' field for each symbol based on whether",
    "tags": [],
    "source_file": "utils/test_coverage_utils.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "utils.test_coverage_utils.estimate_test_coverage",
      "module": "utils.test_coverage_utils",
      "name": "estimate_test_coverage",
      "type": "function",
      "lineno": 13,
      "source_file": "utils/test_coverage_utils.py",
      "description": "Updates the 'test_coverage' field for each symbol based on whether",
      "docstring_full": "Updates the 'test_coverage' field for each symbol based on whether\nits function/class/method name appears in any test file.\n\nParameters:\n    symbols (list[dict]): List of code symbol metadata dicts.\n    test_dir (str): Directory containing test files.\n\nReturns:\n    list[dict]: The same list, with 'test_coverage' set for each symbol.",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "symbols",
          "test_dir"
        ],
        "returns": null
      }
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "utils.snapshot_utils": {
    "fqname": "utils.snapshot_utils",
    "type": "module",
    "description": "Utility to create a zip snapshot of the full project for archival or traceability.",
    "tags": [],
    "source_file": "utils/snapshot_utils.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "utils.snapshot_utils",
      "module": "utils.snapshot_utils",
      "name": "utils.snapshot_utils",
      "type": "module",
      "lineno": 1,
      "source_file": "utils/snapshot_utils.py",
      "description": "Utility to create a zip snapshot of the full project for archival or traceability.",
      "docstring_full": "Utility to create a zip snapshot of the full project for archival or traceability.\n\nThis should be called from within pipeline.py using:\n    from pil_meta.utils.snapshot_utils import take_project_snapshot",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {}
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "utils.snapshot_utils.IGNORED_FOLDERS": {
    "fqname": "utils.snapshot_utils.IGNORED_FOLDERS",
    "type": "variable",
    "description": "",
    "tags": [],
    "source_file": "utils/snapshot_utils.py",
    "test_coverage": false,
    "docstring_present": false,
    "linked_journal_entry": "",
    "is_orphaned": true,
    "metadata": {
      "fqname": "utils.snapshot_utils.IGNORED_FOLDERS",
      "module": "utils.snapshot_utils",
      "name": "IGNORED_FOLDERS",
      "type": "variable",
      "lineno": 14,
      "source_file": "utils/snapshot_utils.py",
      "description": "",
      "docstring_full": "",
      "tags": [],
      "linked_journal_entry": "",
      "deprecated": false,
      "status": "",
      "visibility": "",
      "docstring_present": false,
      "metadata": {}
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "utils.snapshot_utils.take_project_snapshot": {
    "fqname": "utils.snapshot_utils.take_project_snapshot",
    "type": "function",
    "description": "Create a compressed zip snapshot of the entire project_root.",
    "tags": [],
    "source_file": "utils/snapshot_utils.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": false,
    "metadata": {
      "fqname": "utils.snapshot_utils.take_project_snapshot",
      "module": "utils.snapshot_utils",
      "name": "take_project_snapshot",
      "type": "function",
      "lineno": 20,
      "source_file": "utils/snapshot_utils.py",
      "description": "Create a compressed zip snapshot of the entire project_root.",
      "docstring_full": "Create a compressed zip snapshot of the entire project_root.\n\nParameters:\n    config (dict): The loaded pilconfig with required keys:\n                   - project_root\n                   - snapshot_dir\n\nReturns:\n    Path: The full path to the created snapshot file.\n\nRaises:\n    Exception: If snapshot folder is unwritable or missing config keys.",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "config"
        ],
        "returns": null
      }
    },
    "links": [],
    "called_by_fqns": [
      "pipeline",
      "pipeline.run_pipeline"
    ],
    "calls_fqns": []
  },
  "validators.governance_validator": {
    "fqname": "validators.governance_validator",
    "type": "module",
    "description": "Validation Rules (validators)",
    "tags": [],
    "source_file": "validators/governance_validator.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "validators.governance_validator",
      "module": "validators.governance_validator",
      "name": "validators.governance_validator",
      "type": "module",
      "lineno": 1,
      "source_file": "validators/governance_validator.py",
      "description": "Validation Rules (validators)",
      "docstring_full": "Validation Rules (validators)\n\nApplies all governance rules to the entity graph.\nIncludes docstring checks, test coverage, orphan detection, etc.",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {}
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  },
  "validators.governance_validator.validate_governance_rules": {
    "fqname": "validators.governance_validator.validate_governance_rules",
    "type": "function",
    "description": "Run all rule checks over the graph.",
    "tags": [],
    "source_file": "validators/governance_validator.py",
    "test_coverage": false,
    "docstring_present": true,
    "linked_journal_entry": null,
    "is_orphaned": true,
    "metadata": {
      "fqname": "validators.governance_validator.validate_governance_rules",
      "module": "validators.governance_validator",
      "name": "validate_governance_rules",
      "type": "function",
      "lineno": 13,
      "source_file": "validators/governance_validator.py",
      "description": "Run all rule checks over the graph.",
      "docstring_full": "Run all rule checks over the graph.\n\nParameters:\n    graph (dict): Entity graph keyed by fqname\n\nReturns:\n    tuple: (violations dict, issue counter)",
      "tags": [],
      "linked_journal_entry": null,
      "deprecated": false,
      "status": null,
      "visibility": null,
      "docstring_present": true,
      "metadata": {
        "args": [
          "graph"
        ],
        "returns": null
      }
    },
    "links": [],
    "called_by_fqns": [],
    "calls_fqns": []
  }
}